// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SAPFiori
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AudioToolbox
import AuthenticationServices
import Combine
import Contacts
import CoreGraphics
import CoreText
import Foundation
import LocalAuthentication
import MapKit
import MobileCoreServices
import Photos
import PhotosUI
import QuartzCore
import QuickLook
import SAPCommon
@_exported import SAPFiori
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import os.activity
import os.log
import os
public protocol FUIDrawingPadComponent : SAPFiori.FUIStrokeComponent {
  var drawingAreaBackgroundColor: UIKit.UIColor { get set }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIChartRangeSummaryItemView : SAPFiori.FUIChartSummaryItemBaseView<SAPFiori.FUIChartRangeSummaryItem> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) public var lowerBoundTitle: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) public var lowerBoundTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var upperBoundTitle: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) public var upperBoundTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valueText: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) public var valueAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var trendSemanticColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var categoryRange: Swift.ClosedRange<Swift.Int>
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
}
public protocol FUIAttachmentAction {
  var title: Swift.String { get }
  func action(onController controller: SAPFiori.FUIAttachmentsViewController)
  func isAvailable(_ alertAction: UIKit.UIAlertAction) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIOrderPickerFormView : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUITitleComponent, SAPFiori.FUIContentCopyable, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIText {
    get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) override public func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override public func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override public func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, shouldIndentWhileEditingRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, canMoveRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, moveRowAt sourceIndexPath: Foundation.IndexPath, to destinationIndexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) override public func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public var isContentCopyable: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias TitleText = SAPFiori.FUIText
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIAttachmentsViewController : UIKit.UIViewController, QuickLook.QLPreviewControllerDataSource, QuickLook.QLPreviewControllerDelegate {
  @_Concurrency.MainActor(unsafe) weak open var delegate: SAPFiori.FUIAttachmentsViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) weak open var dataSource: SAPFiori.FUIAttachmentsViewControllerDataSource?
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maxItems: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var customAttachmentsTitleFormat: Swift.String?
  @_Concurrency.MainActor(unsafe) public var customCancelString: Swift.String?
  @available(*, deprecated, message: "This property is kept for backwards-compatibility, but has no effect on the view")
  @_Concurrency.MainActor(unsafe) public var customPopupTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) open class func instantiateViewController() -> SAPFiori.FUIAttachmentsViewController
  @_Concurrency.MainActor(unsafe) open func numberOfAttachmentActions() -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func addAttachmentAction(_ action: SAPFiori.FUIAttachmentAction)
  @_Concurrency.MainActor(unsafe) public func removeAttachmentAction(at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func removeAllAttachmentActions()
  @_Concurrency.MainActor(unsafe) public func reloadData()
  @_Concurrency.MainActor(unsafe) public func register(_ attachmentCellClass: Swift.AnyClass?, forCellWithReuseIdentifier identifier: Swift.String)
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell(withReuseIdentifier identifier: Swift.String, forAttachment index: Swift.Int) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) public var previewController: QuickLook.QLPreviewController {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc public func numberOfPreviewItems(in controller: QuickLook.QLPreviewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func previewController(_ controller: QuickLook.QLPreviewController, previewItemAt index: Swift.Int) -> QuickLook.QLPreviewItem
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc public func previewControllerDidDismiss(_ controller: QuickLook.QLPreviewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUICardHeaderView : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUICardHeaderViewComponent {
  @_Concurrency.MainActor(unsafe) public var detailImageView: SAPFiori.FUIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var detailImageViewSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIMultiLineText
  @_Concurrency.MainActor(unsafe) public var overflowAction: SAPFiori.FUIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) public var overflowActionSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias TitleText = SAPFiori.FUIMultiLineText
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUISwitchComponent {
  public var value: Swift.Bool {
    get
    set
  }
  public var onChangeHandler: ((Swift.Bool) -> Swift.Void)? {
    get
    set
  }
  public var tagsStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUITimelineMarkerCell : SAPFiori.NibDesignableFUIBaseTableViewCell {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var titleLabel: SAPFiori.FUILabel! {
    get
  }
  @available(*, unavailable, renamed: "timestampLabel")
  @_Concurrency.MainActor(unsafe) public var eventLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var timestampLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryTimestampLabel: SAPFiori.FUILabel! {
    get
  }
  @available(*, unavailable, renamed: "secondaryTimestampImageView")
  @_Concurrency.MainActor(unsafe) public var eventImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryTimestampImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var nodeImageView: SAPFiori.FUIImageView! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var nodeColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nodeType: SAPFiori.FUITimelineMarkerCell.NodeType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isPast: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var separatorLineView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cardBackground: UIKit.UIView {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var timelineBackground: UIKit.UIView! {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var titleText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "timestampText")
  @_Concurrency.MainActor(unsafe) public var eventText: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var timestampText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var secondaryTimestampText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "secondaryTimestampImage")
  @_Concurrency.MainActor(unsafe) public var eventImage: UIKit.UIImage?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var secondaryTimestampImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var nodeImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var timelineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var showLeadingTimeline: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var showTrailingTimeline: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
}
extension SAPFiori.FUITimelineMarkerCell {
  public enum NodeType : Swift.Int {
    case beforeStart
    case start
    case beforeEnd
    case end
    case `default`
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
public protocol FUITitleComponent : SAPFiori.FUITitleBaseComponent where Self.TitleText : SAPFiori.FUIText {
  var title: SAPFiori.FUIText { get }
}
public protocol FUITitleMultiLineComponent : SAPFiori.FUITitleBaseComponent where Self.TitleText : SAPFiori.FUIMultiLineText {
  var title: SAPFiori.FUIMultiLineText { get }
}
public protocol FUITitleBaseComponent : SAPFiori.FUIAttributesConsumer {
  associatedtype TitleText : SAPFiori.FUITextProtocol
  var title: Self.TitleText { get }
  var titleAttributedText: Foundation.NSAttributedString! { get set }
  var titleStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUITitleBaseComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var titleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension SAPFiori.FUITitleBaseComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var titleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
@available(*, unavailable, message: "Obsoleted, not released in 1.1")
public protocol FUITableViewSectionDataSource : AnyObject {
}
@objc public enum FUIBarcodeScanMode : Swift.Int {
  case qr
  case ean_upc
  case one_d
  case two_d
  case all
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIStartActionComponent {
  public var startActionTitle: SAPFiori.FUIText {
    get
    set
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIRestartActionComponent {
  public var restartActionTitle: SAPFiori.FUIText {
    get
    set
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUICancelActionComponent {
  public var cancelActionTitle: SAPFiori.FUIText {
    get
    set
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIClearActionComponent {
  public var clearActionTitle: SAPFiori.FUIText {
    get
    set
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUISaveActionComponent {
  public var saveActionTitle: SAPFiori.FUIText {
    get
    set
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIWatermarkTextComponent {
  public var watermarkText: SAPFiori.FUIText {
    get
    set
  }
}
open class FUIGridRowTextItem : SAPFiori.FUIGridRowItem {
  public var text: Swift.String! {
    get
    set
  }
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var attributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var font: UIKit.UIFont? {
    get
    set
  }
  public var textColor: UIKit.UIColor? {
    get
    set
  }
  public var binding: SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Text?
  public var textAlignment: UIKit.NSTextAlignment {
    get
    set
  }
  public var numberOfLines: Swift.Int {
    get
    set
  }
  public var lineBreakMode: UIKit.NSLineBreakMode {
    get
    set
  }
  public var numberFormatter: Foundation.NumberFormatter? {
    get
    set
  }
  public var type: SAPFiori.FUIGridRowItemType {
    get
  }
  public init(text: Swift.String)
  public init(number: Foundation.NSNumber, formatter: Foundation.NumberFormatter? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISegmentControl : UIKit.UISegmentedControl, SAPFiori.FUIAttributedStringDrawing {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(items: [Any]?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setTitleTextAttributes(_ attributes: [Foundation.NSAttributedString.Key : Any]?, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) public func setNeedsRefreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) public func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public var backingPropertyValueMap: [SAPFiori.FUIPropertyRef : Foundation.NSAttributedString?]
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIKPIHeader : SAPFiori.FUIDrawingView {
  @_Concurrency.MainActor(unsafe) public var isItemOrderForced: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public init(items: [SAPFiori.FUIKPIContainer])
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
  @_Concurrency.MainActor(unsafe) open var bannerView: SAPFiori.FUIBannerMessageView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var items: [SAPFiori.FUIKPIContainer] {
    get
    set
  }
  @available(*, deprecated, message: "Will be unavailble in newer SDK version.")
  @_Concurrency.MainActor(unsafe) override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var interItemSpacing: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseItemCollectionViewCell<InnerView> : SAPFiori.FUIBaseDrawingCollectionViewCell<InnerView> where InnerView : SAPFiori.FUIImageCollectionItemView {
  @_Concurrency.MainActor(unsafe) public var itemSize: SAPFiori.FUICollectionCellSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailImageViewSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var documentImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholderBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIObjectTableViewCell : SAPFiori.FUIObjectBaseTableViewCell<SAPFiori.FUIObjectView> {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var detailImageViewSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willTransition(to state: SAPFiori.UITableViewCellStateMask)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIFilterFormView : SAPFiori.FUIFormCellContentView<SAPFiori.FUIFilterValueView, SAPFiori.FUIControlState, SAPFiori.FUIMultiLineText>, SAPFiori.FUITitleMultiLineComponent, SAPFiori.FUIPropertyFormCell {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var keyLabel: SAPFiori.FUILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var buttonStyle: SAPFiori.FUIFilterButtonSize {
    get
    set
  }
  public typealias ValueType = [Swift.Int]
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var validationView: SAPFiori.FUIInlineValidationView!
  @_Concurrency.MainActor(unsafe) public var validationMessage: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var filterValueView: SAPFiori.FUIFilterValueView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var value: [Swift.Int] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: (([Swift.Int]) -> Swift.Void)? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var valueOptions: [Swift.String] {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var filterGroup: SAPFiori.FUIFilterGroup? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsMultipleSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsEmptySelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var apportionsSegmentWidthsByContent: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var segmentWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var segmentHeight: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setButtonAttributes(_ buttonAttributes: SAPFiori.FUISegmentedControlButtonAttributes, for state: SAPFiori.FUIControlState)
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias TitleText = SAPFiori.FUIMultiLineText
  @objc deinit
}
public enum FUIFilterButtonSize : Swift.Int {
  case fixed
  case flexible
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class FUIKPIUnitItem : SAPFiori.FUIKPIViewItem {
  convenience public init(string: Swift.String)
  convenience public init(attributedString: Foundation.NSAttributedString)
  public var attributedString: Foundation.NSAttributedString {
    get
  }
  required public init?(coder aDecoder: Foundation.NSCoder)
  public var attributes: [SAPFiori.NSAttributedStringKey : Any]
  open var style: SAPFiori.FUIKPIViewItemStyle {
    get
  }
  public var accessibilityLabel: Swift.String?
  public var accessibilityValue: Swift.String?
  public var accessibilityHint: Swift.String?
  public var accessibilityTraits: UIKit.UIAccessibilityTraits
  public var accessibilityPath: UIKit.UIBezierPath?
  public var accessibilityLanguage: Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUITitleFormCell : SAPFiori.FUIInlineValidationUIControlTintTableViewCell, SAPFiori.FUIFormCell, UIKit.UITextFieldDelegate, SAPFiori.FUIStateReadOnly {
  public typealias TintState = UIKit.UIControl.State
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  public typealias ValueType = Swift.String
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var value: Swift.String {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.String) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var valueTextField: SAPFiori.FUITextField! {
    get
  }
  @objc @available(*, unavailable, renamed: "valueTextField")
  @IBOutlet @_Concurrency.MainActor(unsafe) weak public var titleTextField: SAPFiori.FUITextField! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var maxTitleTextLength: Swift.Int
  @_Concurrency.MainActor(unsafe) public var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isTrackingLiveChanges: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var placeholderText: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var isReadOnly: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) override open func applyTintColor(forState state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityValue: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
}
public protocol FUIMapFloorplanComponent {
  var detailPanel: SAPFiori.FUIMapDetailPanel! { get }
  var toolbar: SAPFiori.FUIMapToolbar! { get }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIMapFloorplanComponent {
  public var detailPanel: SAPFiori.FUIMapDetailPanel {
    get
  }
  public var toolbar: SAPFiori.FUIMapToolbar {
    get
  }
}
public protocol Defaultable {
  static var `default`: Self { get }
}
public protocol Enableable {
  static var defaultEnabled: Self { get }
}
extension SAPFiori.FUIControlState : SAPFiori.Defaultable, SAPFiori.Enableable {
  public static let `default`: SAPFiori.FUIControlState
  public static let defaultEnabled: SAPFiori.FUIControlState
}
public protocol FUIStyleByTintAttributes : AnyObject {
  associatedtype TintState : SAPFiori.Defaultable, Swift.Hashable
  var tintAttributes: [SAPFiori.FUIPropertyRef : [Self.TintState : [SAPFiori.NSAttributedStringKey : Any]]] { get set }
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  func setTintColor(_ color: UIKit.UIColor, for property: SAPFiori.FUIPropertyRef, state: Self.TintState)
  func addAttributes(_ attributes: [SAPFiori.NSAttributedStringKey : Any], for property: SAPFiori.FUIPropertyRef, state: Self.TintState)
  func setAttributes(_ attributes: [SAPFiori.NSAttributedStringKey : Any], for property: SAPFiori.FUIPropertyRef, state: Self.TintState)
  var tintState: Self.TintState { get set }
}
extension SAPFiori.FUIStyleByTintAttributes {
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  public func setTintColor(_ color: UIKit.UIColor, for property: SAPFiori.FUIPropertyRef, state: Self.TintState)
  public func addAttributes(_ attributes: [SAPFiori.NSAttributedStringKey : Any], for property: SAPFiori.FUIPropertyRef, state: Self.TintState)
  public func setAttributes(_ attributes: [SAPFiori.NSAttributedStringKey : Any], for property: SAPFiori.FUIPropertyRef, state: Self.TintState)
}
public struct FUIDateRange {
  public let startDate: Foundation.Date?
  public let endDate: Foundation.Date?
  public init(startDate: Foundation.Date = Date(), endDate: Foundation.Date = Date())
  public init(startDate: Foundation.Date = Date(), duration: Swift.Int = 1)
}
public protocol FUIReactingToAccessory {
  var isStatusForcedToCenterYAlignment: Swift.Bool { get set }
  func centerYOffsetForAccessory() -> CoreFoundation.CGFloat
}
@_hasMissingDesignatedInitializers open class FUIKPIIconItem : SAPFiori.FUIKPIViewItem {
  convenience public init(_ icon: UIKit.UIImage, _ iconSize: CoreFoundation.CGSize? = CGSize(width: 32, height: 32))
  convenience public init(icon: UIKit.UIImage)
  convenience public init(attributedString: Foundation.NSAttributedString)
  public var attributes: [SAPFiori.NSAttributedStringKey : Any]
  open var style: SAPFiori.FUIKPIViewItemStyle {
    get
  }
  public var attributedString: Foundation.NSAttributedString {
    get
  }
  public var accessibilityLabel: Swift.String?
  public var accessibilityValue: Swift.String?
  public var accessibilityHint: Swift.String?
  public var accessibilityTraits: UIKit.UIAccessibilityTraits
  public var accessibilityPath: UIKit.UIBezierPath?
  public var accessibilityLanguage: Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIRangeSliderContentView : SAPFiori.FUIFormCellContentView<SAPFiori.FUITextField, SAPFiori.FUIControlState, SAPFiori.FUIText>, SAPFiori.FUITitleComponent, SAPFiori.FUISubtitleComponent, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) final public let subtitle: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) public var validationMessage: Swift.String?
  @_Concurrency.MainActor(unsafe) public var validationView: SAPFiori.FUIInlineValidationView!
  @_Concurrency.MainActor(unsafe) public var minimumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maximumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var lowerValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var upperValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isRangeSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var interval: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isContinuous: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((_ lower: Swift.Double, _ upper: Swift.Double) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let upperTextField: SAPFiori.FUITextField
  @_Concurrency.MainActor(unsafe) final public let lowerTextField: SAPFiori.FUITextField
  @_Concurrency.MainActor(unsafe) public var slider: SAPFiori.FUIRangeSlider
  @_Concurrency.MainActor(unsafe) final public let sliderContainer: UIKit.UIView
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias SubtitleText = SAPFiori.FUIText
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
extension SAPFiori.FUIRangeSliderContentView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
extension SAPFiori.FUIRangeSliderContentView {
  @_Concurrency.MainActor(unsafe) public func getNSSTrackTintColor(_ view: UIKit.UIView) -> UIKit.UIColor?
}
@available(iOS 14, *)
@_Concurrency.MainActor(unsafe) open class FUISideBar<Data> : UIKit.UIView where Data : Swift.RandomAccessCollection, Data.Element : Swift.Hashable, Data.Element : Swift.Identifiable {
  @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var footer: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var selectionDidChange: ((Data.Element?) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(subtitle: Swift.String? = nil, footer: UIKit.UIView? = nil, data: Data, children: Swift.KeyPath<Data.Element, Data?>, rowContent: @escaping (Data.Element) -> UIKit.UIView, selectedItem: Data.Element? = nil, selectionDidChange: ((Data.Element?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class FUIMapLegendFillItem : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var fillColor: UIKit.UIColor! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var borderColor: UIKit.UIColor! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public protocol FUIFootnoteComponent : SAPFiori.FUIFootnoteBaseComponent where Self.FootnoteText : SAPFiori.FUIText {
  var footnote: SAPFiori.FUIText { get }
}
public protocol FUIFootnoteMultiLineComponent : SAPFiori.FUIFootnoteBaseComponent where Self.FootnoteText : SAPFiori.FUIMultiLineText {
  var footnote: SAPFiori.FUIMultiLineText { get }
}
public protocol FUIFootnoteBaseComponent : SAPFiori.FUIAttributesConsumer {
  associatedtype FootnoteText : SAPFiori.FUITextProtocol
  var footnote: Self.FootnoteText { get }
  var footnoteAttributedText: Foundation.NSAttributedString! { get set }
  var footnoteStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUIFootnoteBaseComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var footnoteStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension SAPFiori.FUIFootnoteBaseComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var footnoteAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
public enum FUIPropertyRef : Swift.String {
  case title
  case subtitle
  case trend
  case trendImage
  case status
  case substatus
  case footnote
  case body
  case icons
  case actionTitle
  case seriesTitles
  case values
  case valuesAxisTitle
  case secondaryValuesAxisTitle
  case categoryAxisTitle
  case emptyText
  case kpiText
  case placeholder
  case tags
  case rating
  case lowerBoundTitle
  case upperBoundTitle
  case valueText
  case kpiUnitItem
  case kpiMetricItem
  case kpiIconItem
  case kpiFractionItem
  case detailImage
  case headlineText
  case subheadlineText
  case footnoteText
  case descriptionText
  case statusText
  case substatusText
  case statusImage
  case substatusImage
  case weekNumberText
  case weekDayText
  case monthHeaderText
  case eventView
  case selectionRange
  case selectionSingle
  case headlineLabel
  case subheadlineLabel
  case bodyLabel
  case footnoteLabel
  case descriptionLabel
  case statusLabel
  case statusImageView
  case substatusLabel
  case substatusImageView
  case detailImageView
  case leadingImageView
  case trailingImageView
  case attributeLabel
  case subAttributeLabel
  case timestampLabel
  case secondaryTimestampLabel
  case secondaryTimestampImageView
  case nodeImageView
  case indicatorLine
  case titleLabel
  case `switch`
  case drawingPad
  case signatureDrawingPad
  case startAction
  case restartAction
  case cancelAction
  case clearAction
  case saveAction
  case watermarkText
  case labelItem
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIDetailImageViewComponent {
  public var detailImageView: SAPFiori.FUIImageView {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIActivationScreen : SAPFiori.FUIWelcomeController, UIKit.UITextFieldDelegate, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) public class func createInstanceFromStoryboard() -> SAPFiori.FUIActivationScreen
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var headlineLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var detailLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var primaryActionButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var subheadlineLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryActionButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var emailTextField: SAPFiori.FUIAutoResizingTextField {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIWelcomeControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension SAPFiori.FUIActivationScreen {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
@objc @_Concurrency.MainActor(unsafe) public class FUIBarcodeScanViewController : UIKit.UIViewController {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var closeButton: UIKit.UIBarButtonItem! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var barcodeScanner: SAPFiori.FUIBarcodeScanner! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIBarcodeScanViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) public var effectiveNavigationController: UIKit.UINavigationController? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onCloseBarcodeScanView: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var isAutoRestart: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var confirmationView: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public class func createInstanceFromStoryboard() -> SAPFiori.FUIBarcodeScanViewController
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func restartScan()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) public func didReceiveScanResult(scanResult: SAPFiori.FUIBarcodeScanResult?)
  @objc deinit
}
public protocol FUIBarcodeScanViewControllerDelegate : AnyObject {
  func barcodeScanViewController(_ barcodeScanViewController: SAPFiori.FUIBarcodeScanViewController, didReceiveScanResult scanResult: SAPFiori.FUIBarcodeScanResult?)
  func barcodeScanViewController(_ barcodeScanViewController: SAPFiori.FUIBarcodeScanViewController, didReceiveScanResult scanResult: SAPFiori.FUIBarcodeScanResult?, confirmationView: UIKit.UIView) -> Swift.Bool
}
extension SAPFiori.FUIBarcodeScanViewControllerDelegate {
  public func barcodeScanViewController(_ barcodeScanViewController: SAPFiori.FUIBarcodeScanViewController, didReceiveScanResult scanResult: SAPFiori.FUIBarcodeScanResult?, confirmationView: UIKit.UIView) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class FUICollectionViewTableViewCell : SAPFiori.NibDesignableFUIBaseTableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView! {
    get
  }
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIPrimaryActionComponent {
  public var primaryAction: SAPFiori.FUIButton {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUISecondaryActionComponent {
  public var secondaryAction: SAPFiori.FUIButton {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIOverflowActionComponent {
  public var overflowAction: SAPFiori.FUIButton {
    get
  }
}
public protocol FUITrendComponent : SAPFiori.FUIAttributesConsumer {
  var trend: SAPFiori.FUIText { get }
  var trendImage: UIKit.UIImage? { get set }
  var trendAttributedText: Foundation.NSAttributedString! { get set }
  var trendSemanticColor: UIKit.UIColor? { get set }
  var trendImageSize: CoreFoundation.CGSize? { get set }
  var trendStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var trendImageStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUITrendComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var trendStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var trendImageStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension SAPFiori.FUITrendComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var trendAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIChartCardCollectionViewCell : SAPFiori.FUIBaseDrawingCollectionViewCell<SAPFiori.FUIChartCardView>, SAPFiori.FUIAttributesConsumer {
  @_Concurrency.MainActor(unsafe) public var chartView: SAPFiori.FUIChartView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var chartCardView: SAPFiori.FUIChartCardView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FUIToastMessage {
  public class func show(message: Swift.String, icon: UIKit.UIImage? = FUIIconLibrary.system.success.withRenderingMode(.alwaysTemplate), inWindow window: UIKit.UIWindow? = nil, withDuration duration: Swift.Float = 1.0, maxNumberOfLines lines: Swift.Int = 1)
  public class func show(message: Swift.String, icon: UIKit.UIImage = FUIIconLibrary.system.success.withRenderingMode(.alwaysTemplate), inView view: UIKit.UIView, withDuration duration: Swift.Float = 1.0, maxNumberOfLines lines: Swift.Int = 1)
  @objc deinit
}
public typealias Drawing = SAPFiori.FUIBaseFixedMarginsView & SAPFiori.FUIBackgroundSchemeSupporting & SAPFiori.FUICalculateLayout & SAPFiori.FUIStyleByStringAttributes
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseDrawingView : SAPFiori.Drawing, SAPFiori.FUIAttributesConsumer, SAPFiori.FUIAttributedStringDrawing {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
  @_Concurrency.MainActor(unsafe) weak public var container: SAPFiori.InnerViewContainerProtocols?
  @_Concurrency.MainActor(unsafe) public func setNeedsCalculateLayout()
  @_Concurrency.MainActor(unsafe) public var needsCalculateLayout: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) public func styleSheetAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) weak public var attributesProvider: SAPFiori.FUIAttributesProvider?
  @_Concurrency.MainActor(unsafe) public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]]
  @_Concurrency.MainActor(unsafe) public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setNeedsRefreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) public var needsRefreshAttributedStrings: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var backingPropertyValueMap: [SAPFiori.FUIPropertyRef : Foundation.NSAttributedString?]
  @_Concurrency.MainActor(unsafe) open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isCompact: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutMarginsDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
}
public struct FUIPasscodePolicy {
  public static let passcodePolicyDefaultMinLength: Swift.Int
  public static let passcodePolicyDefaultHasDigit: Swift.Bool
  public static let passcodePolicyDefaultHasUpper: Swift.Bool
  public static let passcodePolicyDefaultHasLower: Swift.Bool
  public static let passcodePolicyDefaultHasSpecial: Swift.Bool
  public static let passcodePolicyDefaultMinUniqueChars: Swift.Int
  public static let passcodePolicyDefaultRetryLimit: Swift.Int
  public static let passcodePolicyDefaultAllowsTouchID: Swift.Bool
  public static let passcodePolicyDefaultIsDigitsOnly: Swift.Bool
  @available(*, unavailable, message: "`passcodePolicyMinCharGroups` property has been removed.")
  public static let passcodePolicyMinCharGroups: Swift.Int
  public static let passcodePolicyNoLimit: Swift.Int
  public var minLength: Swift.Int
  public var hasDigit: Swift.Bool
  public var hasUpper: Swift.Bool
  public var hasLower: Swift.Bool
  public var hasSpecial: Swift.Bool
  public var minUniqueChars: Swift.Int
  public var retryLimit: Swift.Int
  public var allowsTouchID: Swift.Bool
  public var isDigitsOnly: Swift.Bool
  public var isLocalizingDigitsToLatin: Swift.Bool
  public var lockTimeout: Swift.Int
  @available(*, unavailable, message: "`minCharGroups` property has been removed.")
  public var minCharGroups: Swift.Int
  public init()
  public mutating func addPasscodeRule(passcodeRule: SAPFiori.FUIPasscodeRule)
  public func validate(passcode: Swift.String) -> Swift.Bool
  public func numberOfRequiredGroups() -> Swift.Int
}
extension SAPFiori.FUIPasscodePolicy {
  public init?(hcpmsConfiguration param: Swift.Dictionary<Swift.String, Any>)
  public init?(hcpmsPasscodePolicyDictionary dict: Swift.Dictionary<Swift.String, Any>)
}
public struct FUIPasscodeRule {
  public init(displayName: Swift.String, isDisplayed: Swift.Bool, rule: @escaping (Swift.String) -> Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FUISingleActionAccessoryView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var progressView: SAPFiori.FUISingleActionProgressIndicator {
    get
  }
  @_Concurrency.MainActor(unsafe) public var button: SAPFiori.FUISingleActionButton {
    get
  }
  @_Concurrency.MainActor(unsafe) public var actionAccessoryType: SAPFiori.FUITableViewCellActionAccessoryType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIChartSummaryTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIChartSummaryView> {
  @_Concurrency.MainActor(unsafe) public var summaryView: SAPFiori.FUIChartSummaryView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@available(*, deprecated, renamed: "FUIHexColor", message: "Please use `FUIHexColor` instead")
public struct FUIPaletteHexColor {
  public let string: Swift.String
  public let alpha: CoreFoundation.CGFloat
  public init(string: Swift.String, alpha: CoreFoundation.CGFloat? = 1.0)
  public func color() -> UIKit.UIColor
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIOrderPickerCollectionViewCell : SAPFiori.FUIBaseDrawingCollectionViewCell<SAPFiori.FUIOrderPickerFormView>, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) override public class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIText? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectedIcon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isAtLeastOneSelected: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, message: "Please use isAtLeastOneSelected instead")
  @_Concurrency.MainActor(unsafe) public var atLeastOneSelected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((SAPFiori.FUISortCriterion.Change, [SAPFiori.FUISortCriterion]) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var value: [SAPFiori.FUISortCriterion] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension SAPFiori.FUIMapDetailPanel {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ButtonTableViewCell : UIKit.UITableViewCell {
    @objc @_Concurrency.MainActor(unsafe) final public let button: SAPFiori.FUIButton
    @_Concurrency.MainActor(unsafe) public var buttonHeadlineText: Swift.String? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) public var buttonSubheadlineText: Swift.String? {
      get
      set
    }
    @objc @_Concurrency.MainActor(unsafe) final public let descriptionLabel: SAPFiori.FUILabel
    @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
      get
    }
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @objc deinit
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  }
}
@available(*, unavailable, renamed: "FUIMapDetailPanel.ButtonTableViewCell")
public typealias FUIMapDetailButtonTableViewCell = SAPFiori.FUIMapDetailPanel.ButtonTableViewCell
public protocol FUIFormattedStringEditing : AnyObject {
  func attributedString(for string: Swift.String, withDefaultAttributes attrs: [Foundation.NSAttributedString.Key : Any]?, cursorPosition: Swift.Int) -> (formattedAttributedString: Foundation.NSAttributedString?, adjustedCursorPosition: Swift.Int)?
  func string(for string: Swift.String, cursorPosition: Swift.Int) -> (formattedString: Swift.String?, adjustedCursorPosition: Swift.Int)?
  func editingString(for obj: Any) -> Swift.String?
  func isPartialStringValid(_ partialString: Swift.String, newEditingString newString: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
}
@objc @_Concurrency.MainActor(unsafe) public class FUIInlineSignatureFormView : SAPFiori.FUIBaseDrawingView, SAPFiori.FUISignatureDrawingPadComponent, SAPFiori.FUITitleComponent, SAPFiori.FUIStartActionComponent, SAPFiori.FUIRestartActionComponent, SAPFiori.FUICancelActionComponent, SAPFiori.FUIClearActionComponent, SAPFiori.FUISaveActionComponent, SAPFiori.FUIWatermarkTextComponent {
  @_Concurrency.MainActor(unsafe) public var strokeWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var strokeColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var drawingAreaBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var xMarkColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public var signatureLineColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIText {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var startActionTitle: SAPFiori.FUIText {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var restartActionTitle: SAPFiori.FUIText {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cancelActionTitle: SAPFiori.FUIText {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var clearActionTitle: SAPFiori.FUIText {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var saveActionTitle: SAPFiori.FUIText {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hidesXMark: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hidesSignatureLine: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var addsTimestampInImage: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var timestampFormatter: Foundation.DateFormatter? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var watermarkText: SAPFiori.FUIText {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var watermarkTextAlignment: UIKit.NSTextAlignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var appliesTintColorToImage: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((UIKit.UIImage?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var signatureImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) override public func prepareForReuse()
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
public struct FUISegmentedControlButtonAttributes {
  public var titleAttributes: [Foundation.NSAttributedString.Key : Any]?
  public var borderColor: UIKit.UIColor?
  public init()
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIPlaceholderDetailImageViewComponent {
  public var detailImageView: SAPFiori.FUIPlaceholderImageView {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIFeedbackScreen : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static var regular: SAPFiori.FUIFeedbackScreen {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var sync: SAPFiori.FUIFeedbackScreen.SyncController {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var connectionError: SAPFiori.FUIFeedbackScreen.ConnectionErrorController {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var userTransactionError: SAPFiori.FUIFeedbackScreen.UserTransactionErrorController {
    get
  }
  @_Concurrency.MainActor(unsafe) open class func createInstanceFromStoryboard() -> SAPFiori.FUIFeedbackScreen
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var messageNameLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var messageDetailLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var messageEmphasisLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var messageFootnoteLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var messageActionButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var didTapActionButton: (() -> Swift.Void)?
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateViewConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol FUIUserConsentForm {
  var isRequired: Swift.Bool { get set }
  var isUserAccepted: Swift.Bool { get }
  var pages: [SAPFiori.FUIUserConsentPage] { get }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIHierarchyItemView : SAPFiori.FUIObjectViewBase, SAPFiori.FUIHierarchyItemComponent {
  @_Concurrency.MainActor(unsafe) final public let title: SAPFiori.FUIMultiLineText
  @_Concurrency.MainActor(unsafe) final public let subtitle: SAPFiori.FUIMultiLineText
  @_Concurrency.MainActor(unsafe) final public let footnote: SAPFiori.FUIMultiLineText
  @_Concurrency.MainActor(unsafe) final public let status: SAPFiori.FUIMultiLineText
  @_Concurrency.MainActor(unsafe) public var statusImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var iconImages: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias FootnoteText = SAPFiori.FUIMultiLineText
  public typealias StatusText = SAPFiori.FUIMultiLineText
  public typealias SubtitleText = SAPFiori.FUIMultiLineText
  public typealias TitleText = SAPFiori.FUIMultiLineText
  @objc deinit
}
public enum FUIBackgroundColorScheme : Swift.String, Swift.CaseIterable {
  case device
  case deviceInverse
  case lightConstant
  case darkConstant
  @available(*, deprecated, renamed: "lightConstant")
  public static let light: SAPFiori.FUIBackgroundColorScheme
  @available(*, deprecated, renamed: "darkConstant")
  public static let dark: SAPFiori.FUIBackgroundColorScheme
  @available(*, unavailable, renamed: "dark")
  public static let darkBackground: SAPFiori.FUIBackgroundColorScheme?
  @available(*, unavailable, renamed: "light")
  public static let lightBackground: SAPFiori.FUIBackgroundColorScheme?
  public func inverse() -> SAPFiori.FUIBackgroundColorScheme
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SAPFiori.FUIBackgroundColorScheme]
  public typealias RawValue = Swift.String
  public static var allCases: [SAPFiori.FUIBackgroundColorScheme] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension SAPFiori.FUIBackgroundColorScheme : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers open class FUIKPIMetricItem : SAPFiori.FUIKPIViewItem {
  convenience public init(string: Swift.String)
  convenience public init(attributedString: Foundation.NSAttributedString)
  public var attributedString: Foundation.NSAttributedString {
    get
  }
  public var attributes: [SAPFiori.NSAttributedStringKey : Any]
  open var style: SAPFiori.FUIKPIViewItemStyle {
    get
  }
  public var accessibilityLabel: Swift.String?
  public var accessibilityValue: Swift.String?
  public var accessibilityHint: Swift.String?
  public var accessibilityTraits: UIKit.UIAccessibilityTraits
  public var accessibilityPath: UIKit.UIBezierPath?
  public var accessibilityLanguage: Swift.String?
  @objc deinit
}
extension UIKit.UITextField : SAPFiori.Initializable {
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUITextFieldContentView : SAPFiori.FUIFormCellContentView<SAPFiori.FUITextField, SAPFiori.FUIControlState, SAPFiori.FUIText>, SAPFiori.FUITitleComponent, SAPFiori.FUIValueComponent, SAPFiori.FUIPlaceholderComponent, SAPFiori.FUISubtitleComponent, SAPFiori.FUIPropertyFormCell, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) public var validationMessage: Swift.String?
  @_Concurrency.MainActor(unsafe) public var validationView: SAPFiori.FUIInlineValidationView!
  @_Concurrency.MainActor(unsafe) open var keyName: Swift.String? {
    get
    set
  }
  @available(*, unavailable, message: "This property is no longer available.  Please set the `title.text` property.")
  @_Concurrency.MainActor(unsafe) public var keyLabel: UIKit.UILabel
  public typealias ValueType = Swift.String
  @_Concurrency.MainActor(unsafe) open var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valueTextField: SAPFiori.FUITextField {
    get
  }
  @_Concurrency.MainActor(unsafe) public var valueAttributedText: Foundation.NSAttributedString {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let placeholder: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) open var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((Swift.String) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var isTrackingLiveChanges: Swift.Bool
  @objc @available(*, deprecated, message: "This property is deprecated.  Please use `placeholder.text`.")
  @IBInspectable @_Concurrency.MainActor(unsafe) public var placeholderText: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var maxValueTextLength: Swift.Int
  @_Concurrency.MainActor(unsafe) open var formatter: SAPFiori.FUIFormattedStringEditing? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) final public let alternativeInputButton: SAPFiori.FUIButton
  @_Concurrency.MainActor(unsafe) open var isAlternativeInputEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var valueTextAlignment: UIKit.NSTextAlignment?
  @_Concurrency.MainActor(unsafe) final public let subtitle: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) open var isReadOnly: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hidesReadOnlyHint: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) open var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityCustomActions: [UIKit.UIAccessibilityCustomAction]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias SubtitleText = SAPFiori.FUIText
  public typealias TitleText = SAPFiori.FUIText
}
public protocol FUIAttributedStringDrawing : SAPFiori.FUIBackingPropertyValueMap {
  func setNeedsRefreshAttributedStrings()
  func refreshAttributedStrings()
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIMKMapFloorplanViewController : SAPFiori.FUIMapFloorplanViewController<SAPFiori.FUIMKMapFloorplanContentView, SAPFiori.MKEditingGeometryWrapper, SAPFiori.MKEditingTypes>, SAPFiori.EditingGeometryProducing {
  @_Concurrency.MainActor(unsafe) open var editingGeometry: MapKit.MKShape? {
    get
  }
  public typealias GeometryType = MapKit.MKShape
  @_Concurrency.MainActor(unsafe) public var mapView: SAPFiori.FUIMKMapView {
    get
  }
  @_Concurrency.MainActor(unsafe) weak open var dataSource: SAPFiori.FUIMKMapViewDataSource? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak open var delegate: SAPFiori.FUIMKMapViewDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isClusteringEnabled: Swift.Bool {
    get
    set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) override open func reloadData()
  @_Concurrency.MainActor(unsafe) open func setLayerHidden(_ layer: SAPFiori.FUIGeometryLayer, isHidden: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public var editingPanel: SAPFiori.FUIEditingPanel<MapKit.MKShape>
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setEditing(_ editing: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setState(_ state: SAPFiori.FUIMapFloorplan.State, for geometryIndexesInLayer: [SAPFiori.FUIGeometryLayer : [Swift.Int]])
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIKPIProgressCardCollectionViewCell : SAPFiori.FUIBaseDrawingCollectionViewCell<SAPFiori.FUIKPIProgressCardView> {
  @_Concurrency.MainActor(unsafe) public var progress: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol FUIActionTitleComponent : SAPFiori.FUIAttributesConsumer {
  var actionTitle: SAPFiori.FUIText { get }
  var actionTitleAttributedText: Foundation.NSAttributedString! { get set }
  var actionTitleStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUIActionTitleComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var actionTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension SAPFiori.FUIActionTitleComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var actionTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
public protocol FUIDocumentPickerAttachmentActionDelegate : AnyObject {
  var documentPicker: UIKit.UIDocumentPickerViewController { get }
  func documentPickerAttachmentAction(_ action: SAPFiori.FUIDocumentPickerAttachmentAction, didPickFileAt url: Foundation.URL)
}
@objc @_inheritsConvenienceInitializers open class FUIDocumentPickerAttachmentAction : ObjectiveC.NSObject, SAPFiori.FUIAttachmentAction {
  weak open var delegate: SAPFiori.FUIDocumentPickerAttachmentActionDelegate?
  final public let title: Swift.String
  @objc convenience override dynamic public init()
  public init(withTitle title: Swift.String? = nil)
  public func action(onController controller: SAPFiori.FUIAttachmentsViewController)
  open func isAvailable(_ alertAction: UIKit.UIAlertAction) -> Swift.Bool
  @objc deinit
}
extension SAPFiori.FUIDocumentPickerAttachmentAction : UIKit.UIDocumentPickerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentPickerWasCancelled(_ controller: UIKit.UIDocumentPickerViewController)
}
public enum FUIDataItemType {
  case text
  case image
  public static func == (a: SAPFiori.FUIDataItemType, b: SAPFiori.FUIDataItemType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol FUITableItem {
  var type: SAPFiori.FUIDataItemType { get }
}
public enum ObjectViewProperty {
  public enum Text {
    case headline
    case subheadline
    case footnote
    case status
    case substatus
    public static func == (a: SAPFiori.ObjectViewProperty.Text, b: SAPFiori.ObjectViewProperty.Text) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Image {
    case detailImage
    case statusImage
    case substatusImage
    public static func == (a: SAPFiori.ObjectViewProperty.Image, b: SAPFiori.ObjectViewProperty.Image) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIObjectComponent {
  public var detailImage: UIKit.UIImage? {
    get
    set
  }
  public var headlineText: Swift.String? {
    get
    set
  }
  public var subheadlineText: Swift.String? {
    get
    set
  }
  public var footnoteText: Swift.String? {
    get
    set
  }
  public var descriptionText: Swift.String? {
    get
    set
  }
  public var statusText: Swift.String? {
    get
    set
  }
  public var substatusText: Swift.String? {
    get
    set
  }
  public var statusImage: UIKit.UIImage? {
    get
    set
  }
  public var substatusImage: UIKit.UIImage? {
    get
    set
  }
}
extension SAPFiori.FUIMapToolbar {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class UserLocationButton : SAPFiori.FUIMapToolbarButton, UIKit.UIGestureRecognizerDelegate {
    @_Concurrency.MainActor(unsafe) weak public var mapView: MapKit.MKMapView? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
    @_Concurrency.MainActor(unsafe) override public init(type: SAPFiori.FUIMapToolbarButtonType)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) convenience public init(mapView: MapKit.MKMapView, region: MapKit.MKCoordinateRegion? = nil)
    @available(*, unavailable, message: "Use the new initializer with MKMapView type")
    @_Concurrency.MainActor(unsafe) convenience public init(mapView: UIKit.UIView, region: MapKit.MKCoordinateRegion? = nil)
    @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
    @objc deinit
  }
}
@available(*, unavailable, renamed: "FUIMapToolbar.UserLocationButton")
public typealias FUIMapToolbarUserLocationButton = SAPFiori.FUIMapToolbar.UserLocationButton
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIGridTableViewSummaryFooter : SAPFiori.FUIGridTableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 11.0, *)
@_Concurrency.MainActor(unsafe) open class FUIProfileMarkerAnnotationView : MapKit.MKMarkerAnnotationView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var glyphText: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var glyphImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var selectedGlyphImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(annotation: MapKit.MKAnnotation?, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public var isMomentarySelection: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var borders: UIKit.UIRectEdge {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var borderColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var borderWeights: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var topBorderWeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leftBorderWeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var bottomBorderWeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var rightBorderWeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var topBorder: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var leftBorder: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var bottomBorder: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var rightBorder: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIInlineValidationDrawingCollectionViewCell<InnerView> : SAPFiori.FUIBaseDrawingCollectionViewCell<InnerView>, SAPFiori.FUIInlineValidation where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  @_Concurrency.MainActor(unsafe) open var validationView: SAPFiori.FUIInlineValidationView!
  @_Concurrency.MainActor(unsafe) open var validationMessage: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var inlineValidationViewHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIHierarchyItemTableViewCell : SAPFiori.FUIObjectBaseTableViewCell<SAPFiori.FUIHierarchyItemView> {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public let hierarchyIndicator: SAPFiori.FUIHierarchyIndicator
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var directionalLayoutMargins: UIKit.NSDirectionalEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willTransition(to state: SAPFiori.UITableViewCellStateMask)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIRatingControlFormCell : SAPFiori.FUIInlineValidationDrawingTableViewCell<SAPFiori.FUIRatingControlContentView> {
  @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var ratingControl: SAPFiori.FUIRatingControl {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var value: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.Int) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var truncatesKeyLabel: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public enum FUIColorVariant {
  case light
  case dark
  case elevatedLight
  case elevatedDark
  case contrastLight
  case contrastDark
  case elevatedContrastLight
  case elevatedContrastDark
  public static func == (a: SAPFiori.FUIColorVariant, b: SAPFiori.FUIColorVariant) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SAPFiori.FUIColorVariant : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public protocol FUIChartSummaryDataSource : AnyObject {
  func chartSummaryView(_ chartSummaryView: SAPFiori.FUIChartSummaryView, summaryItemForCategory categoryIndex: Swift.Int) -> SAPFiori.FUIChartSummaryItem?
  func chartSummaryView(_ chartSummaryView: SAPFiori.FUIChartSummaryView, summaryItemForCategoryRange categoryRange: Swift.ClosedRange<Swift.Int>) -> SAPFiori.FUIChartRangeSummaryItem?
  @available(*, deprecated, renamed: "chartSummaryView(_:summaryItemForCategory:)")
  func chartView(_ chartView: SAPFiori.FUIChartView, summaryItemForCategory categoryIndex: Swift.Int) -> SAPFiori.FUIChartSummaryItem?
  @available(*, deprecated, renamed: "chartSummaryView(_:summaryItemForCategoryRange:)")
  func chartView(_ chartView: SAPFiori.FUIChartView, summaryItemForCategoryRange categoryRange: Swift.ClosedRange<Swift.Int>) -> SAPFiori.FUIChartRangeSummaryItem?
}
extension SAPFiori.FUIChartSummaryDataSource {
  public func chartSummaryView(_ chartSummaryView: SAPFiori.FUIChartSummaryView, summaryItemForCategory categoryIndex: Swift.Int) -> SAPFiori.FUIChartSummaryItem?
  public func chartSummaryView(_ chartSummaryView: SAPFiori.FUIChartSummaryView, summaryItemForCategoryRange categoryRange: Swift.ClosedRange<Swift.Int>) -> SAPFiori.FUIChartRangeSummaryItem?
  public func chartView(_ chartView: SAPFiori.FUIChartView, summaryItemForCategory categoryIndex: Swift.Int) -> SAPFiori.FUIChartSummaryItem?
  public func chartView(_ chartView: SAPFiori.FUIChartView, summaryItemForCategoryRange categoryRange: Swift.ClosedRange<Swift.Int>) -> SAPFiori.FUIChartRangeSummaryItem?
}
public protocol FUIChartSummaryDelegate : AnyObject {
  func chartView(_ chartView: SAPFiori.FUIChartView, didSelectCategorySummaryItem summaryItem: SAPFiori.FUIChartSummaryItem)
}
@objc @_Concurrency.MainActor(unsafe) open class FUIChartSummaryView : SAPFiori.FUIDrawingView {
  @_Concurrency.MainActor(unsafe) weak public var chartView: SAPFiori.FUIChartView? {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var dataSource: SAPFiori.FUIChartSummaryDataSource? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIChartSummaryDelegate?
  @_Concurrency.MainActor(unsafe) public var seriesTitleText: [SAPFiori.FUIText]
  @_Concurrency.MainActor(unsafe) public func reloadData()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) convenience public init(chartView: SAPFiori.FUIChartView)
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public var items: [SAPFiori.FUIChartSummaryItemType] {
    get
    set
  }
  @available(*, unavailable, message: "API is renamed to: `addItem(at categoryIndex: Int)`, and behavior modified.  Item category indexes set here will ONLY be used, if `chartView == nil`.\n\nThe `FUIChartSummaryDataSource` implementation has been updated, to invoke `chartView(: summaryItemForCategory:)` for `categoryIndex = -1`.  As a result, you can use the `dataSource` to supply the implementation of all `FUIChartSummaryItem` instances.\n\nThis API should only be used, if using view stand-alone, without an associated `chartView`.")
  @_Concurrency.MainActor(unsafe) public func addItem(_ item: SAPFiori.FUIChartSummaryItemType)
  @available(*, unavailable, renamed: "removeItem(at:)")
  @_Concurrency.MainActor(unsafe) public func removeItem(atCategoryIndex categoryIndex: Swift.Int)
  @available(*, unavailable, renamed: "removeDataCategoryItems()")
  @_Concurrency.MainActor(unsafe) public func removeVariableItems()
  @_Concurrency.MainActor(unsafe) public func addItem(at categoryIndex: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func removeItem(at categoryIndex: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func removeDataCategoryItems()
  @_Concurrency.MainActor(unsafe) public func removeAll()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
}
public protocol FUITextProtocol : SAPFiori.FUIAccessibilityElement {
  var text: Swift.String? { get set }
  var textColor: UIKit.UIColor? { get set }
  var font: UIKit.UIFont? { get set }
  func attributes() -> [Foundation.NSAttributedString.Key : Any]
}
public class FUIMultiLineText : SAPFiori.FUIText {
  public init(_ value: Swift.String, font: UIKit.UIFont? = nil, textColor: UIKit.UIColor? = nil, numberOfLines: Swift.Int = -1)
  required public init()
  required public init(stringLiteral value: Swift.String)
  public var numberOfLines: Swift.Int {
    get
    set
  }
  override public func attributes() -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
}
public class FUIText : SAPFiori.FUITextProtocol, Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  required public init(stringLiteral value: Swift.String)
  public init(_ value: Swift.String)
  public init(_ value: Swift.String, font: UIKit.UIFont? = nil, textColor: UIKit.UIColor? = nil)
  required public init()
  public var text: Swift.String? {
    get
    set
  }
  public var textColor: UIKit.UIColor? {
    get
    set
  }
  public var font: UIKit.UIFont? {
    get
    set
  }
  public var isDirtyHandler: (() -> Swift.Void)?
  public func attributes() -> [SAPFiori.NSAttributedStringKey : Any]
  public var accessibilityLabel: Swift.String?
  public var accessibilityValue: Swift.String?
  public var accessibilityHint: Swift.String?
  public var accessibilityTraits: UIKit.UIAccessibilityTraits
  public var accessibilityPath: UIKit.UIBezierPath?
  public var accessibilityLanguage: Swift.String?
  public typealias ExtendedGraphemeClusterLiteralType = SAPFiori.FUIText.StringLiteralType
  public typealias UnicodeScalarLiteralType = SAPFiori.FUIText.StringLiteralType
  @objc deinit
}
public protocol FUIAccessibilityElement {
  var accessibilityLabel: Swift.String? { get set }
  var accessibilityValue: Swift.String? { get set }
  var accessibilityHint: Swift.String? { get set }
  var accessibilityTraits: UIKit.UIAccessibilityTraits { get set }
  var accessibilityPath: UIKit.UIBezierPath? { get set }
  var accessibilityLanguage: Swift.String? { get set }
}
public protocol FUIBarcodeScanner {
  var scanMode: SAPFiori.FUIBarcodeScanMode? { get set }
  var promptMessage: Swift.String { get set }
  var indicatorBorderColor: CoreGraphics.CGColor { get set }
  var indicatorBorderWidth: CoreFoundation.CGFloat { get set }
  var scanResultTransformer: ((Swift.String) -> Swift.String)? { get set }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIBaseDrawingCalendarItemCollectionViewCell<InnerView> : SAPFiori.FUIBaseCalendarItemCollectionViewCell, SAPFiori.FUIStyleByStringAttributes, SAPFiori.InnerViewContainer where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var _innerView: InnerView! {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutMarginsDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class FUIDurationPickerFormCell : SAPFiori.FUIInlineValidationTableViewCell, SAPFiori.FUIPropertyFormCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @available(*, unavailable, message: "use valueLabel")
  @_Concurrency.MainActor(unsafe) weak public var valueTextField: UIKit.UITextField! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var valueLabel: UIKit.UILabel! {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var durationPicker: UIKit.UIPickerView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  public typealias ValueType = Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) public var allowsZeroDuration: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var value: Foundation.TimeInterval {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.Double) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var minuteInterval: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isTrackingLiveChanges: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var durationTextFormat: Swift.String! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override open func applyTintColor(forState state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func index(ofAccessibilityElement element: Any) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
extension SAPFiori.FUIDurationPickerFormCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
}
extension SAPFiori.FUIDurationPickerFormCell : UIKit.UIPickerViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
}
extension SAPFiori.FUIDurationPickerFormCell : UIKit.UIPickerViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, viewForRow row: Swift.Int, forComponent component: Swift.Int, reusing view: UIKit.UIView?) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
}
public protocol FUITintAttributesProvider : SAPFiori.FUIStyleByTintAttributes {
  func tintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: Self.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef, state: Self.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
}
public protocol FUIInitCoordinate {
  init(_ coordinate: CoreLocation.CLLocationCoordinate2D)
}
public protocol FUIInitCoordinates {
  init(_ coordinates: [CoreLocation.CLLocationCoordinate2D])
  init(_ coordinates: [CoreLocation.CLLocationCoordinate2D], selectedIndex: Swift.Int)
}
extension UIKit.UITableView : SAPFiori.InnerViewContainerDimensions {
  @_Concurrency.MainActor(unsafe) public var maxDimensions: CoreFoundation.CGSize? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var minDimensions: CoreFoundation.CGSize? {
    get
  }
}
extension SAPFiori.FUIFeedbackScreen {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SyncController : SAPFiori.FUIFeedbackScreen.BaseController {
    @_Concurrency.MainActor(unsafe) final public let progressBar: UIKit.UIProgressView
    @_Concurrency.MainActor(unsafe) final public let cancelButton: SAPFiori.FUIBarButtonItem
    @_Concurrency.MainActor(unsafe) public var onCancelHandler: ((UIKit.UIViewController) -> Swift.Void)?
    @_Concurrency.MainActor(unsafe) public var hidesCancelButton: Swift.Bool
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIDataTableCardCollectionViewCell : SAPFiori.FUIBaseDrawingCollectionViewCell<SAPFiori.FUIDataTableCardView> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIPlaceholderView : SAPFiori.FUIDrawingView, SAPFiori.FUIPlaceholderComponent {
  @_Concurrency.MainActor(unsafe) public var placeholder: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "No longer supported. Please use UINavigationController.")
@_Concurrency.MainActor(unsafe) open class FUINavigationController : UIKit.UINavigationController {
  @available(iOS 5.0, *)
  @available(*, deprecated)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol FUIKPIComponent : SAPFiori.FUIKPIAttributesConsumer {
  var kpiItems: [SAPFiori.FUIKPIViewItem] { get set }
  var kpiAttributedText: Foundation.NSAttributedString! { get set }
  var kpiUnitItemStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var kpiMetricItemStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var kpiIconItemStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var kpiFractionItemStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUIKPIComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var kpiUnitItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiMetricItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiIconItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiFractionItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension SAPFiori.FUIKPIComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var kpiAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIKPITitleBaseView : SAPFiori.FUITitleBaseView, SAPFiori.FUIKPIComponent, SAPFiori.FUIKPIAttributesProvider {
  @_Concurrency.MainActor(unsafe) public var kpiItems: [SAPFiori.FUIKPIViewItem] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var kpiAttributesProvider: SAPFiori.FUIKPIAttributesProvider?
  @_Concurrency.MainActor(unsafe) public func defaultAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) public func kpiParagraphStyle() -> UIKit.NSParagraphStyle
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@available(iOS 14.0, *)
public protocol FUIAddPhotoLibraryItemsAttachmentActionDelegate : AnyObject {
  func addPhotoLibraryItemAttachmentAction(_ action: SAPFiori.FUIAddPhotoLibraryItemsAttachmentAction, didFinishPicking results: [PhotosUI.PHPickerResult])
}
@available(iOS 14.0, *)
open class FUIAddPhotoLibraryItemsAttachmentAction : SAPFiori.FUIAttachmentAction {
  final public let title: Swift.String
  weak open var delegate: SAPFiori.FUIAddPhotoLibraryItemsAttachmentActionDelegate?
  @available(*, deprecated, message: "Use `phPickerConfiguration` property instead")
  open var mediaTypes: [Swift.String]?
  open var phPickerConfiguration: PhotosUI.PHPickerConfiguration
  convenience public init()
  public init(withTitle title: Swift.String? = nil)
  open func action(onController controller: SAPFiori.FUIAttachmentsViewController)
  open func isAvailable(_ alertAction: UIKit.UIAlertAction) -> Swift.Bool
  @objc deinit
}
@available(iOS 14, macCatalyst 14, *)
extension SAPFiori.FUIAddPhotoLibraryItemsAttachmentAction : PhotosUI.PHPickerViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
}
public protocol FUIPolygon : SAPFiori.FUIGeometry {
}
extension MapKit.MKPolygon : SAPFiori.FUIPolygon {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FUIAutoResizingTextField : SAPFiori.FUITextField {
  @_Concurrency.MainActor(unsafe) public var defaultMinimumWidth: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
public protocol FUIPasscodeControllerDelegate : AnyObject {
  func shouldTryPasscode(_ passcode: Swift.String, forInputMode inputMode: SAPFiori.FUIPasscodeInputMode, fromController passcodeController: SAPFiori.FUIPasscodeController) throws
  func didCancelPasscodeEntry(fromController passcodeController: SAPFiori.FUIPasscodeController)
  func shouldResetPasscode(fromController passcodeController: SAPFiori.FUIPasscodeController)
  func didSetBiometricIDOption(to enabled: Swift.Bool, fromController passcodeController: SAPFiori.FUIPasscodeController)
  func passcodePolicy() -> SAPFiori.FUIPasscodePolicy
  func addNewUser(_ passcodeController: SAPFiori.FUIPasscodeController)
  func switchUser(_ newUserId: Swift.String, passcodeController: SAPFiori.FUIPasscodeController)
}
extension SAPFiori.FUIPasscodeControllerDelegate {
  public func didCancelPasscodeEntry(fromController passcodeController: SAPFiori.FUIPasscodeController)
  public func addNewUser(_ passcodeController: SAPFiori.FUIPasscodeController)
  public func switchUser(_ newUserIdentifier: Swift.String, passcodeController: SAPFiori.FUIPasscodeController)
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIStyleByTintAttributes, Self.InnerView.TintState == SAPFiori.FUICalendarItemState {
  public var tintState: SAPFiori.FUICalendarItemState {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIStyleByTintAttributes, Self.InnerView.TintState == SAPFiori.FUIControlState {
  public var tintState: SAPFiori.FUIControlState {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIStyleByTintAttributes, Self.InnerView.TintState == SAPFiori.FUISwitchControlState {
  public var tintState: SAPFiori.FUISwitchControlState {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIStyleByTintAttributes {
  public func addTintAttributes(_ attributes: [SAPFiori.NSAttributedStringKey : Any], for property: SAPFiori.FUIPropertyRef, state: Self.InnerView.TintState)
  public func setTintAttributes(_ attributes: [Foundation.NSAttributedString.Key : Any], for property: SAPFiori.FUIPropertyRef, state: Self.InnerView.TintState)
}
public class FUIFilterItem : Swift.Equatable {
  public var title: Swift.String
  public var isFavorite: Swift.Bool
  public var isActive: Swift.Bool
  public var key: Swift.String?
  public init(_ title: Swift.String)
  convenience public init(_ title: Swift.String, isFavorite: Swift.Bool, isActive: Swift.Bool)
  public static func == (lhs: SAPFiori.FUIFilterItem, rhs: SAPFiori.FUIFilterItem) -> Swift.Bool
  @objc deinit
}
public protocol FUIFilterResultsUpdating : AnyObject {
  func updateFilterResults(for filterFeedbackControl: SAPFiori.FUIFilterFeedbackControl)
}
open class FUIFilterGroup {
  public init()
  public var items: [SAPFiori.FUIFilterItem]
  public var isMutuallyExclusive: Swift.Bool
  public var allowsEmptySelection: Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIFilterFeedbackControl : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var filterGroups: [SAPFiori.FUIFilterGroup] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var filterResultsUpdater: SAPFiori.FUIFilterResultsUpdating?
  @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var borders: UIKit.UIRectEdge
  @_Concurrency.MainActor(unsafe) public var filterItems: [SAPFiori.FUIFilterItem] {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public func setContentOffset(_ contentOffset: CoreFoundation.CGPoint, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setButtonAttributes(_ buttonAttributes: SAPFiori.FUISegmentedControlButtonAttributes, for state: SAPFiori.FUIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIItemCollectionViewCell : SAPFiori.FUIBaseItemCollectionViewCell<SAPFiori.FUICollectionItemView>, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) public var isPreservingImageSpacing: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isContentCopyable: Swift.Bool {
    get
    set
  }
  @objc @available(*, deprecated, renamed: "detailImageView")
  @IBInspectable @_Concurrency.MainActor(unsafe) public var contentImageView: SAPFiori.FUIImageView {
    @objc get
  }
  @available(*, deprecated, renamed: "title")
  @_Concurrency.MainActor(unsafe) public var titleLabel: SAPFiori.FUIText {
    get
  }
  @objc @available(*, deprecated, renamed: "detailImageView")
  @IBInspectable @_Concurrency.MainActor(unsafe) public var contentImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "title")
  @IBInspectable @_Concurrency.MainActor(unsafe) public var titleText: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var primaryAction: SAPFiori.FUIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) public var secondaryAction: SAPFiori.FUIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) public var actionLayout: SAPFiori.FUIControlLayout {
    get
    set
  }
  @available(*, unavailable, message: "No longer supported")
  @_Concurrency.MainActor(unsafe) open var accessoryType: SAPFiori.UITableViewCellAccessoryType
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@available(*, deprecated, renamed: "FUIItemCollectionViewCell")
public typealias FUISimpleCollectionViewCell = SAPFiori.FUIItemCollectionViewCell
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class FUILabelProxy : SAPFiori.FUILabel {
  @_Concurrency.MainActor(unsafe) @objc override final public var attributedText: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIObjectCard : SAPFiori.FUIBaseAccessoryDrawingCollectionViewCell<SAPFiori.FUIObjectCardContentView> {
  @_Concurrency.MainActor(unsafe) public var iconsColumnWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var trailingProperties: [SAPFiori.FUIObjectCardContentView.OrderedPropertyRef] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var rating: Swift.Int? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfTagLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var actionAccessoryView: SAPFiori.FUISingleActionAccessoryView? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var actionAccessoryType: SAPFiori.FUITableViewCellActionAccessoryType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol FUIInlineValidation {
  var validationMessage: Swift.String? { get set }
  var validationView: SAPFiori.FUIInlineValidationView! { get }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIInlineValidationView : SAPFiori.NibDesignable {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var backgroundView: UIKit.UIView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var separator: UIKit.UIView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var titleLabel: SAPFiori.FUILabel! {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUITitleMultiLineComponent {
  public var title: SAPFiori.FUIMultiLineText {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUITitleComponent {
  public var title: SAPFiori.FUIText {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUITitleBaseComponent {
  public var titleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var titleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public protocol FUIMapView {
}
public struct FUIMapFloorplan {
  public enum State {
    case `default`, selected, unselected, disabled
    public static func == (a: SAPFiori.FUIMapFloorplan.State, b: SAPFiori.FUIMapFloorplan.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension MapKit.MKMapView : SAPFiori.FUIMapView {
}
public protocol FUIInfoViewControllerDelegate : AnyObject {
  func primaryButtonTouched(on viewController: SAPFiori.FUIInfoViewController)
  func secondaryButtonTouched(on viewController: SAPFiori.FUIInfoViewController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIInfoViewController : UIKit.UIViewController, AuthenticationServices.ASWebAuthenticationPresentationContextProviding {
  @_Concurrency.MainActor(unsafe) weak open var delegate: SAPFiori.FUIInfoViewControllerDelegate!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var loadingIndicatorView: SAPFiori.FUILoadingIndicatorView!
  @_Concurrency.MainActor(unsafe) public var showsLoadingIndicatorText: Swift.Bool
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var informationTextView: UIKit.UITextView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var titleTextView: UIKit.UITextView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var primaryButton: SAPFiori.FUIOnboardingButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var secondaryButton: SAPFiori.FUIOnboardingButton!
  @_Concurrency.MainActor(unsafe) public class func createInstanceFromStoryboard() -> SAPFiori.FUIInfoViewController
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func presentationAnchor(for session: AuthenticationServices.ASWebAuthenticationSession) -> AuthenticationServices.ASPresentationAnchor
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum FUIStyleType {
  case text([SAPFiori.FioriStyle])
  case image([SAPFiori.FioriStyle])
  case `switch`([SAPFiori.FioriStyle])
  case drawingPad([SAPFiori.FioriStyle])
  case signatureDrawingPad([SAPFiori.FioriStyle])
}
public enum FUIStyleClassSource : Swift.Int {
  case sdk
  case developer
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct FioriStyle : Swift.Hashable {
  public init(styleClass: Swift.String)
  public var styleClass: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
}
extension SAPFiori.FioriStyle : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: SAPFiori.FioriStyle.RawValue)
  public var rawValue: SAPFiori.FioriStyle.RawValue {
    get
  }
}
public enum FDLFontStyle {
  public static let headline: SAPFiori.FioriStyle
  public static let subheadline: SAPFiori.FioriStyle
  public static let footnote: SAPFiori.FioriStyle
  public static let body: SAPFiori.FioriStyle
  public static let callout: SAPFiori.FioriStyle
  public static let caption1: SAPFiori.FioriStyle
  public static let caption2: SAPFiori.FioriStyle
  public static let title1: SAPFiori.FioriStyle
  public static let title2: SAPFiori.FioriStyle
  public static let title3: SAPFiori.FioriStyle
  public static let kpiNumber: SAPFiori.FioriStyle
  public static let kpiNumber2: SAPFiori.FioriStyle
}
public enum FDLStyle {
  public static let barButtonItem: SAPFiori.FioriStyle
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIKeyValueFormCell : SAPFiori.FUINoteFormCell {
  @_Concurrency.MainActor(unsafe) public var keyText: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
extension SAPFiori.FUIKeyValueFormCell : SAPFiori.FUIPropertyFormCell {
  @_Concurrency.MainActor(unsafe) open var keyName: Swift.String? {
    get
    set
  }
}
@objc @_Concurrency.MainActor(unsafe) open class FUIMapToolbar : UIKit.UIView, SAPFiori.FUIBackgroundSchemeSupporting {
  @_Concurrency.MainActor(unsafe) public var items: [SAPFiori.FUIMapToolbarButton] {
    get
    set
  }
  @available(*, deprecated, message: "Will be unavailble in newer SDK version.")
  @_Concurrency.MainActor(unsafe) public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(mapView pinnedView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIHierarchyViewController : UIKit.UIViewController, SAPFiori.FUIHierarchyViewDataSource, SAPFiori.FUIHierarchyViewDelegate {
  @_Concurrency.MainActor(unsafe) final public let hierarchyView: SAPFiori.FUIHierarchyView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) open func rootUUID(in hierarchyView: SAPFiori.FUIHierarchyView) -> Swift.String?
  @_Concurrency.MainActor(unsafe) open func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, numberOfChildrenForItemWith uuid: Swift.String) -> Swift.Int
  @_Concurrency.MainActor(unsafe) open func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, uuidForChildItemAt index: Swift.Int, with parentUUID: Swift.String) -> Swift.String
  @_Concurrency.MainActor(unsafe) open func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, cellForItemWith uuid: Swift.String) -> SAPFiori.FUIHierarchyCollectionItem
  @_Concurrency.MainActor(unsafe) open func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, prefetchDataForItemsWith uuids: [Swift.String])
  @_Concurrency.MainActor(unsafe) open func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, parentForItemWith uuid: Swift.String) -> Swift.String?
  @_Concurrency.MainActor(unsafe) open func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, titleForItemWith uuid: Swift.String) -> Swift.String?
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIPlaceholderComponent {
  public var placeholder: SAPFiori.FUIText {
    get
  }
  public var placeholderAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var placeholderStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var placeholderNuiClass: Swift.String? {
    get
    set
  }
}
public struct FUIBarcodeScanResult {
  public let scanResultString: Swift.String
  public let type: AVFoundation.AVMetadataObject.ObjectType
}
@_hasMissingDesignatedInitializers open class FUIControlStateTintAttributesProvider : SAPFiori.FUITintAttributesProvider {
  public typealias TintState = SAPFiori.FUIControlState
  open var tintAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIControlState : [SAPFiori.NSAttributedStringKey : Any]]]
  open var tintState: SAPFiori.FUIControlState
  public func tintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  public func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIControlStateTintAttributesProvider.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIControlStateTintAttributesProvider.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
}
public typealias NSAttributedStringKey = Foundation.NSAttributedString.Key
public typealias UICollectionViewScrollDirection = UIKit.UICollectionView.ScrollDirection
public typealias UICollectionViewScrollPosition = UIKit.UICollectionView.ScrollPosition
public typealias UIControlContentHorizontalAlignment = UIKit.UIControl.ContentHorizontalAlignment
public typealias UIControlContentVerticalAlignment = UIKit.UIControl.ContentVerticalAlignment
public typealias UIControlEvents = UIKit.UIControl.Event
public typealias UIControlState = UIKit.UIControl.State
public typealias UIFontTextStyle = UIKit.UIFont.TextStyle
public typealias UIGestureRecognizerState = UIKit.UIGestureRecognizer.State
public typealias UITableViewCellAccessoryType = UIKit.UITableViewCell.AccessoryType
public typealias UITableViewCellSelectionStyle = UIKit.UITableViewCell.SelectionStyle
public typealias UITableViewCellSeparatorStyle = UIKit.UITableViewCell.SeparatorStyle
public typealias UITableViewCellStateMask = UIKit.UITableViewCell.StateMask
public typealias UITableViewCellStyle = UIKit.UITableViewCell.CellStyle
public typealias UITableViewStyle = UIKit.UITableView.Style
public typealias UITextBorderStyle = UIKit.UITextField.BorderStyle
public typealias UIViewContentMode = UIKit.UIView.ContentMode
public typealias UIViewTintAdjustmentMode = UIKit.UIView.TintAdjustmentMode
public enum FUIChartAxisId {
  case x
  case y
  case radius
  case dual
  case category
  public static func == (a: SAPFiori.FUIChartAxisId, b: SAPFiori.FUIChartAxisId) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class FUIChartAxis {
  public var labels: SAPFiori.FUIChartLabelAttributes {
    get
  }
  public var gridlines: SAPFiori.FUIChartLineAttributes {
    get
  }
  public var baseline: SAPFiori.FUIChartLineAttributes {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FUIChartNumericAxis : SAPFiori.FUIChartAxis {
  public var isZeroBased: Swift.Bool {
    get
    set
  }
  public var formatter: Foundation.NumberFormatter {
    get
    set
  }
  public var abbreviatedFormatter: Foundation.NumberFormatter {
    get
    set
  }
  public var abbreviatesLabels: Swift.Bool
  public var isMagnitudedDisplayed: Swift.Bool {
    get
    set
  }
  public var explicitMin: Swift.Double? {
    get
    set
  }
  public var explicitMax: Swift.Double? {
    get
    set
  }
  @objc deinit
}
public enum FUIChartCategoryAxisLabelLayoutStyle {
  case allOrNothing
  case range
  public static func == (a: SAPFiori.FUIChartCategoryAxisLabelLayoutStyle, b: SAPFiori.FUIChartCategoryAxisLabelLayoutStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class FUIChartCategoryAxis : SAPFiori.FUIChartNumericAxis {
  public var labelLayoutStyle: SAPFiori.FUIChartCategoryAxisLabelLayoutStyle {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIObjectCardView : SAPFiori.FUICardBaseContainer<SAPFiori.FUIBaseDrawingView, SAPFiori.FUIObjectCardContentView>, SAPFiori.FUIObjectCardViewComponent {
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias FootnoteText = SAPFiori.FUIMultiLineText
  public typealias StatusText = SAPFiori.FUIText
  public typealias SubtitleText = SAPFiori.FUIMultiLineText
  public typealias Text = SAPFiori.FUIMultiLineText
  public typealias TitleText = SAPFiori.FUIMultiLineText
  @objc deinit
}
extension SAPFiori.FUIObjectCardView {
  @_Concurrency.MainActor(unsafe) public var body: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var overflowAction: SAPFiori.FUIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var footnote: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var status: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var iconImages: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailImageView: SAPFiori.FUIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var tags: [SAPFiori.FUITag] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfTagLines: Swift.Int {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIUserConsentPageView : SAPFiori.FUIDrawingView, SAPFiori.FUIUserConsentPageComponent {
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var body: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var actionTitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var actionHandler: ((SAPFiori.FUIUserConsentPageViewController) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var bodyDataDetectorTypes: UIKit.UIDataDetectorTypes {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var bodyAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @objc @_Concurrency.MainActor(unsafe) open func actionButtonClicked()
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias Text = SAPFiori.FUIMultiLineText
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
public protocol FUILeadingImageViewComponent : SAPFiori.FUIAttributesConsumer {
  var leadingImageView: SAPFiori.FUIImageView { get }
}
extension SAPFiori.FUILeadingImageViewComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var leadingImageViewStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@objc @_Concurrency.MainActor(unsafe) open class FUIDimensionSelector : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var titles: [Swift.String]! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contentInset: UIKit.NSDirectionalEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectionDidChangeHandler: ((Swift.Int?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var selectedIndex: Swift.Int? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleInsets: UIKit.NSDirectionalEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var interItemSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEnable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var segmentWidthMode: SAPFiori.FUIDimensionSelector.FUISegmentWidthMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowEmptySelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(titles: [Swift.String], selectedIndex: Swift.Int? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open var numberOfSegments: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) open func titleForSegment(at index: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) open func setTitle(_ withTitle: Swift.String, forSegementAt index: Swift.Int)
  @_Concurrency.MainActor(unsafe) open func insertSegment(_ withTitle: Swift.String, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) open func removeSegment(at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) open func removeAllSegments()
  @_Concurrency.MainActor(unsafe) open func setAttribute(attribute: SAPFiori.FUISegmentAttributes, for state: SAPFiori.FUIControlState)
  @_Concurrency.MainActor(unsafe) open func getAttribute(for state: SAPFiori.FUIControlState) -> SAPFiori.FUISegmentAttributes
  @objc deinit
}
extension SAPFiori.FUIDimensionSelector {
  @frozen public enum FUISegmentWidthMode {
    case fixed(CoreFoundation.CGFloat)
    case intrinsic
    case maximum
    case equal
  }
}
@available(*, unavailable, renamed: "FUIDimensionSelector")
public typealias FUISegmentedControl = SAPFiori.FUIDimensionSelector
public protocol FUIMKMapViewDataSource : AnyObject {
  func numberOfLayers(in mapView: MapKit.MKMapView) -> Swift.Int
  func mapView(_ mapView: MapKit.MKMapView, layerAtIndex index: Swift.Int) -> SAPFiori.FUIGeometryLayer
  func mapView(_ mapView: MapKit.MKMapView, geometriesForLayer layer: SAPFiori.FUIGeometryLayer) -> [SAPFiori.FUIAnnotation]
}
public protocol FUIActivityControlDelegate : AnyObject {
  func activityControl(_ activityControl: SAPFiori.FUIActivityControl, didSelectActivity activityItem: SAPFiori.FUIActivityItem)
}
public struct FUIActivityItem : Swift.Equatable, Swift.Hashable {
  public static var phone: SAPFiori.FUIActivityItem {
    get
  }
  public static var email: SAPFiori.FUIActivityItem {
    get
  }
  public static var message: SAPFiori.FUIActivityItem {
    get
  }
  public static var videoCall: SAPFiori.FUIActivityItem {
    get
  }
  public static var detail: SAPFiori.FUIActivityItem {
    get
  }
  public let icon: UIKit.UIImage!
  public let identifier: Swift.String!
  public init(icon: UIKit.UIImage?, identifier: Swift.String)
  public static func == (lhs: SAPFiori.FUIActivityItem, rhs: SAPFiori.FUIActivityItem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIActivityControl : SAPFiori.NibDesignable, SAPFiori.FUIBackgroundSchemeSupporting {
  @_Concurrency.MainActor(unsafe) public var activityItems: [SAPFiori.FUIActivityItem : SAPFiori.FUIButton]
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIActivityControlDelegate?
  @_Concurrency.MainActor(unsafe) public var maxVisibleItems: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var itemSize: CoreFoundation.CGSize? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var spacing: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var semanticContentAttribute: UIKit.UISemanticContentAttribute {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public func addActivity(_ activity: SAPFiori.FUIActivityItem)
  @_Concurrency.MainActor(unsafe) public func addActivities(_ activities: [SAPFiori.FUIActivityItem])
  @objc deinit
}
public typealias FUIObjectCardComponent = SAPFiori.FUIBodyMultiLineComponent & SAPFiori.FUIDetailImageViewComponent & SAPFiori.FUIFootnoteMultiLineComponent & SAPFiori.FUIIconsComponent & SAPFiori.FUIOverflowActionComponent & SAPFiori.FUIStatusImageComponent & SAPFiori.FUISubtitleMultiLineComponent & SAPFiori.FUITagsComponent & SAPFiori.FUITitleMultiLineComponent
public typealias FUIObjectCardViewComponent = SAPFiori.FUIBodyMultiLineComponent & SAPFiori.FUIDetailImageViewComponent & SAPFiori.FUIFootnoteMultiLineComponent & SAPFiori.FUIIconsComponent & SAPFiori.FUIOverflowActionComponent & SAPFiori.FUIStatusComponent & SAPFiori.FUISubtitleMultiLineComponent & SAPFiori.FUITagsComponent & SAPFiori.FUITitleMultiLineComponent
public typealias FUICardHeaderViewComponent = SAPFiori.FUIDetailImageViewComponent & SAPFiori.FUIOverflowActionComponent & SAPFiori.FUITitleMultiLineComponent
public struct FUITableColumnAttribute {
  public enum Width {
    case fixed(CoreFoundation.CGFloat)
    case flexible
    case infinity
  }
  public var textAlignment: UIKit.NSTextAlignment
  public var width: SAPFiori.FUITableColumnAttribute.Width
  public init(textAlignment: UIKit.NSTextAlignment = .left, width: SAPFiori.FUITableColumnAttribute.Width = .flexible)
}
public enum FUIDataTableRowAlignment {
  case baseline
  case top
  public static func == (a: SAPFiori.FUIDataTableRowAlignment, b: SAPFiori.FUIDataTableRowAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class FUIDataTableModel {
  public var headerData: SAPFiori.FUITableRowItem? {
    get
    set
  }
  public var rowData: [SAPFiori.FUITableRowItem] {
    get
    set
  }
  public var isEditing: Swift.Bool {
    get
    set
  }
  public var isHeaderSticky: Swift.Bool {
    get
    set
  }
  public var isFirstColumnSticky: Swift.Bool {
    get
    set
  }
  public var horizontalScrolling: Swift.Bool {
    get
    set
  }
  public var showListView: Swift.Bool {
    get
    set
  }
  public var isPinchZoomEnable: Swift.Bool {
    get
    set
  }
  public var showRowDivider: Swift.Bool {
    get
    set
  }
  public var showColoumnDivider: Swift.Bool {
    get
    set
  }
  public var headerCellPadding: UIKit.UIEdgeInsets? {
    get
    set
  }
  public var dataCellPadding: UIKit.UIEdgeInsets? {
    get
    set
  }
  public var minRowHeight: CoreFoundation.CGFloat {
    get
    set
  }
  public var minColumnWidth: CoreFoundation.CGFloat {
    get
    set
  }
  public var allowsPartialRowDisplay: Swift.Bool {
    get
    set
  }
  public var backgroundColor: UIKit.UIColor {
    get
    set
  }
  public var columnAttributes: [SAPFiori.FUITableColumnAttribute] {
    get
    set
  }
  public var rowAlignment: SAPFiori.FUIDataTableRowAlignment {
    get
    set
  }
  public var didSelectRowAt: ((_ index: Swift.Int) -> Swift.Void)? {
    get
    set
  }
  public var selectedIndexes: [Swift.Int] {
    get
    set
  }
  public init(headerData: SAPFiori.FUITableRowItem? = nil, rowData: [SAPFiori.FUITableRowItem] = [], isHeaderSticky: Swift.Bool = false, isFirstColumnSticky: Swift.Bool = false, columnAttributes: [SAPFiori.FUITableColumnAttribute] = [], rowAlignment: SAPFiori.FUIDataTableRowAlignment = .top, isPinchZoomEnable: Swift.Bool = false, showRowDivider: Swift.Bool = true, showColoumnDivider: Swift.Bool = true, headerCellPadding: UIKit.UIEdgeInsets? = nil, dataCellPadding: UIKit.UIEdgeInsets? = nil, minRowHeight: CoreFoundation.CGFloat = 48, minColumnWidth: CoreFoundation.CGFloat = 48, allowsPartialRowDisplay: Swift.Bool = true, backgroundColor: UIKit.UIColor = UIColor.preferredFioriColor(forStyle: .secondaryGroupedBackground), showListView: Swift.Bool = false)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUICheckoutIndicatorView : SAPFiori.NibDesignable {
  public enum DisplayState : Swift.Equatable {
    case inProgress
    case completed
    case failed
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SAPFiori.FUICheckoutIndicatorView.DisplayState, b: SAPFiori.FUICheckoutIndicatorView.DisplayState) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var displayState: SAPFiori.FUICheckoutIndicatorView.DisplayState {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func changeDisplayState(to newState: SAPFiori.FUICheckoutIndicatorView.DisplayState, completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
public protocol FUIValueComponent : SAPFiori.FUIAttributesConsumer {
  associatedtype ValueType
  var value: Self.ValueType { get set }
  var valueAttributedText: Foundation.NSAttributedString { get set }
  var valueStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUIValueComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var valueStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public protocol FUIMKRoutingMapViewDelegate : SAPFiori.FUIMKMapViewDelegate {
  func mapView(_ mapView: MapKit.MKMapView, didSelectRouteAt index: Swift.Int)
  func mapView(_ mapView: MapKit.MKMapView, didSelectVertexAt vertexIndex: Swift.Int, inRouteAt routeIndex: Swift.Int)
  func mapView(_ mapView: MapKit.MKMapView, didDeselectRouteAt index: Swift.Int)
  func mapView(_ mapView: MapKit.MKMapView, didDeselectVertexAt vertexIndex: Swift.Int, inRouteAt routeIndex: Swift.Int)
  func mapView(_ mapView: MapKit.MKMapView, willRender overlayRenderer: MapKit.MKOverlayRenderer, forRouteAt index: Swift.Int, in state: SAPFiori.FUIMapFloorplan.State)
  func mapView(_ mapView: MapKit.MKMapView, willRender annotationView: MapKit.MKAnnotationView, forVertexAtIndex vertexIndex: Swift.Int, inRouteAt routeIndex: Swift.Int, in state: SAPFiori.FUIMapFloorplan.State)
}
extension SAPFiori.FUIMKRoutingMapViewDelegate {
  public func mapView(_ mapView: MapKit.MKMapView, didSelectRouteAt index: Swift.Int)
  public func mapView(_ mapView: MapKit.MKMapView, didSelectVertexAt vertexIndex: Swift.Int, inRouteAt routeIndex: Swift.Int)
  public func mapView(_ mapView: MapKit.MKMapView, didDeselectRouteAt index: Swift.Int)
  public func mapView(_ mapView: MapKit.MKMapView, didDeselectVertexAt vertexIndex: Swift.Int, inRouteAt routeIndex: Swift.Int)
  public func mapView(_ mapView: MapKit.MKMapView, willRender overlayRenderer: MapKit.MKOverlayRenderer, forRouteAt index: Swift.Int, in state: SAPFiori.FUIMapFloorplan.State)
  public func mapView(_ mapView: MapKit.MKMapView, willRender annotationView: MapKit.MKAnnotationView, forVertexAtIndex vertexIndex: Swift.Int, inRouteAt routeIndex: Swift.Int, in state: SAPFiori.FUIMapFloorplan.State)
}
public protocol FUITrailingImageViewComponent : SAPFiori.FUIAttributesConsumer {
  var trailingImageView: SAPFiori.FUIImageView { get }
}
open class FUIUserConsentPage : SAPFiori.FUIUserConsentPageComponent {
  public var titleStyleClassPath: [SAPFiori.FioriStyle]
  public var bodyStyleClassPath: [SAPFiori.FioriStyle]
  public var actionTitleStyleClassPath: [SAPFiori.FioriStyle]
  public var attributesProvider: SAPFiori.FUIAttributesProvider?
  public var title: SAPFiori.FUIText
  public var titleAttributedText: Foundation.NSAttributedString!
  public var body: SAPFiori.FUIMultiLineText
  public var bodyAttributedText: Foundation.NSAttributedString!
  public var bodyDataDetectorTypes: UIKit.UIDataDetectorTypes
  public var actionTitle: SAPFiori.FUIText
  public var actionTitleAttributedText: Foundation.NSAttributedString!
  public var actionHandler: ((SAPFiori.FUIUserConsentPageViewController) -> Swift.Void)?
  public init()
  public func setBodyAttributedText(_ attrString: Foundation.NSAttributedString, replaceWithScaledFont: Swift.Bool = false)
  public typealias Text = SAPFiori.FUIMultiLineText
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIListCardTableViewCell<ItemIdentifier> : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIListCardView<ItemIdentifier>> where ItemIdentifier : Swift.Hashable, ItemIdentifier : Swift.Identifiable {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
extension SAPFiori.FUIPaletteVersion : Swift.RawRepresentable {
  public typealias RawValue = SAPFiori.FUIPalette
  public init?(rawValue: SAPFiori.FUIPalette)
  public var rawValue: SAPFiori.FUIPalette {
    get
  }
}
public enum FUIPaletteVersion : Swift.CaseIterable, Swift.Comparable {
  case v3_x
  case v3_2
  case v4
  case v5
  case v6
  case v7
  public static let latest: SAPFiori.FUIPaletteVersion
  public func previous() -> SAPFiori.FUIPaletteVersion?
  public func next() -> SAPFiori.FUIPaletteVersion?
  public func supportedStyles() -> Swift.Set<SAPFiori.FUIColorStyle>
  public func obsoletedStyles() -> Swift.Set<SAPFiori.FUIColorStyle>
  public func newStyles() -> Swift.Set<SAPFiori.FUIColorStyle>
  public func hash(into hasher: inout Swift.Hasher)
  public static func < (a: SAPFiori.FUIPaletteVersion, b: SAPFiori.FUIPaletteVersion) -> Swift.Bool
  public typealias AllCases = [SAPFiori.FUIPaletteVersion]
  public static var allCases: [SAPFiori.FUIPaletteVersion] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIChartTitleTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIChartTitleView> {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var nuiClass: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIProgressIndicatorControl : SAPFiori.NibDesignableControl {
  public enum DisplayState {
    case inProgress
    case loadingPausable
    case loadingStoppable
    case paused
    public static func == (a: SAPFiori.FUIProgressIndicatorControl.DisplayState, b: SAPFiori.FUIProgressIndicatorControl.DisplayState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var progress: Swift.Float {
    get
  }
  @_Concurrency.MainActor(unsafe) public var displayState: SAPFiori.FUIProgressIndicatorControl.DisplayState {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func update(progress: Swift.Float, animated: Swift.Bool = false, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func changeDisplayState(to newState: SAPFiori.FUIProgressIndicatorControl.DisplayState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISliderCollectionViewCell : SAPFiori.FUIInlineValidationDrawingCollectionViewCell<SAPFiori.FUISliderContentView>, SAPFiori.FUIFormCell {
  @_Concurrency.MainActor(unsafe) open var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var value: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((Swift.Float) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maximumValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var minimumValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isContinuous: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var unit: Foundation.Unit {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  public typealias ValueType = Swift.Float
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIBodyMultiLineComponent {
  public var body: SAPFiori.FUIMultiLineText {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIBodyComponent {
  public var body: SAPFiori.FUIText {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIBodyBaseComponent {
  public var bodyAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var bodyStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUITitleBaseView : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUITitleMultiLineComponent {
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias TitleText = SAPFiori.FUIMultiLineText
  @objc deinit
}
public protocol FUIGeometryTypeWrapper {
  associatedtype PointType : SAPFiori.FUIInitCoordinate
  associatedtype PolylineType : SAPFiori.FUIInitCoordinates
  associatedtype PolygonType : SAPFiori.FUIInitCoordinates
}
@_hasMissingDesignatedInitializers public class FUIGeometryBaseTypeWrapper<PointType, PolylineType, PolygonType> : SAPFiori.FUIGeometryTypeWrapper where PointType : SAPFiori.FUIInitCoordinate, PolylineType : SAPFiori.FUIInitCoordinates, PolygonType : SAPFiori.FUIInitCoordinates {
  @objc deinit
}
public typealias MKEditingTypes = SAPFiori.FUIGeometryBaseTypeWrapper<SAPFiori.MKEditGeometry.Point, SAPFiori.MKEditGeometry.Polyline, SAPFiori.MKEditGeometry.Polygon>
public enum FUISelectionRangePosition : Swift.Int {
  case left, middle, right, full, none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIObjectHeaderViewBaseComponent {
  public var headlineLabel: SAPFiori.FUILabel {
    get
  }
  public var subheadlineLabel: SAPFiori.FUILabel {
    get
  }
  public var footnoteLabel: SAPFiori.FUILabel {
    get
  }
  public var descriptionLabel: SAPFiori.FUILabel {
    get
  }
  public var statusLabel: SAPFiori.FUILabel {
    get
  }
  public var substatusLabel: SAPFiori.FUILabel {
    get
  }
  public var statusImageView: SAPFiori.FUIImageView {
    get
  }
  public var substatusImageView: SAPFiori.FUIImageView {
    get
  }
  public var detailImageView: SAPFiori.FUIImageView {
    get
  }
  public var splitPercent: CoreFoundation.CGFloat {
    get
    set
  }
  public var isApplyingSplitPercent: Swift.Bool {
    get
    set
  }
}
extension SAPFiori.FUIObjectComponent where Self : SAPFiori.FUIObjectHeaderViewBaseComponent {
  public var detailImage: UIKit.UIImage? {
    get
    set
  }
  public var headlineText: Swift.String? {
    get
    set
  }
  public var subheadlineText: Swift.String? {
    get
    set
  }
  public var footnoteText: Swift.String? {
    get
    set
  }
  public var descriptionText: Swift.String? {
    get
    set
  }
  public var statusText: Swift.String? {
    get
    set
  }
  public var substatusText: Swift.String? {
    get
    set
  }
  public var statusImage: UIKit.UIImage? {
    get
    set
  }
  public var substatusImage: UIKit.UIImage? {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIObjectCollectionViewCell : SAPFiori.FUITableViewAccessoryDrawingCollectionViewCell<SAPFiori.FUIObjectView>, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) open var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailImageViewSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var iconsColumnWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var actionAccessoryView: SAPFiori.FUISingleActionAccessoryView? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var actionAccessoryType: SAPFiori.FUITableViewCellActionAccessoryType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIMKRoutingFloorplanViewController : SAPFiori.FUIMKMapFloorplanViewController {
  @_Concurrency.MainActor(unsafe) open var routeAnnotations: [SAPFiori.FUIAnnotation] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var routeOverlays: [SAPFiori.FUIOverlay] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var calloutAnnotations: [SAPFiori.FUICalloutAnnotation] {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) override open func reloadData()
  @_Concurrency.MainActor(unsafe) open func selectRoute(at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) open func selectStop(at indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func deselectRoute()
  @_Concurrency.MainActor(unsafe) open func deselectStop()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public protocol FUIMapRenderer {
}
extension MapKit.MKOverlayRenderer : SAPFiori.FUIMapRenderer {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIMapDetailPanelViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredContentSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class FUIMapDetailPanelContentViewController : SAPFiori.FUIMapDetailPanelViewController {
  @_Concurrency.MainActor(unsafe) final public var headlineText: Swift.String! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subheadlineText: Swift.String! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var didSelectTitleHandler: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var closeButton: SAPFiori.FUIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUISortFilterViewController : SAPFiori.FUIFormTableViewController {
  public enum ControlType {
    case `switch`(_: Swift.Bool = false, _: Swift.String? = nil)
    case rating(Swift.Int, _: Swift.String? = nil)
    case segmentedControl([Swift.Int], [Swift.String], _: Swift.String? = nil)
    case slider(Swift.Float, Swift.Float, Swift.Float, _: Swift.String? = nil)
    case title(Swift.String, _: Swift.String? = nil)
    case note(Swift.String, _: Swift.String? = nil)
    case keyValue(Swift.String, _: Swift.String? = nil, _: Swift.String? = nil)
    case textField(Swift.String, _: Swift.String? = nil, _: Swift.String? = nil)
    case filter([Swift.Int], [Swift.String], _: Swift.String? = nil, _: Swift.Bool = true, _: Swift.Bool = true)
    case listPicker([Swift.Int], [Swift.String], _: Swift.String? = nil, _: Swift.Bool = true, _: Swift.Bool = true, _: Swift.Bool = false, _: Swift.Bool = false)
    case durationPicker(_: Foundation.TimeInterval = 0, _: Swift.String? = nil, _: Swift.Int = 5)
    case datePicker(Foundation.Date, _: Swift.String? = nil, _: UIKit.UIDatePicker.Mode? = nil, _: Foundation.DateFormatter? = nil)
    case orderPicker([SAPFiori.FUISortCriterion], _: Swift.String? = nil, _: Swift.Bool = true)
  }
  @_Concurrency.MainActor(unsafe) public var values: [[SAPFiori.FUISortFilterViewController.ControlType]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: (([[SAPFiori.FUISortFilterViewController.ControlType]], SAPFiori.FUISortFilterViewController.ControlType?) -> Swift.Int)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var completionHandler: (([[SAPFiori.FUISortFilterViewController.ControlType]], Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var titleAndSubtitleHandler: (_ filteredNum: Swift.Int, _ totalNum: Swift.Int) -> (Swift.String, Swift.String?)
  @_Concurrency.MainActor(unsafe) public var actionButtonTitleHandler: (_ filteredNum: Swift.Int) -> Swift.String
  @_Concurrency.MainActor(unsafe) weak public var sortFilterFormDelegate: SAPFiori.FUISortFilterFormDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public protocol FUISortFilterFormDelegate : AnyObject {
  func cell(_ vc: SAPFiori.FUISortFilterViewController, controlType: SAPFiori.FUISortFilterViewController.ControlType, at indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell?
  func configCell(_ vc: SAPFiori.FUISortFilterViewController, controlType: SAPFiori.FUISortFilterViewController.ControlType, at indexPath: Foundation.IndexPath, cell: UIKit.UITableViewCell) -> UIKit.UITableViewCell
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIHierarchyView : UIKit.UIView, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) final public let header: SAPFiori.FUIHierarchyViewHeader
  @_Concurrency.MainActor(unsafe) weak public var dataSource: SAPFiori.FUIHierarchyViewDataSource?
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIHierarchyViewDelegate?
  @_Concurrency.MainActor(unsafe) open var isContentCopyable: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isEditing: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsSelectionDuringEditing: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsMultipleSelectionDuringEditing: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectedUUIDs: [Swift.String] {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func register(_ cellClass: Swift.AnyClass?, forCellWithReuseIdentifier identifier: Swift.String)
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell(withReuseIdentifier identifier: Swift.String, with uuid: Swift.String) -> SAPFiori.FUIHierarchyCollectionItem
  @_Concurrency.MainActor(unsafe) public func cellForItem(with uuid: Swift.String) -> SAPFiori.FUIHierarchyCollectionItem?
  @_Concurrency.MainActor(unsafe) open func reloadData()
  @_Concurrency.MainActor(unsafe) open func insertChildren(of parent: Swift.String, at indexes: Foundation.IndexSet)
  @_Concurrency.MainActor(unsafe) open func removeChildren(of parent: Swift.String, at indexes: Foundation.IndexSet)
  @_Concurrency.MainActor(unsafe) open func invalidateParent(of child: Swift.String)
  @_Concurrency.MainActor(unsafe) open func invalidateChildren(of parent: Swift.String)
  @_Concurrency.MainActor(unsafe) open func invalidateItems(with uuids: [Swift.String])
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
}
public protocol FUIStyleByStringAttributes : AnyObject {
  var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] { get set }
  var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] { get set }
}
public struct FUIMapLegendIcon {
  public init(glyphImage: SAPFiori.FUIGlyphImage)
}
public protocol FUIListCardComponent : AnyObject {
  associatedtype ItemIdentifier : Swift.Hashable, Swift.Identifiable
  var tableView: UIKit.UITableView { get }
  var cellTappedHandler: ((Foundation.IndexPath, Self.ItemIdentifier) -> Swift.Void)? { get set }
  var dataSource: UIKit.UITableViewDiffableDataSource<Swift.Int, Self.ItemIdentifier>! { get }
  var cellProvider: ((UIKit.UITableView, Foundation.IndexPath, Self.ItemIdentifier) -> UIKit.UITableViewCell)? { get set }
  func register(_ cellClass: Swift.AnyClass?, forCellReuseIdentifier identifier: Swift.String)
  func setItems(_ items: [Self.ItemIdentifier])
  func appendItems(_ items: [Self.ItemIdentifier])
  func deleteItems(_ items: [Self.ItemIdentifier])
  func deleteAllItems()
  func insertItems(_ items: [Self.ItemIdentifier], beforeItem: Self.ItemIdentifier)
  func insertItems(_ items: [Self.ItemIdentifier], afterItem: Self.ItemIdentifier)
  func moveItem(_ item: Self.ItemIdentifier, beforeItem item: Self.ItemIdentifier)
  func moveItem(_ item: Self.ItemIdentifier, afterItem item: Self.ItemIdentifier)
  func reloadItems(_ items: [Self.ItemIdentifier])
}
public protocol FUIBodyComponent : SAPFiori.FUIBodyBaseComponent where Self.Text : SAPFiori.FUIText {
  var body: SAPFiori.FUIText { get }
}
public protocol FUIBodyMultiLineComponent : SAPFiori.FUIBodyBaseComponent where Self.Text : SAPFiori.FUIMultiLineText {
  var body: SAPFiori.FUIMultiLineText { get }
}
public protocol FUIBodyBaseComponent : SAPFiori.FUIAttributesConsumer {
  associatedtype Text : SAPFiori.FUITextProtocol
  var body: Self.Text { get }
  var bodyAttributedText: Foundation.NSAttributedString! { get set }
  var bodyStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUIBodyBaseComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var bodyStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension SAPFiori.FUIBodyBaseComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var bodyAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
public protocol FUIObjectViewComponent : SAPFiori.FUIObjectViewBaseComponent {
  var preserveIconStackSpacing: Swift.Bool { get set }
  var preserveDetailImageSpacing: Swift.Bool { get set }
  var isLimitingHeightToMainContent: Swift.Bool { get set }
}
public protocol FUIObjectViewBaseComponent : AnyObject {
  var headlineLabel: SAPFiori.FUILabel { get }
  var subheadlineLabel: SAPFiori.FUILabel { get }
  var footnoteLabel: SAPFiori.FUILabel { get }
  var descriptionLabel: SAPFiori.FUILabel { get }
  var statusLabel: SAPFiori.FUILabel { get }
  var substatusLabel: SAPFiori.FUILabel { get }
  var statusImageView: SAPFiori.FUIImageView { get }
  var substatusImageView: SAPFiori.FUIImageView { get }
  var detailImageView: SAPFiori.FUIImageView { get }
  var avatars: [SAPFiori.FUIGlyphImage] { get set }
  var avatarSize: CoreFoundation.CGSize { get set }
  var isAvatarCircular: Swift.Bool { get set }
  var avatarBorderWidth: CoreFoundation.CGFloat { get set }
  var avatarBorderColor: UIKit.UIColor { get set }
  var groupedAvatarsViews: [SAPFiori.FUIImageView] { get }
  var indicatorImageView: SAPFiori.FUIImageView { get }
  var indicatorImageViewSize: CoreFoundation.CGSize { get set }
  var splitPercent: CoreFoundation.CGFloat { get set }
  var isApplyingSplitPercent: Swift.Bool { get set }
  var statusDisplayMode: SAPFiori.FUIStatusDisplayMode { get set }
  var substatusDisplayMode: SAPFiori.FUISubstatusDisplayMode { get set }
  var showDescriptionInCompact: Swift.Bool { get set }
}
public enum FUIStatusDisplayMode {
  case text
  case image
  case both
  public static func == (a: SAPFiori.FUIStatusDisplayMode, b: SAPFiori.FUIStatusDisplayMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FUISubstatusDisplayMode {
  case text
  case image
  case both
  public static func == (a: SAPFiori.FUISubstatusDisplayMode, b: SAPFiori.FUISubstatusDisplayMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIPageViewController : UIKit.UIPageViewController {
  public enum Style {
    case textBased
    case iconBased
    public static func == (a: SAPFiori.FUIPageViewController.Style, b: SAPFiori.FUIPageViewController.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) open var style: SAPFiori.FUIPageViewController.Style {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titleText: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) open var subtitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) final public let nextButtonItem: SAPFiori.FUIBarButtonItem
  @_Concurrency.MainActor(unsafe) final public let previousButtonItem: SAPFiori.FUIBarButtonItem
  @_Concurrency.MainActor(unsafe) public var pageIndexFormat: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var dataSource: UIKit.UIPageViewControllerDataSource? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var delegate: UIKit.UIPageViewControllerDelegate? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(transitionStyle style: UIKit.UIPageViewController.TransitionStyle, navigationOrientation: UIKit.UIPageViewController.NavigationOrientation, options: [UIKit.UIPageViewController.OptionsKey : Any]? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension SAPFiori.FUIPageViewController : UIKit.UIPageViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, willTransitionTo pendingViewControllers: [UIKit.UIViewController])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, spineLocationFor orientation: UIKit.UIInterfaceOrientation) -> UIKit.UIPageViewController.SpineLocation
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewControllerSupportedInterfaceOrientations(_ pageViewController: UIKit.UIPageViewController) -> UIKit.UIInterfaceOrientationMask
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewControllerPreferredInterfaceOrientationForPresentation(_ pageViewController: UIKit.UIPageViewController) -> UIKit.UIInterfaceOrientation
}
extension SAPFiori.FUIPageViewController : UIKit.UIPageViewControllerDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
}
@objc public protocol FUIPageViewControllerDataSource : UIKit.UIPageViewControllerDataSource {
  @objc optional func presentationTitle(for pageViewController: SAPFiori.FUIPageViewController) -> Swift.String?
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISwitchFormCell : SAPFiori.FUIInlineValidationDrawingTableViewCell<SAPFiori.FUISwitchFormView> {
  @_Concurrency.MainActor(unsafe) override public var containerIsEnabled: Swift.Bool? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  public typealias ValueType = Swift.Bool
  @_Concurrency.MainActor(unsafe) public var value: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.Bool) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isUpdatingTableView: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, message: "This property has been removed.  Use the `title` property.")
  @_Concurrency.MainActor(unsafe) public var keyLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var switchView: UIKit.UISwitch {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityActivate() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
extension SAPFiori.FUIFeedbackScreen {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BaseController : UIKit.UIViewController {
    @_Concurrency.MainActor(unsafe) final public let titleLabel: SAPFiori.FUILabel
    @_Concurrency.MainActor(unsafe) final public let messageLabel: SAPFiori.FUILabel
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
public protocol FUIWatermarkTextComponent : AnyObject {
  var watermarkText: SAPFiori.FUIText { get set }
}
@objc @_Concurrency.MainActor(unsafe) open class FUIDataTable : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var model: SAPFiori.FUIDataTableModel!
  @_Concurrency.MainActor(unsafe) public var isEditing: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var dataTableBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isHeaderSticky: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isFirstColumnSticky: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isPinchZoomEnable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func showListView(_ value: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func showColumnDivider(_ value: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func showRowDivider(_ value: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func headerCellPadding(_ value: UIKit.UIEdgeInsets?)
  @_Concurrency.MainActor(unsafe) public func dataCellPadding(_ value: UIKit.UIEdgeInsets?)
  @_Concurrency.MainActor(unsafe) public func minRowHeight(_ value: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func minColumnWidth(_ value: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func allowsPartialRowDisplay(_ value: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func rowAlignment(_ value: SAPFiori.FUIDataTableRowAlignment)
  @_Concurrency.MainActor(unsafe) public init(model: SAPFiori.FUIDataTableModel)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIEmailInputView : SAPFiori.NibDesignable, UIKit.UITextFieldDelegate {
  @objc @IBOutlet @IBInspectable @_Concurrency.MainActor(unsafe) public var emailTextField: SAPFiori.FUIAutoResizingTextField! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var bottomPaddingViewHeightConstraint: UIKit.NSLayoutConstraint! {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public var onTextFieldChangeHandler: ((Swift.String) -> Swift.Void)?
  @objc deinit
}
@available(*, deprecated, message: "No longer supported.")
public struct FUIStatusBarStyleHelper {
  @available(*, deprecated, message: "No longer supported.")
  public static var statusBarStyle: UIKit.UIStatusBarStyle?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIOfflineBannerMessageView : SAPFiori.FUIBannerMessageView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) override open func show(message: Swift.String, withDuration duration: Foundation.TimeInterval = 4, animated: Swift.Bool = true)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIListCardView<ItemIdentifier> : SAPFiori.FUICardBaseContainer<SAPFiori.FUICardHeaderView, SAPFiori.FUIListCardContentView<ItemIdentifier>>, SAPFiori.FUICardHeaderViewComponent where ItemIdentifier : Swift.Hashable, ItemIdentifier : Swift.Identifiable {
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias TitleText = SAPFiori.FUIMultiLineText
  @objc deinit
}
extension SAPFiori.FUIListCardView {
  @_Concurrency.MainActor(unsafe) public var detailImageView: SAPFiori.FUIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIMultiLineText {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var overflowAction: SAPFiori.FUIButton {
    get
  }
}
extension SAPFiori.FUIListCardView : SAPFiori.FUIListCardComponent {
  @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var cellTappedHandler: ((Foundation.IndexPath, ItemIdentifier) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var dataSource: UIKit.UITableViewDiffableDataSource<Swift.Int, ItemIdentifier>! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cellProvider: ((UIKit.UITableView, Foundation.IndexPath, ItemIdentifier) -> UIKit.UITableViewCell)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func register(_ cellClass: Swift.AnyClass?, forCellReuseIdentifier identifier: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setItems(_ items: [ItemIdentifier])
  @_Concurrency.MainActor(unsafe) public func appendItems(_ items: [ItemIdentifier])
  @_Concurrency.MainActor(unsafe) public func deleteItems(_ items: [ItemIdentifier])
  @_Concurrency.MainActor(unsafe) public func deleteAllItems()
  @_Concurrency.MainActor(unsafe) public func insertItems(_ items: [ItemIdentifier], beforeItem: ItemIdentifier)
  @_Concurrency.MainActor(unsafe) public func insertItems(_ items: [ItemIdentifier], afterItem: ItemIdentifier)
  @_Concurrency.MainActor(unsafe) public func moveItem(_ item: ItemIdentifier, beforeItem: ItemIdentifier)
  @_Concurrency.MainActor(unsafe) public func moveItem(_ item: ItemIdentifier, afterItem: ItemIdentifier)
  @_Concurrency.MainActor(unsafe) public func reloadItems(_ items: [ItemIdentifier])
}
@objc @_inheritsConvenienceInitializers open class FUISectionLayoutManager : ObjectiveC.NSObject {
  open var section: Swift.Int
  open var offset: CoreFoundation.CGPoint {
    get
    set
  }
  open var inset: UIKit.UIEdgeInsets
  open var sectionWidth: CoreFoundation.CGFloat
  open var numberOfItems: Swift.Int
  open var interItemSpacing: CoreFoundation.CGFloat
  open var lineSpacing: CoreFoundation.CGFloat
  open var itemSizes: [CoreFoundation.CGSize]
  open var headerHeight: CoreFoundation.CGFloat
  open var footerHeight: CoreFoundation.CGFloat
  open var itemFrames: [CoreFoundation.CGRect]
  open var headerFrame: CoreFoundation.CGRect?
  open var footerFrame: CoreFoundation.CGRect?
  open var itemAttributes: [UIKit.UICollectionViewLayoutAttributes]
  open var headerAttribute: UIKit.UICollectionViewLayoutAttributes?
  open var footerAttribute: UIKit.UICollectionViewLayoutAttributes?
  open var needsLayout: Swift.Bool
  open var needsUpdateAttributes: Swift.Bool
  open var bounds: CoreFoundation.CGRect
  open var frame: CoreFoundation.CGRect {
    get
  }
  @objc required override dynamic public init()
  open func prepare()
  open func updateAttributes()
  open func layoutAttributesForElements(in rect: CoreFoundation.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  open func layoutAttributesForItem(at index: Swift.Int) -> UIKit.UICollectionViewLayoutAttributes?
  open func layoutAttributeForHeader() -> UIKit.UICollectionViewLayoutAttributes?
  open func layoutAttributeForFooter() -> UIKit.UICollectionViewLayoutAttributes?
  @objc deinit
}
extension Foundation.NSAttributedString.Key {
  public static let fuiNumberOfLines: SAPFiori.NSAttributedStringKey
  public static let fuiBorderColor: SAPFiori.NSAttributedStringKey
  public static let fuiOnTintColor: SAPFiori.NSAttributedStringKey
  public static let fuiTrackTintColor: SAPFiori.NSAttributedStringKey
  public static let fuiThumbTintColor: SAPFiori.NSAttributedStringKey
  public static let fuiViewAlphaValue: SAPFiori.NSAttributedStringKey
}
public protocol FUIStartActionComponent : AnyObject {
  var startActionTitle: SAPFiori.FUIText { get set }
}
public protocol FUIRestartActionComponent : AnyObject {
  var restartActionTitle: SAPFiori.FUIText { get set }
}
public protocol FUICancelActionComponent : AnyObject {
  var cancelActionTitle: SAPFiori.FUIText { get set }
}
public protocol FUIClearActionComponent : AnyObject {
  var clearActionTitle: SAPFiori.FUIText { get set }
}
public protocol FUISaveActionComponent : AnyObject {
  var saveActionTitle: SAPFiori.FUIText { get set }
}
public protocol FUIPrimaryActionComponent {
  var primaryAction: SAPFiori.FUIButton { get }
}
public protocol FUISecondaryActionComponent {
  var secondaryAction: SAPFiori.FUIButton { get }
}
public protocol FUIOverflowActionComponent {
  var overflowAction: SAPFiori.FUIButton { get }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIUserConsentPageViewController : SAPFiori.FUIBaseDrawingViewController<SAPFiori.FUIUserConsentPageView>, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) open var isMandatory: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var toolbarLeftItemTitle: Swift.String
  @_Concurrency.MainActor(unsafe) open var toolbarRightItemTitle: Swift.String
  @_Concurrency.MainActor(unsafe) weak open var userConsentPageViewControllerDelegate: SAPFiori.FUIUserConsentPageViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
extension SAPFiori.FUIUserConsentPageViewController {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIOrderPickerFormItemCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIOrderPickerFormItemView>, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) override public class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIButtonCollectionViewCell : SAPFiori.FUIBaseDrawingCollectionViewCell<SAPFiori.FUIButtonFormView> {
  @_Concurrency.MainActor(unsafe) public var button: SAPFiori.FUIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((SAPFiori.UIControlEvents) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var alignment: SAPFiori.FUIHorizontalAlignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func setup()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIMapDetailPanelSearchResultsViewController : SAPFiori.FUIMapDetailPanelViewController {
  @_Concurrency.MainActor(unsafe) public var isApplyingBlurBackground: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let searchBar: SAPFiori.FUIMapDetailPanelSearchBar
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredContentSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension SAPFiori.FUIMapDetailPanelSearchResultsViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUICollectionSectionHeaderFooterView : SAPFiori.NibDesignableCollectionReusableView {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var attributeLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isDisclosureAccessoryHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var style: SAPFiori.FUISectionHeaderFooterStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var didSelectHandler: (() -> Swift.Void)? {
    get
    set
  }
  @nonobjc @_Concurrency.MainActor(unsafe) public func setBackgroundColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIIconsComponent {
  public var iconImages: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIHorizontalIconsComponent {
  public var horizontalIcons: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIFootnoteIconsComponent {
  public var footnoteIcons: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
  public var iconsSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  public var footnoteIconsMaxCount: Swift.Int? {
    get
    set
  }
  public var footnoteIconSize: CoreFoundation.CGSize {
    get
    set
  }
  public var isFootnoteIconCircular: Swift.Bool {
    get
    set
  }
}
public struct FUITimelinePreviewNode {
  public static var open: UIKit.UIImage {
    get
  }
  public static var complete: UIKit.UIImage {
    get
  }
  public static var end: UIKit.UIImage {
    get
  }
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "This has been integrated with FUIImageView, please use that instead")
@_Concurrency.MainActor(unsafe) open class FUIPlaceholderImageView : SAPFiori.FUIImageView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIChartSummaryItemView : SAPFiori.FUIChartSummaryItemBaseView<SAPFiori.FUIChartSummaryItem>, SAPFiori.FUITitleComponent, SAPFiori.FUIValuesComponent {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) public var values: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valuesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var categoryIndex: Swift.Int
  @_Concurrency.MainActor(unsafe) public var isPreservingTitleHeight: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isPreservingTrendHeight: Swift.Bool
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
public class FUIListViewModel<Entity, Section> : Foundation.ObservableObject where Entity : Swift.Hashable, Entity : Swift.Identifiable, Section : Swift.CaseIterable, Section : Swift.Hashable {
  public var newListResultsCount: Swift.Int {
    get
  }
  public var newSearchResultsCount: Swift.Int {
    get
  }
  public var isListPagingEnabled: Swift.Bool {
    get
  }
  public var isSearchPagingEnabled: Swift.Bool {
    get
  }
  public var isSearchEnabled: Swift.Bool {
    get
  }
  public var state: SAPFiori.FUIListViewModel<Entity, Section>.FUIListViewModelState {
    get
  }
  public var loadedListItemsCount: Swift.Int {
    get
  }
  public var loadedSearchedItemsCount: Swift.Int {
    get
  }
  public var loadedListPageCount: Swift.Int {
    get
  }
  public var loadedSearchedPageCount: Swift.Int {
    get
  }
  public var initListPageSize: Swift.Int
  public var newListPageSize: Swift.Int
  public var initSearchPageSize: Swift.Int
  public var newSearchPageSize: Swift.Int
  public var isSearchActive: Swift.Bool {
    get
  }
  public init(queries: [Section : SAPFiori.FUIDataLoader<Entity>] = [:], isListPagingEnabled: Swift.Bool? = nil, isSearchPagingEnabled: Swift.Bool? = nil, isSearchEnabled: Swift.Bool? = nil)
  public func fetchListData(for section: Section)
  public func refreshListData(for section: Section)
  public func fetchSearchData(for section: Section, with searchString: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension SAPFiori.FUIListViewModel {
  public enum FUIListViewModelState : Swift.Equatable {
    case finished
    case loadingInitialPage
    case loadingNextPage
    case refreshFullResults
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SAPFiori.FUIListViewModel<Entity, Section>.FUIListViewModelState, b: SAPFiori.FUIListViewModel<Entity, Section>.FUIListViewModelState) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use `FUIHorizontalScrollCollectionViewLayout` and set `estimatedItemSize` to a non-zero value to enable auto-sizing.")
@_Concurrency.MainActor(unsafe) open class FUIHorizontalScrollDynamicSizeCollectionViewLayout : SAPFiori.FUIHorizontalScrollCollectionViewLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class FUIKPIFractionItem : SAPFiori.FUIKPIViewItem {
  convenience public init(string: Swift.String)
  convenience public init(attributedString: Foundation.NSAttributedString)
  public var attributedString: Foundation.NSAttributedString {
    get
  }
  public var attributes: [SAPFiori.NSAttributedStringKey : Any]
  open var style: SAPFiori.FUIKPIViewItemStyle {
    get
  }
  public var accessibilityLabel: Swift.String?
  public var accessibilityValue: Swift.String?
  public var accessibilityHint: Swift.String?
  public var accessibilityTraits: UIKit.UIAccessibilityTraits
  public var accessibilityPath: UIKit.UIBezierPath?
  public var accessibilityLanguage: Swift.String?
  @objc deinit
}
public protocol FUIKPIAttributesProvider : AnyObject {
  func defaultAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  func tintAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
  func styleSheetAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  func kerningAttribute(for kerningCase: SAPFiori.FUIKPIView.LeadingItemKerning) -> CoreFoundation.CGFloat
  func kpiParagraphStyle() -> UIKit.NSParagraphStyle
}
extension SAPFiori.FUIKPIAttributesProvider {
  public func kpiParagraphStyle() -> UIKit.NSParagraphStyle
  public func kerningAttribute(for kerningCase: SAPFiori.FUIKPIView.LeadingItemKerning) -> CoreFoundation.CGFloat
  public func mergedAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  public func tintAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
}
extension SAPFiori.FUIKPIAttributesProvider where Self : SAPFiori.FUIStyleByStringAttributes {
  public func styleSheetAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
}
extension SAPFiori.FUIKPIAttributesProvider where Self : SAPFiori.FUITintAttributesProvider {
  public func mergedAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  public func tintAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
}
@objc @_inheritsConvenienceInitializers @available(iOS 11.0, *)
@_Concurrency.MainActor(unsafe) open class FUIMarkerAnnotationView : MapKit.MKMarkerAnnotationView {
  @_Concurrency.MainActor(unsafe) public var priorityIcon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(annotation: MapKit.MKAnnotation?, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension SAPFiori.FUIMarkerAnnotationView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var stickyZPosition: CoreFoundation.CGFloat {
    get
    set
  }
}
public protocol EditingGeometryProducing {
  associatedtype GeometryType : Swift.Equatable
  var editingGeometry: Self.GeometryType? { get }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIMapFloorplanViewController<InnerView, EditingGeometryWrapper, EditingTypes> : SAPFiori.FUIBaseDrawingViewController<InnerView>, SAPFiori.FUIMapFloorplanComponent where InnerView : SAPFiori.FUIMapFloorplanContentView, EditingGeometryWrapper : SAPFiori.FUIManageRepresentation, EditingTypes : SAPFiori.FUIGeometryTypeWrapper {
  @_Concurrency.MainActor(unsafe) open var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var colorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var editingGeometryResultsDisplayMode: SAPFiori.FUICreateGeometryResultsDisplayMode
  @_Concurrency.MainActor(unsafe) open var isEditingExistingObject: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var editingGeometryMapLegendItem: SAPFiori.FUIMapLegendItem? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func reloadData()
  @_Concurrency.MainActor(unsafe) public var settingsController: UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) public var detailPanel: SAPFiori.FUIMapDetailPanel! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var toolbar: SAPFiori.FUIMapToolbar! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var legend: SAPFiori.FUIMapLegend
  @_Concurrency.MainActor(unsafe) open func editingPanelWillAppear(createItem: SAPFiori.FUIMapLegendItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setEditing(_ editing: Swift.Bool, animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
}
public enum FUICreateGeometryResultsDisplayMode {
  case push
  case present
  public static func == (a: SAPFiori.FUICreateGeometryResultsDisplayMode, b: SAPFiori.FUICreateGeometryResultsDisplayMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public protocol FUIOnboardingScanViewControllerDelegate {
  @objc optional func scanViewController(_ scanViewController: SAPFiori.FUIOnboardingScanViewController, shouldValidateScanResult scanResult: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIOnboardingScanViewController : UIKit.UIViewController, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) public var scanViewTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var scanUnsuccessfulTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var scanUnsuccessfulMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var okButtonString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var invalidQRCodeTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var invalidQRCodeMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var allowPhotoAccessTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var allowPhotoAccessMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var allowCameraAccessTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var allowCameraAccessMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var notNowActionString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var settingsActionString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var barcodeScanner: SAPFiori.FUIBarcodeScanner? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scanConfirmationView: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) public var usesCameraOnly: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var didCancel: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIOnboardingScanViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public class func createInstanceFromStoryboard() -> SAPFiori.FUIOnboardingScanViewController
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) public func didReceiveScanResult(scanResult: SAPFiori.FUIBarcodeScanResult?)
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SAPFiori.FUIOnboardingScanViewController : Photos.PHPhotoLibraryChangeObserver {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func photoLibraryDidChange(_ changeInstance: Photos.PHChange)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIResizablePopoverContainer : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var items: [SAPFiori.FUIMapLegendItem] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredContentSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var isMomentarySelection: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @available(*, deprecated, message: "The cell `separators` override API has been disabled, to ensure there are no violations of Apple AppStore policy. The Fiori Design Guidelines for cell separators have been updated.  Please use `.line` preferred Fiori color for cell separator line, and `.backgroundBase` for table view background.")
  @_Concurrency.MainActor(unsafe) public var separators: UIKit.UIRectEdge
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setEditing(_ editing: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willTransition(to state: UIKit.UITableViewCell.StateMask)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) open func applyTintColor(forState state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  @_Concurrency.MainActor(unsafe) public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) public func stateDidChange()
  @_Concurrency.MainActor(unsafe) public func tintColor(for state: SAPFiori.UIControlState) -> UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) open var borders: UIKit.UIRectEdge {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
}
extension SAPFiori.FUIBaseTableViewCell : SAPFiori.FUIStateSelectable, SAPFiori.FUIStateTintable {
}
@_hasMissingDesignatedInitializers public class ObservableArray<Element> : Swift.Sequence, Foundation.ObservableObject where Element : Combine.ObservableObject, Element : Swift.Hashable, Element : Swift.Identifiable {
  public typealias Observables = Swift.Array<Element>
  final public let objectWillChange: Combine.ObservableObjectPublisher
  public init()
  public func append(_ element: Element)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension SAPFiori.ObservableArray : Swift.Collection {
  public typealias Index = SAPFiori.ObservableArray<Element>.Observables.Index
  public typealias Element = SAPFiori.ObservableArray<Element>.Observables.Element
  public var startIndex: SAPFiori.ObservableArray<Element>.Index {
    get
  }
  public var endIndex: SAPFiori.ObservableArray<Element>.Index {
    get
  }
  public subscript(index: SAPFiori.ObservableArray<Element>.Index) -> Element {
    get
  }
  public func index(after i: SAPFiori.ObservableArray<Element>.Index) -> SAPFiori.ObservableArray<Element>.Index
  public typealias Indices = Swift.Range<SAPFiori.ObservableArray<Element>.Index>
  public typealias Iterator = Swift.IndexingIterator<SAPFiori.ObservableArray<Element>>
  public typealias SubSequence = Swift.Slice<SAPFiori.ObservableArray<Element>>
}
extension SAPFiori.ObservableArray : Swift.RandomAccessCollection {
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUITableViewAccessoryDrawingCollectionViewCell<InnerView> : SAPFiori.FUIBaseAccessoryDrawingCollectionViewCell<InnerView> where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIReactingToAccessory, InnerView : SAPFiori.FUIStyleByStringAttributes {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var accessoryType: UIKit.UITableViewCell.AccessoryType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public struct FUISegmentAttributes {
  public var textColor: UIKit.UIColor?
  public var font: UIKit.UIFont?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: UIKit.UIColor?
  public var backgroundColor: UIKit.UIColor?
  public init(textColor: UIKit.UIColor? = nil, font: UIKit.UIFont? = nil, borderWidth: CoreFoundation.CGFloat? = nil, borderColor: UIKit.UIColor? = nil, backgroundColor: UIKit.UIColor? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIOnboardingScanConfirmView : SAPFiori.NibDesignable {
  @_Concurrency.MainActor(unsafe) public var confirmationTitleString: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var confirmationMessageString: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var continueButtonTitleString: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var continueButtonWidth: CoreFoundation.CGFloat? {
    get
    set
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var continueButtonWidthConstraint: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor(unsafe) weak public var controller: SAPFiori.FUIOnboardingScanViewController? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var hcpServer: Swift.String! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUITextFieldCollectionViewCell : SAPFiori.FUIInlineValidationDrawingCollectionViewCell<SAPFiori.FUITextFieldContentView>, SAPFiori.FUIFormCell {
  @_Concurrency.MainActor(unsafe) open var keyName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var valueTextField: SAPFiori.FUITextField {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isStacked: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maxKeyWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var alternativeInputButton: SAPFiori.FUIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isAlternativeInputEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxTextLength: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((Swift.String) -> Swift.Void)? {
    get
    set
  }
  @available(*, deprecated, message: "This property is deprecated.  Please use `placeholder.text`.")
  @_Concurrency.MainActor(unsafe) open var placeholderText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var formatter: SAPFiori.FUIFormattedStringEditing? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isTrackingLiveChanges: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var valueTextAlignment: UIKit.NSTextAlignment? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hintText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isReadOnly: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hidesReadOnlyHint: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  @_Concurrency.MainActor(unsafe) public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  public typealias ValueType = Swift.String
  @objc deinit
}
public protocol FUIHierarchyViewDataSource : AnyObject {
  func rootUUID(in hierarchyView: SAPFiori.FUIHierarchyView) -> Swift.String?
  func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, numberOfChildrenForItemWith uuid: Swift.String) -> Swift.Int
  func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, uuidForChildItemAt index: Swift.Int, with parent: Swift.String) -> Swift.String
  func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, parentForItemWith uuid: Swift.String) -> Swift.String?
  func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, prefetchDataForItemsWith uuids: [Swift.String])
  func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, cellForItemWith uuid: Swift.String) -> SAPFiori.FUIHierarchyCollectionItem
  func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, titleForItemWith uuid: Swift.String) -> Swift.String?
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIImageCollectionViewCell : SAPFiori.FUIBaseItemCollectionViewCell<SAPFiori.FUIImageCollectionItemView> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public enum FUIColorDisplayMode : Swift.String, Swift.CaseIterable {
  case device
  case deviceInverse
  case normalConstant
  case highConstant
  public func inverse() -> SAPFiori.FUIColorDisplayMode
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SAPFiori.FUIColorDisplayMode]
  public typealias RawValue = Swift.String
  public static var allCases: [SAPFiori.FUIColorDisplayMode] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension SAPFiori.FUIColorDisplayMode : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISegmentedControlFormCell : SAPFiori.FUIInlineValidationDrawingTableViewCell<SAPFiori.FUISegmentedControlFormView> {
  @_Concurrency.MainActor(unsafe) public var keyLabel: SAPFiori.FUILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var value: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsEmptySelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var segmentWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var segmentHeight: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((Swift.Int) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valueOptions: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var apportionsSegmentWidthsByContent: Swift.Bool {
    get
    set
  }
  public typealias ValueType = Swift.Int
  @_Concurrency.MainActor(unsafe) public func setButtonAttributes(_ buttonAttributes: SAPFiori.FUISegmentedControlButtonAttributes, for state: SAPFiori.FUIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIModalLoadingIndicatorView : SAPFiori.NibDesignable {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var loadingIndicator: SAPFiori.FUILoadingIndicatorView! {
    get
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isAnimating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func show(inView view: UIKit.UIView, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func dismiss()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIListCardCollectionViewCell<ItemIdentifier> : SAPFiori.FUIBaseDrawingCollectionViewCell<SAPFiori.FUIListCardView<ItemIdentifier>> where ItemIdentifier : Swift.Hashable, ItemIdentifier : Swift.Identifiable {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol FUIEventViewComponent : SAPFiori.FUIAttributesConsumer {
  var eventViewColor: UIKit.UIColor? { get set }
  var eventViewStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUIEventViewComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var eventViewStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public protocol ChartThemePalette {
  var primary1: UIKit.UIColor { get set }
  var primary2: UIKit.UIColor { get set }
  var primary3: UIKit.UIColor { get set }
  var primary4: UIKit.UIColor { get set }
  var primary5: UIKit.UIColor { get set }
  var primary6: UIKit.UIColor { get set }
  var primary1Light: UIKit.UIColor { get set }
  var primary2Light: UIKit.UIColor { get set }
}
public class FUIChartStyle : Swift.Equatable {
  public init()
  weak public var chartView: SAPFiori.FUIChartView?
  public var _seriesPaletteInit: Swift.Bool {
    get
  }
  public var themePalette: SAPFiori.ChartThemePalette {
    get
    set
  }
  public static func == (lhs: SAPFiori.FUIChartStyle, rhs: SAPFiori.FUIChartStyle) -> Swift.Bool
  @objc deinit
}
public protocol FUIWhatsNewViewControllerDataSource : AnyObject {
  func presentationViewControllers(for whatsNewViewController: SAPFiori.FUIWhatsNewViewController) -> [UIKit.UIViewController]
  func presentationIndex(for whatsNewViewController: SAPFiori.FUIWhatsNewViewController) -> Swift.Int
}
public protocol FUIWhatsNewViewControllerDelegate : AnyObject {
  func whatsNewViewController(_ whatsNewViewController: SAPFiori.FUIWhatsNewViewController, willTransitionTo pendingViewControllerIndex: Swift.Int)
  func whatsNewViewController(_ whatsNewViewController: SAPFiori.FUIWhatsNewViewController, didFinishAnimating finished: Swift.Bool, previousViewControllerIndex: Swift.Int, transitionCompleted completed: Swift.Bool)
  func didFinishFlow(_ whatsNewViewController: SAPFiori.FUIWhatsNewViewController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIWhatsNewViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak open var dataSource: SAPFiori.FUIWhatsNewViewControllerDataSource?
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIWhatsNewViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) public var viewControllers: [UIKit.UIViewController] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isButtonHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isCloseButtonHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var startButtonTitle: SAPFiori.FUIText {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nextButtonTitle: SAPFiori.FUIText {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var presentationIndex: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SAPFiori.FUIWhatsNewViewController : UIKit.UIPageViewControllerDataSource, UIKit.UIPageViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, willTransitionTo pendingViewControllers: [UIKit.UIViewController])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIWhatsNewDetailPageController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) open var isImageExpanded: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var imageViewSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let imageView: SAPFiori.FUIImageView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: SAPFiori.FUILabel
  @_Concurrency.MainActor(unsafe) final public let descriptionTextView: UIKit.UITextView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIWhatsNewDetailListController : UIKit.UIViewController, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView! {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIWhatsNewCollectionViewCell : SAPFiori.FUIBaseDrawingCollectionViewCell<SAPFiori.FUIWhatsNewCollectionItemView> {
  @_Concurrency.MainActor(unsafe) public var detailImageViewSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIWhatsNewCollectionItemView : SAPFiori.FUIObjectView {
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIObjectViewBaseComponent {
  public var headlineLabel: SAPFiori.FUILabel {
    get
  }
  public var subheadlineLabel: SAPFiori.FUILabel {
    get
  }
  public var footnoteLabel: SAPFiori.FUILabel {
    get
  }
  public var descriptionLabel: SAPFiori.FUILabel {
    get
  }
  public var statusLabel: SAPFiori.FUILabel {
    get
  }
  public var substatusLabel: SAPFiori.FUILabel {
    get
  }
  public var statusImageView: SAPFiori.FUIImageView {
    get
  }
  public var substatusImageView: SAPFiori.FUIImageView {
    get
  }
  public var detailImageView: SAPFiori.FUIImageView {
    get
  }
  public var avatars: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
  public var avatarSize: CoreFoundation.CGSize {
    get
    set
  }
  public var avatarBorderWidth: CoreFoundation.CGFloat {
    get
    set
  }
  public var avatarBorderColor: UIKit.UIColor {
    get
    set
  }
  public var isAvatarCircular: Swift.Bool {
    get
    set
  }
  public var indicatorImageView: SAPFiori.FUIImageView {
    get
  }
  public var indicatorImageViewSize: CoreFoundation.CGSize {
    get
    set
  }
  public var splitPercent: CoreFoundation.CGFloat {
    get
    set
  }
  public var isApplyingSplitPercent: Swift.Bool {
    get
    set
  }
  public var statusDisplayMode: SAPFiori.FUIStatusDisplayMode {
    get
    set
  }
  public var substatusDisplayMode: SAPFiori.FUISubstatusDisplayMode {
    get
    set
  }
  public var showDescriptionInCompact: Swift.Bool {
    get
    set
  }
}
public protocol FUISubtitleComponent : SAPFiori.FUISubtitleBaseComponent where Self.SubtitleText : SAPFiori.FUIText {
  var subtitle: SAPFiori.FUIText { get }
}
public protocol FUISubtitleMultiLineComponent : SAPFiori.FUISubtitleBaseComponent where Self.SubtitleText : SAPFiori.FUIMultiLineText {
  var subtitle: SAPFiori.FUIMultiLineText { get }
}
public protocol FUISubtitleBaseComponent : SAPFiori.FUIAttributesConsumer {
  associatedtype SubtitleText : SAPFiori.FUITextProtocol
  var subtitle: Self.SubtitleText { get }
  var subtitleAttributedText: Foundation.NSAttributedString! { get set }
  var subtitleStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUISubtitleBaseComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var subtitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension SAPFiori.FUISubtitleBaseComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var subtitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var nuiClass: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var styleClassPath: [SAPFiori.FioriStyle]? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIRoundedFillButton : SAPFiori.FUIButton {
  @_Concurrency.MainActor(unsafe) override public var style: SAPFiori.FUIButtonStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(style: SAPFiori.FUIButtonStyle)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
public struct FUISearchTag : Swift.Hashable {
  public let text: Swift.String
  public init(_ text: Swift.String)
  public func equals(_ other: SAPFiori.FUISearchTag) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func == (lhs: SAPFiori.FUISearchTag, rhs: SAPFiori.FUISearchTag) -> Swift.Bool
public struct FUIHierarchyState : Swift.Hashable {
  public let isSelected: Swift.Bool
  public static let normal: SAPFiori.FUIHierarchyState
  public static let selected: SAPFiori.FUIHierarchyState
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SAPFiori.FUIHierarchyState, b: SAPFiori.FUIHierarchyState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension SAPFiori.FUIHierarchyState : SAPFiori.Enableable {
  public static var defaultEnabled: SAPFiori.FUIHierarchyState
}
extension SAPFiori.FUIHierarchyState : SAPFiori.Defaultable {
  public static var `default`: SAPFiori.FUIHierarchyState
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIHierarchyIndicator : SAPFiori.FUITintableDrawingView<SAPFiori.FUIHierarchyState>, SAPFiori.FUITitleComponent {
  @_Concurrency.MainActor(unsafe) final public let title: SAPFiori.FUIText
  @objc @_Concurrency.MainActor(unsafe) dynamic open var isMultiline: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var didTapHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
public protocol FUIAttachmentsViewControllerDataSource : AnyObject {
  func numberOfAttachments(in attachmentsViewController: SAPFiori.FUIAttachmentsViewController) -> Swift.Int
  func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, iconForAttachmentAtIndex index: Swift.Int) -> (image: UIKit.UIImage, contentMode: SAPFiori.UIViewContentMode)?
  func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, urlForAttachmentAtIndex index: Swift.Int) -> Foundation.URL?
}
extension SAPFiori.FUIAttachmentsViewControllerDataSource {
  public func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, iconForAttachmentAtIndex index: Swift.Int) -> (image: UIKit.UIImage, contentMode: SAPFiori.UIViewContentMode)?
  public func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, urlForAttachmentAtIndex index: Swift.Int) -> Foundation.URL?
}
public enum FUIColorStyle : Swift.String, Swift.CaseIterable {
  case grey1
  case grey2
  case grey3
  case grey4
  case grey5
  case grey6
  case grey7
  case grey8
  case grey9
  case grey10
  case grey11
  case blue1
  case blue2
  case blue3
  case blue4
  case blue5
  case blue6
  case blue7
  case blue8
  case blue9
  case blue10
  case blue11
  case teal1
  case teal2
  case teal3
  case teal4
  case teal5
  case teal6
  case teal7
  case teal8
  case teal9
  case teal10
  case teal11
  case green1
  case green2
  case green3
  case green4
  case green5
  case green6
  case green7
  case green8
  case green9
  case green10
  case green11
  case mango1
  case mango2
  case mango3
  case mango4
  case mango5
  case mango6
  case mango7
  case mango8
  case mango9
  case mango10
  case mango11
  case red1
  case red2
  case red3
  case red4
  case red5
  case red6
  case red7
  case red8
  case red9
  case red10
  case red11
  case pink1
  case pink2
  case pink3
  case pink4
  case pink5
  case pink6
  case pink7
  case pink8
  case pink9
  case pink10
  case pink11
  case raspberry1
  case raspberry2
  case raspberry3
  case raspberry4
  case raspberry5
  case raspberry6
  case raspberry7
  case raspberry8
  case raspberry9
  case raspberry10
  case raspberry11
  case indigo1
  case indigo2
  case indigo3
  case indigo4
  case indigo5
  case indigo6
  case indigo7
  case indigo8
  case indigo9
  case indigo10
  case indigo11
  case baseWhite
  case baseBlack
  case base1
  case base2
  case accentLabel1
  case accentLabel2
  case accentLabel3
  case accentLabel4
  case accentLabel5
  case accentLabel6
  case accentLabel7
  case accentLabel8
  case accentLabel9
  case accentLabel10
  case accentBackground1
  case accentBackground2
  case accentBackground3
  case accentBackground4
  case accentBackground5
  case accentBackground6
  case accentBackground7
  case accentBackground8
  case accentBackground9
  case accentBackground10
  case cardShadow
  case sectionShadow
  case primaryGroupedBackground
  case secondaryGroupedBackground
  case tertiaryGroupedBackground
  case primaryBackground
  case secondaryBackground
  case tertiaryBackground
  case primaryLabel
  case secondaryLabel
  case tertiaryLabel
  case quaternaryLabel
  case primaryFill
  case secondaryFill
  case tertiaryFill
  case quaternaryFill
  case tintColor
  case tintColor2
  case tintColorTapState
  case negativeLabel
  case positiveLabel
  case criticalLabel
  case negativeLabelTapState
  case positiveLabelTapState
  case criticalLabelTapState
  case negativeBackground
  case positiveBackground
  case criticalBackground
  case informationBackground
  case negativeBackgroundTapState
  case positiveBackgroundTapState
  case criticalBackgroundTapState
  case informationBackgroundTapState
  case separator
  case separatorOpaque
  case header
  case headerBlended
  case barTransparent
  case contrastElement
  case footer
  case cellBackground
  case chart1
  case chart2
  case chart3
  case chart4
  case chart5
  case chart6
  case chart7
  case chart8
  case chart9
  case chart10
  case chart11
  case stockUpStroke
  case stockDownStroke
  case map1
  case map2
  case map3
  case map4
  case map5
  case map6
  case map7
  case map8
  case map9
  case map10
  case customColor1
  case customColor2
  case customColor3
  case customColor4
  case customColor5
  case customColor6
  case esriEdit
  @available(*, deprecated, renamed: "quaternaryLabel")
  case quarternaryLabel
  @available(*, deprecated, renamed: "quaternaryFill")
  case quarternaryFill
  @available(*, deprecated, renamed: "header")
  case shell
  @available(*, deprecated, renamed: "primaryGroupedBackground")
  case background1
  @available(*, deprecated, renamed: "tertiaryGroupedBackground")
  case background2
  @available(*, deprecated, renamed: "separatorOpaque")
  case line
  @available(*, deprecated, renamed: "primaryLabel")
  case primary1
  @available(*, deprecated, renamed: "secondaryLabel")
  case primary2
  @available(*, deprecated, renamed: "tertiaryLabel")
  case primary3
  @available(*, deprecated, renamed: "secondaryFill")
  case primary4
  @available(*, deprecated, renamed: "footer")
  case primary5
  @available(*, deprecated, renamed: "secondaryGroupedBackground")
  case primary6
  @available(*, deprecated, renamed: "quaternaryLabel")
  case primary7
  @available(*, deprecated, renamed: "barTransparent")
  case primary8
  @available(*, deprecated, renamed: "separator")
  case primary9
  @available(*, deprecated, renamed: "contrastElement")
  case primary10
  @available(*, deprecated, renamed: "tintColor")
  case tintColorLight
  @available(*, deprecated, renamed: "tintColor2")
  case tintColorDark
  @available(*, deprecated, renamed: "tintColorTapStateLight")
  case tintColorTapStateLight
  @available(*, deprecated, renamed: "tintColorTapStateDark")
  case tintColorTapStateDark
  @available(*, deprecated, renamed: "quaternaryFill")
  case cellBackgroundTapState
  @available(*, deprecated, renamed: "cardShadow")
  case shadow
  @available(*, deprecated, renamed: "negativeLabel")
  case negative
  @available(*, deprecated, renamed: "positiveLabel")
  case positive
  @available(*, deprecated, renamed: "criticalLabel")
  case critical
  @available(*, deprecated, renamed: "mango3")
  case accent1
  @available(*, deprecated, renamed: "mango4")
  case accent1b
  @available(*, deprecated, renamed: "red4")
  case accent2
  @available(*, deprecated, renamed: "red5")
  case accent2b
  @available(*, deprecated, renamed: "pink5")
  case accent3
  @available(*, deprecated, renamed: "pink6")
  case accent4
  @available(*, deprecated, renamed: "indigo6")
  case accent5
  @available(*, deprecated, renamed: "blue6")
  case accent6
  @available(*, deprecated, renamed: "blue7")
  case accent6b
  @available(*, deprecated, renamed: "teal4")
  case accent7
  @available(*, deprecated, renamed: "teal5")
  case accent7b
  @available(*, deprecated, renamed: "green4")
  case accent8
  @available(*, deprecated, renamed: "indigo5")
  case accent9
  @available(*, deprecated, renamed: "grey5")
  case accent10
  @available(*, deprecated, renamed: "grey4")
  case accent10b
  @available(*, deprecated, renamed: "header")
  case navigationBar
  @available(*, deprecated, renamed: "header")
  case backgroundGradientTop
  @available(*, deprecated, renamed: "header")
  case backgroundGradientBottom
  @available(*, deprecated, renamed: "primaryBackground")
  case backgroundBase
  public static var allCases: [SAPFiori.FUIColorStyle]
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SAPFiori.FUIColorStyle]
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol FUIChartViewDataSource : AnyObject {
  func numberOfSeries(in: SAPFiori.FUIChartView) -> Swift.Int
  func chartView(_ chartView: SAPFiori.FUIChartView, numberOfValuesInSeries seriesIndex: Swift.Int) -> Swift.Int
  func chartView(_ chartView: SAPFiori.FUIChartView, valueForSeries seriesIndex: Swift.Int, category categoryIndex: Swift.Int, dimension dimensionIndex: Swift.Int) -> Swift.Double?
  func chartView(_ chartView: SAPFiori.FUIChartView, titleForAxis axis: SAPFiori.FUIChartAxisId) -> Swift.String?
  func chartView(_ chartView: SAPFiori.FUIChartView, formattedStringForValue value: Swift.Double, axis: SAPFiori.FUIChartAxisId) -> Swift.String?
  func chartView(_ chartView: SAPFiori.FUIChartView, titleForCategory categoryIndex: Swift.Int, inSeries seriesIndex: Swift.Int) -> Swift.String?
}
extension SAPFiori.FUIChartViewDataSource {
  public func chartView(_ chartView: SAPFiori.FUIChartView, titleForAxis axis: SAPFiori.FUIChartAxisId) -> Swift.String?
  public func chartView(_ chartView: SAPFiori.FUIChartView, formattedStringForValue value: Swift.Double, axis: SAPFiori.FUIChartAxisId) -> Swift.String?
  public func chartView(_ chartView: SAPFiori.FUIChartView, titleForCategory categoryIndex: Swift.Int, inSeries seriesIndex: Swift.Int) -> Swift.String?
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUICardBaseView : SAPFiori.FUIKPITitleBaseView, SAPFiori.FUIStatusComponent {
  @_Concurrency.MainActor(unsafe) public var longPressGestureRecognizer: UIKit.UILongPressGestureRecognizer! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var status: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias StatusText = SAPFiori.FUIText
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISwitchCollectionViewCell : SAPFiori.FUIInlineValidationDrawingCollectionViewCell<SAPFiori.FUISwitchFormView> {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  public typealias ValueType = Swift.Bool
  @_Concurrency.MainActor(unsafe) public var value: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.Bool) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isUpdatingTableView: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, message: "This property has been removed.  Use the `title` property.")
  @_Concurrency.MainActor(unsafe) public var keyLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var switchView: UIKit.UISwitch {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityActivate() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIMapToolbarButton : SAPFiori.FUIButton {
  @available(*, deprecated, message: "Will be unavailble in newer SDK version.")
  @_Concurrency.MainActor(unsafe) override public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var type: SAPFiori.FUIMapToolbarButtonType {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(type: SAPFiori.FUIMapToolbarButtonType)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUILabel : UIKit.UILabel, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((Swift.Optional<Swift.String>) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) open var insets: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func drawText(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var numberOfLines: Swift.Int {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var textColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var font: UIKit.UIFont! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isUserInteractionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(_ sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resignFirstResponder() -> Swift.Bool
  @objc deinit
}
public struct FUICollectionCellSize : Swift.Equatable {
  public static let small: SAPFiori.FUICollectionCellSize
  public static let standard: SAPFiori.FUICollectionCellSize
  public static func == (a: SAPFiori.FUICollectionCellSize, b: SAPFiori.FUICollectionCellSize) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIKPIProgressView : SAPFiori.NibDesignableControl, SAPFiori.FUIKPIContainer, SAPFiori.FUIStateTintable, SAPFiori.FUIStateTintableImplementation {
  @available(*, unavailable, message: "This property is no longer required")
  @_Concurrency.MainActor(unsafe) public var shouldCenterKPIView: Swift.Bool
  @available(*, unavailable, message: "It is not required to set this property when adding FUIKPIProgressView items to the FUIKPIHeader")
  @_Concurrency.MainActor(unsafe) public var isArrangedInKPIHeader: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var metric: Swift.Int
  @_Concurrency.MainActor(unsafe) public var metricFormatter: Foundation.NumberFormatter?
  @_Concurrency.MainActor(unsafe) public var fractionFormatter: Foundation.NumberFormatter?
  @_Concurrency.MainActor(unsafe) public var animationDuration: Swift.Float
  @_Concurrency.MainActor(unsafe) open var didSelectHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var isDisplayingCaptionOutsideCircle: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var isLarge: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @available(*, deprecated, message: "Will be unavailble in newer SDK version.")
  @_Concurrency.MainActor(unsafe) public var colorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateConstraints()
  @_Concurrency.MainActor(unsafe) open var chartSize: SAPFiori.FUIKPIProgressViewSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var progress: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var captionLabelText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var items: [SAPFiori.FUIKPIViewItem]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func applyTintColor(forState state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var forFirstBaselineLayout: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var forLastBaselineLayout: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var tintColorForState: [SAPFiori.UIControlState : UIKit.UIColor]
  @_Concurrency.MainActor(unsafe) public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) public func setTextColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) public func tintColor(for state: SAPFiori.UIControlState) -> UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public var _isTintColorOverridden: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var tintableChildren: [SAPFiori.FUIStateTintable]
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isUserInteractionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(_ sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resignFirstResponder() -> Swift.Bool
  @objc deinit
}
public enum FUIKPIProgressViewSize {
  case small
  case large
  public static func == (a: SAPFiori.FUIKPIProgressViewSize, b: SAPFiori.FUIKPIProgressViewSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SAPFiori.FUIKPIProgressView : SAPFiori.FUIStateSelectable {
}
@_inheritsConvenienceInitializers open class FUIGridRowHeaderItem : SAPFiori.FUIGridRowTextItem {
  override public var type: SAPFiori.FUIGridRowItemType {
    get
  }
  override public init(text: Swift.String)
  override public init(number: Foundation.NSNumber, formatter: Foundation.NumberFormatter? = nil)
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIFootnoteMultiLineComponent {
  public var footnote: SAPFiori.FUIMultiLineText {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIFootnoteComponent {
  public var footnote: SAPFiori.FUIText {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIFootnoteBaseComponent {
  public var footnoteAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var footnoteStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@_hasMissingDesignatedInitializers @available(*, unavailable, message: "Obsoleted, not released in 1.1")
open class FUITableViewSection {
  @objc deinit
}
public protocol FUISeriesTitleComponent : SAPFiori.FUIAttributesConsumer {
  var seriesTitles: [SAPFiori.FUIText] { get set }
  var seriesTitlesAttributedText: Foundation.NSAttributedString! { get set }
  var seriesTitlesStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUISeriesTitleComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var seriesTitlesStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@available(*, unavailable, message: "delegate has been obsoleted; implement the `onActivitySelectedHandler`, instead")
public protocol FUIContactCellDelegate : AnyObject {
  func contactCell(_ contactCell: SAPFiori.FUIContactCell, didSelectActivity activityItem: SAPFiori.FUIActivityItem)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIContactCell : SAPFiori.NibDesignableFUIBaseTableViewCell, SAPFiori.FUIActivityControlDelegate, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isCompactLargeSize: Swift.Bool {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var detailImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var headlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var subheadlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var descriptionLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var activityControl: SAPFiori.FUIActivityControl! {
    get
  }
  @_Concurrency.MainActor(unsafe) open var onActivitySelectedHandler: ((SAPFiori.FUIActivityItem) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var splitPercent: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isContentCopyable: Swift.Bool {
    get
    set
  }
  @available(*, unavailable, renamed: "splitPercent")
  @_Concurrency.MainActor(unsafe) public var mainStackWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func activityControl(_ activityControl: SAPFiori.FUIActivityControl, didSelectActivity activityItem: SAPFiori.FUIActivityItem)
  @_Concurrency.MainActor(unsafe) public var preserveDetailImageSpacing: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var headlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var subheadlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var detailImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var ibDisplayActivityControl: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public protocol FUIUserConsentPageComponent : SAPFiori.FUIActionTitleComponent, SAPFiori.FUIBodyMultiLineComponent, SAPFiori.FUITitleComponent {
  var actionHandler: ((SAPFiori.FUIUserConsentPageViewController) -> Swift.Void)? { get set }
  var bodyDataDetectorTypes: UIKit.UIDataDetectorTypes { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIModalProcessingIndicatorView : SAPFiori.NibDesignable {
  public enum BackgroundMode {
    case translucentWhite
    case blurred
    public static func == (a: SAPFiori.FUIModalProcessingIndicatorView.BackgroundMode, b: SAPFiori.FUIModalProcessingIndicatorView.BackgroundMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var processingIndicator: SAPFiori.FUIProcessingIndicatorView! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var backgroundMode: SAPFiori.FUIModalProcessingIndicatorView.BackgroundMode {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isAnimating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func show(inView view: UIKit.UIView, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func dismiss(animated: Swift.Bool = true)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIListPickerCollectionViewCell : SAPFiori.FUIInlineValidationDrawingCollectionViewCell<SAPFiori.FUIListPickerFormView> {
  @_Concurrency.MainActor(unsafe) public var valueText: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    get
    set
  }
  public typealias ValueType = [Swift.Int]
  @_Concurrency.MainActor(unsafe) public var value: [Swift.Int] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var alwaysShowValueTextOnBottom: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: (([Swift.Int]) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onUuidChangeHandler: (([Swift.String]) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var valueOptions: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var uuidValues: [Swift.String]
  @_Concurrency.MainActor(unsafe) public var isTrackingLiveChanges: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isUndoEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var listPicker: SAPFiori.FUIListPicker {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsMultipleSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsEmptySelection: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isPickerDismissedOnSelection: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var presentsListPickerModally: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NUISettings : ObjectiveC.NSObject {
  public static var instance: SAPFiori.NUISettings!
  public static func initWithStylesheet(name: Swift.String) throws
  public static func appendStylesheet(name: Swift.String) throws
  public static func loadStylesheetByPath(path: Swift.String) throws
  public static func loadStylesheetByURL(url: Foundation.URL) throws
  public static func loadStylesheetByString(content: Swift.String) throws
  public static func reloadStylesheets()
  public static func reloadStylesheetsOnOrientationChange(orientation: UIKit.UIInterfaceOrientation) -> Swift.Bool
  public static func autoUpdateIsEnabled() -> Swift.Bool
  public static func autoUpdatePath() -> Swift.String?
  public static func setAutoUpdatePath(path: Swift.String)
  public static func hasProperty(property: Swift.String, withExplicitClass className: Swift.String) -> Swift.Bool
  public static func hasProperty(property: Swift.String, withClass className: Swift.String) -> Swift.Bool
  public static func hasFontPropertiesWithClass(className: Swift.String) -> Swift.Bool
  public static func get(property: Swift.String, withExplicitClass className: Swift.String) -> Swift.String?
  public static func get(property: Swift.String, withClass className: Swift.String) -> Swift.String?
  public static func getBoolean(property: Swift.String, withClass className: Swift.String) -> Swift.Bool
  public static func getFloat(property: Swift.String, withClass className: Swift.String) -> Swift.Float?
  public static func getInteger(property: Swift.String, withClass className: Swift.String) -> Swift.Int?
  public static func getSize(property: Swift.String, withClass className: Swift.String) -> CoreFoundation.CGSize?
  public static func getOffset(property: Swift.String, withClass className: Swift.String) -> UIKit.UIOffset?
  public static func getEdgeInsets(property: Swift.String, withClass className: Swift.String) -> UIKit.UIEdgeInsets?
  public static func getBorderStyle(property: Swift.String, withClass className: Swift.String) -> SAPFiori.UITextBorderStyle
  public static func getSeparatorStyle(property: Swift.String, withClass className: Swift.String) -> SAPFiori.UITableViewCellSeparatorStyle
  public static func getFontWithClass(className: Swift.String) -> UIKit.UIFont?
  public static func getFontWithClass(className: Swift.String, baseFont: UIKit.UIFont?, withSuffix suffix: Swift.String? = nil) -> UIKit.UIFont
  public static func getColor(property: Swift.String, withClass className: Swift.String) -> UIKit.UIColor?
  public static func getColorFromImage(property: Swift.String, withClass className: Swift.String) -> UIKit.UIColor?
  public static func getImageFromColor(property: Swift.String, withClass className: Swift.String) -> UIKit.UIImage?
  public static func getImage(property: Swift.String, withClass className: Swift.String) -> UIKit.UIImage?
  public static func getContentMode(property: Swift.String, withClass className: Swift.String) -> UIKit.UIView.ContentMode?
  public static func getBarStyle(property: Swift.String, withClass className: Swift.String) -> UIKit.UIBarStyle
  public static func getTextAlignment(property: Swift.String, withClass className: Swift.String) -> UIKit.NSTextAlignment
  public static func getControlContentHorizontalAlignment(property: Swift.String, withClass className: Swift.String) -> SAPFiori.UIControlContentHorizontalAlignment
  public static func getControlContentVerticalAlignment(property: Swift.String, withClass className: Swift.String) -> SAPFiori.UIControlContentVerticalAlignment
  public static func getKeyboardAppearance(property: Swift.String, withClass className: Swift.String) -> UIKit.UIKeyboardAppearance
  public static func getClasses(className: Swift.String) -> [Swift.String]
  public static func setGlobalExclusions(array: [Swift.String])
  public static func getGlobalExclusions() -> [Swift.String]
  public static func stylesheetOrientation() -> Swift.String?
  public static func stylesheetOrientationFromInterfaceOrientation(orientation: UIKit.UIInterfaceOrientation) -> Swift.String
  public var stylesheetName: Swift.String? {
    get
  }
  public static func getInstance() -> SAPFiori.NUISettings
  @objc override dynamic public init()
  @objc deinit
}
public protocol FUIChartItemComponent {
  var indexesOfColumnSeries: Foundation.IndexSet? { get set }
  var indexesOfTotalsCategories: Foundation.IndexSet? { get set }
  var indexesOfSecondaryValueAxis: Foundation.IndexSet? { get set }
  var numericAxis: SAPFiori.FUIChartNumericAxis { get }
  var secondaryNumericAxis: SAPFiori.FUIChartNumericAxis { get }
  var categoryAxis: SAPFiori.FUIChartCategoryAxis { get }
  var series: SAPFiori.FUIChartSeriesCollection { get }
  func plotItem(at location: CoreFoundation.CGPoint) -> SAPFiori.FUIChartPlotItem?
  func plotItem(at series: Swift.Int, category: Swift.Int) -> SAPFiori.FUIChartPlotItem?
}
extension SAPFiori.FUIChartItemComponent {
  public func plotItem(at location: CoreFoundation.CGPoint) -> SAPFiori.FUIChartPlotItem?
  public func plotItem(at series: Swift.Int, category: Swift.Int) -> SAPFiori.FUIChartPlotItem?
}
@_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIChartLegendTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIChartLegendView> {
  @_Concurrency.MainActor(unsafe) public var seriesColor: [UIKit.UIColor] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIListCardContentView<ItemIdentifier> : SAPFiori.FUIBaseDrawingView, SAPFiori.FUIListCardComponent, UIKit.UITableViewDelegate where ItemIdentifier : Swift.Hashable, ItemIdentifier : Swift.Identifiable {
  @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func setup()
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) public var cellTappedHandler: ((Foundation.IndexPath, ItemIdentifier) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var dataSource: UIKit.UITableViewDiffableDataSource<Swift.Int, ItemIdentifier>!
  @_Concurrency.MainActor(unsafe) public var cellProvider: ((UIKit.UITableView, Foundation.IndexPath, ItemIdentifier) -> UIKit.UITableViewCell)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func register(_ cellClass: Swift.AnyClass?, forCellReuseIdentifier identifier: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setItems(_ items: [ItemIdentifier])
  @_Concurrency.MainActor(unsafe) public func appendItems(_ items: [ItemIdentifier])
  @_Concurrency.MainActor(unsafe) public func deleteItems(_ items: [ItemIdentifier])
  @_Concurrency.MainActor(unsafe) public func deleteAllItems()
  @_Concurrency.MainActor(unsafe) public func insertItems(_ items: [ItemIdentifier], beforeItem: ItemIdentifier)
  @_Concurrency.MainActor(unsafe) public func insertItems(_ items: [ItemIdentifier], afterItem: ItemIdentifier)
  @_Concurrency.MainActor(unsafe) public func moveItem(_ item: ItemIdentifier, beforeItem: ItemIdentifier)
  @_Concurrency.MainActor(unsafe) public func moveItem(_ item: ItemIdentifier, afterItem: ItemIdentifier)
  @_Concurrency.MainActor(unsafe) public func reloadItems(_ items: [ItemIdentifier])
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public struct FUITableImageItem : SAPFiori.FUITableItem {
  public let type: SAPFiori.FUIDataItemType
  public let binding: SAPFiori.ObjectViewProperty.Image?
  public let image: UIKit.UIImage
  public var tintColor: UIKit.UIColor?
  public init(_ image: UIKit.UIImage, _ tintColor: UIKit.UIColor? = nil, _ binding: SAPFiori.ObjectViewProperty.Image? = nil)
}
extension UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public func optParentUICollectionView() -> UIKit.UICollectionView?
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISegmentedControlCollectionViewCell : SAPFiori.FUIInlineValidationDrawingCollectionViewCell<SAPFiori.FUISegmentedControlFormView>, SAPFiori.FUIFormCell {
  @_Concurrency.MainActor(unsafe) public var keyLabel: SAPFiori.FUILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var value: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsEmptySelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var segmentWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var segmentHeight: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((Swift.Int) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valueOptions: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var apportionsSegmentWidthsByContent: Swift.Bool {
    get
    set
  }
  public typealias ValueType = Swift.Int
  @_Concurrency.MainActor(unsafe) public func setButtonAttributes(_ buttonAttributes: SAPFiori.FUISegmentedControlButtonAttributes, for state: SAPFiori.FUIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol FUIFormCell : AnyObject, SAPFiori.FUIInlineValidation {
  associatedtype ValueType
  var value: Self.ValueType { get set }
  var isEditable: Swift.Bool { get set }
  var onChangeHandler: ((Self.ValueType) -> Swift.Void)? { get set }
}
@available(*, unavailable, message: "`FUIFormCellDelegate` protocol has been removed.  Implement the `onChangeHandler` closure, to handle value changes.")
public protocol FUIFormCellDelegate : AnyObject {
  func didChangeValue<T>(in formCell: T) where T : SAPFiori.FUIFormCell
}
@available(*, unavailable, message: "`FUIFormCellDelegate` protocol has been removed.  Implement the `onChangeHandler` closure, to handle value changes.")
public protocol FormCellDelegate : AnyObject {
  func didChangeValue<T>(in formCell: T) where T : SAPFiori.FUIFormCell
}
public protocol FUITakePhotoAttachmentActionDelegate : AnyObject {
  func takePhotoAttachmentAction(_ action: SAPFiori.FUITakePhotoAttachmentAction, didTakePhoto asset: Photos.PHAsset, at url: Foundation.URL)
  func takePhotoAttachmentAction(_ action: SAPFiori.FUITakePhotoAttachmentAction, didTakePhoto image: UIKit.UIImage)
  func takePhotoAttachmentAction(_ action: SAPFiori.FUITakePhotoAttachmentAction, didTakeVideo url: Foundation.URL)
}
extension SAPFiori.FUITakePhotoAttachmentActionDelegate {
  public func takePhotoAttachmentAction(_ action: SAPFiori.FUITakePhotoAttachmentAction, didTakePhoto image: UIKit.UIImage)
  public func takePhotoAttachmentAction(_ action: SAPFiori.FUITakePhotoAttachmentAction, didTakeVideo url: Foundation.URL)
}
open class FUITakePhotoAttachmentAction : SAPFiori.FUIAttachmentAction {
  final public let title: Swift.String
  weak open var delegate: SAPFiori.FUITakePhotoAttachmentActionDelegate?
  open var isSavedToCameraRoll: Swift.Bool
  open var mediaTypes: [Swift.String]?
  public init(withTitle title: Swift.String? = nil)
  open func action(onController controller: SAPFiori.FUIAttachmentsViewController)
  open func isAvailable(_ alertAction: UIKit.UIAlertAction) -> Swift.Bool
  @objc deinit
}
public enum FUIBarcodeScannerError : Swift.Error, Swift.Equatable {
  case deviceNotSupported(error: Foundation.NSError)
}
extension SAPFiori.FUIBarcodeScannerError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public func == (lhs: SAPFiori.FUIBarcodeScannerError, rhs: SAPFiori.FUIBarcodeScannerError) -> Swift.Bool
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIGridTableViewHeaderFooterView : SAPFiori.FUIBaseTableViewHeaderFooterView, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) public var items: [SAPFiori.FUIGridRowItem]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var columnWidth: [CoreFoundation.CGFloat]?
  @_Concurrency.MainActor(unsafe) public var columnWidthPercent: [CoreFoundation.CGFloat]?
  @_Concurrency.MainActor(unsafe) public var spacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var useColumnLayoutInCompact: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol FUIChartSelectionComponent {
  var selectionMode: SAPFiori.FUIChartSelectionMode { get set }
  var defaultCategorySelectionMode: SAPFiori.ChartDefaultCategorySelectionMode { get set }
  var selectionRequired: Swift.Bool { get set }
  var selections: [SAPFiori.FUIChartPlotItem]? { get }
  func select(category categoryIndex: Swift.Int)
  func select(categoriesInRange range: Swift.ClosedRange<Swift.Int>)
  func select(series seriesIndex: Swift.Int)
  func selectNextSeries()
  func select(dimension dimensionIndex: Swift.Int)
  func clearSelections()
}
extension SAPFiori.FUIChartSelectionComponent {
  public func select(category categoryIndex: Swift.Int)
  public func select(categoriesInRange range: Swift.ClosedRange<Swift.Int>)
  public func select(series seriesIndex: Swift.Int)
  public func selectNextSeries()
  public func select(dimension dimensionIndex: Swift.Int)
  public func clearSelections()
}
public protocol FUIEnabledComponent : AnyObject {
  var isEnabled: Swift.Bool { get set }
}
extension SAPFiori.FUIBaseDrawingCollectionViewCell where InnerView : SAPFiori.FUIEnabledComponent {
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIFormTableViewController : UIKit.UITableViewController {
  @_Concurrency.MainActor(unsafe) public var effectiveNavigationController: UIKit.UINavigationController? {
    get
    set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) public func cellToBecomeFirstResponder<T>(sender: T) -> Swift.Bool where T : SAPFiori.FUIFormCell
  @_Concurrency.MainActor(unsafe) public func navigationControllerPresent(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func navigationControllerPush(_ viewControllerToPush: UIKit.UIViewController, animated flag: Swift.Bool)
}
extension SAPFiori.FUIMapToolbar {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ZoomExtentButton : SAPFiori.FUIMapToolbarButton {
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) override public init(type: SAPFiori.FUIMapToolbarButtonType)
    @_Concurrency.MainActor(unsafe) convenience public init(mapView: MapKit.MKMapView)
    @available(*, unavailable, message: "Use the new initializer with MKMapView type")
    @_Concurrency.MainActor(unsafe) convenience public init(mapView: UIKit.UIView)
    @_Concurrency.MainActor(unsafe) weak public var mapView: MapKit.MKMapView?
    @objc deinit
  }
}
@available(*, unavailable, renamed: "FUIMapToolbar.ZoomExtentButton")
public typealias FUIMapToolbarZoomExtentButton = SAPFiori.FUIMapToolbar.ZoomExtentButton
public protocol FUIPoint : SAPFiori.FUIGeometry {
  var x: Swift.Double { get }
  var y: Swift.Double { get }
}
extension MapKit.MKPointAnnotation : SAPFiori.FUIPoint {
  public var x: Swift.Double {
    get
  }
  public var y: Swift.Double {
    get
  }
}
public enum FUIMapToolbarButtonType {
  case settings
  case userLocation
  case clearAll
  case legend
  case zoomExtent
  case plain
  public static func == (a: SAPFiori.FUIMapToolbarButtonType, b: SAPFiori.FUIMapToolbarButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct FUIHexColor : Swift.Hashable {
  public init(lightColor: Swift.String? = nil, darkColor: Swift.String? = nil, elevatedLightColor: Swift.String? = nil, elevatedDarkColor: Swift.String? = nil, contrastLightColor: Swift.String? = nil, contrastDarkColor: Swift.String? = nil, elevatedContrastLightColor: Swift.String? = nil, elevatedContrastDarkColor: Swift.String? = nil)
  public func rgba(_ hexString: Swift.String) -> (r: Swift.Double, g: Swift.Double, b: Swift.Double, a: Swift.Double)
  public func hex(_ variant: SAPFiori.FUIColorVariant) -> Swift.String
  public func getVariant(traits collection: UIKit.UITraitCollection, background scheme: SAPFiori.FUIBackgroundColorScheme? = .device, interface level: SAPFiori.FUIInterfaceLevel? = .device, display mode: SAPFiori.FUIColorDisplayMode? = .device) -> SAPFiori.FUIColorVariant
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SAPFiori.FUIHexColor : Swift.Equatable {
  public static func == (lhs: SAPFiori.FUIHexColor, rhs: SAPFiori.FUIHexColor) -> Swift.Bool
}
extension SAPFiori.FUIHexColor : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIKPICardCollectionViewCell : SAPFiori.FUIBaseDrawingCollectionViewCell<SAPFiori.FUIKPICardView> {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var nuiClass: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUINoteFormCell : SAPFiori.FUIAutofittingDrawingTableViewCell<SAPFiori.FUINoteFormCellContentView>, SAPFiori.FUIFormCell {
  public enum Version {
    case v1
    case v2
    public static func == (a: SAPFiori.FUINoteFormCell.Version, b: SAPFiori.FUINoteFormCell.Version) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var version: SAPFiori.FUINoteFormCell.Version {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isTrackingLiveChanges: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((Swift.String) -> Swift.Void)? {
    get
    set
  }
  @available(*, deprecated, message: "This property is deprecated. Please use 'maxNumberOfLines' property.")
  @_Concurrency.MainActor(unsafe) public var isAutoFitting: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minNumberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxNumberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxNoteTextLength: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valueTextView: SAPFiori.FUITextView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var valueText: SAPFiori.FUIText {
    get
  }
  @objc @available(*, deprecated, message: "This property is deprecated.  Please use `placeholder.text`.")
  @IBInspectable @_Concurrency.MainActor(unsafe) public var placeholderText: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var hintText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isReadOnly: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hidesReadOnlyHint: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) override public var containerIsEnabled: Swift.Bool? {
    get
  }
  @_Concurrency.MainActor(unsafe) override open var maxDimensions: CoreFoundation.CGSize? {
    get
  }
  @_Concurrency.MainActor(unsafe) override open var minDimensions: CoreFoundation.CGSize? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias ValueType = SAPFiori.FUINoteFormCellContentView.ValueType
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISliderContentView : SAPFiori.FUIFormCellContentView<SAPFiori.FUITextField, SAPFiori.FUIControlState, SAPFiori.FUIText>, SAPFiori.FUITitleComponent, SAPFiori.FUIValueComponent {
  @_Concurrency.MainActor(unsafe) public var valueTextField: SAPFiori.FUITextField {
    get
  }
  @_Concurrency.MainActor(unsafe) public var slider: UIKit.UISlider {
    get
  }
  @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    get
    set
  }
  public typealias ValueType = Swift.Float
  @_Concurrency.MainActor(unsafe) open var value: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valueAttributedText: Foundation.NSAttributedString {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((Swift.Float) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var maximumValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var minimumValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var unit: Foundation.Unit {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isContinuous: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseCollectionViewTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView! {
    get
  }
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUICircleAnnotationView : MapKit.MKAnnotationView {
  @_Concurrency.MainActor(unsafe) open var outerColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var outerWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var innerColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var circleRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(annotation: MapKit.MKAnnotation?, reuseIdentifier: Swift.String?, clusteringIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(annotation: MapKit.MKAnnotation?, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension SAPFiori.FUICircleAnnotationView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var stickyZPosition: CoreFoundation.CGFloat {
    get
    set
  }
}
@_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIKPICardView : SAPFiori.FUICardBaseView {
  @_Concurrency.MainActor(unsafe) public var kpiAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) open func setupAccessibilityLabel() -> Swift.String
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func kpiParagraphStyle() -> UIKit.NSParagraphStyle
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public protocol FUIColorSchemeCustomizable {
  var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme { get set }
  var interfaceLevel: SAPFiori.FUIInterfaceLevel { get set }
  var colorDisplayMode: SAPFiori.FUIColorDisplayMode { get set }
}
extension SAPFiori.FUIColorSchemeCustomizable where Self : AnyObject {
  public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    nonmutating set
  }
  public var interfaceLevel: SAPFiori.FUIInterfaceLevel {
    get
    nonmutating set
  }
  public var colorDisplayMode: SAPFiori.FUIColorDisplayMode {
    get
    nonmutating set
  }
}
extension UIKit.UIView : SAPFiori.FUIColorSchemeCustomizable {
}
@_hasMissingDesignatedInitializers public class FUIChartSeries {
  public var color: UIKit.UIColor? {
    get
    set
  }
  public var fillColor: UIKit.UIColor? {
    get
    set
  }
  public var numberOfValues: Swift.Int {
    get
  }
  public func valueForCategory(_ categoryIndex: Swift.Int, dimension dimensionIndex: Swift.Int) -> Swift.Double?
  public func valuesInCategoryRange(_ categoryRange: Swift.CountableClosedRange<Swift.Int>, dimension dimensionIndex: Swift.Int) -> [Swift.Double?]?
  public func valuesForDimension(_ dimension: Swift.Int = 0) -> [Swift.Double?]?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FUIChartSeriesCollection {
  public var numOfSeries: Swift.Int {
    get
  }
  public var pointsAttributes: [SAPFiori.FUIChartPointAttributes]
  @available(*, deprecated, renamed: "strokeColors")
  public var colors: [UIKit.UIColor] {
    get
    set
  }
  public var strokeColors: [[UIKit.UIColor]] {
    get
    set
  }
  public var fillColors: [UIKit.UIColor] {
    get
    set
  }
  public var maximumNumberOfValues: Swift.Int {
    get
  }
  @available(*, deprecated, renamed: "pointsAttributes")
  public var points: SAPFiori.FUIChartPointAttributes {
    get
    set
  }
  @objc deinit
}
extension SAPFiori.FUIChartSeriesCollection : Swift.Sequence {
  public typealias Iterator = Swift.AnyIterator<SAPFiori.FUIChartSeries>
  public func makeIterator() -> SAPFiori.FUIChartSeriesCollection.Iterator
  public typealias Element = SAPFiori.FUIChartSeries
}
extension SAPFiori.FUIChartSeriesCollection : Swift.Collection {
  public typealias Index = Swift.Int
  public var startIndex: SAPFiori.FUIChartSeriesCollection.Index {
    get
  }
  public var endIndex: SAPFiori.FUIChartSeriesCollection.Index {
    get
  }
  public subscript(position: SAPFiori.FUIChartSeriesCollection.Index) -> SAPFiori.FUIChartSeriesCollection.Iterator.Element {
    get
  }
  public func index(after i: SAPFiori.FUIChartSeriesCollection.Index) -> SAPFiori.FUIChartSeriesCollection.Index
  public typealias Indices = Swift.DefaultIndices<SAPFiori.FUIChartSeriesCollection>
  public typealias SubSequence = Swift.Slice<SAPFiori.FUIChartSeriesCollection>
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FUIPasscodeCreateController : SAPFiori.FUIPasscodeController {
  @_Concurrency.MainActor(unsafe) weak public var validationDelegate: SAPFiori.FUIPasscodeValidationDelegate?
  @_Concurrency.MainActor(unsafe) public var canEnableTouchID: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var hashUserPasscode: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isWhiteNavigationBar: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var touchIDLearnMoreLink: Foundation.URL?
  @_Concurrency.MainActor(unsafe) public var faceIDLearnMoreLink: Foundation.URL?
  @available(*, unavailable, renamed: "showsCancelBarItem")
  @_Concurrency.MainActor(unsafe) public var isToShowCancelBarItem: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var showsCancelBarItem: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isBiometricIDEnablementOptional: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public class func createInstanceFromStoryboard(_ usesTouchID: Swift.Bool = true) -> SAPFiori.FUIPasscodeCreateController
  @_Concurrency.MainActor(unsafe) public class func createInstanceForEnablingBiometricID(userIdentifier: Swift.String? = nil, keychainAccessGroup: Swift.String? = nil) -> SAPFiori.FUIPasscodeCreateController?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
extension SAPFiori.FUIPasscodeCreateController {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
public protocol FUIPasscodeValidationDelegate : AnyObject {
  func validate(passcode: Swift.String) throws
}
extension SAPFiori.FUIPasscodeCreateController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
public enum DateSegmentType : Swift.Int {
  case `in`
  case month
  case out
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct FUICalendarItemState {
  public let selectionRangePosition: SAPFiori.FUISelectionRangePosition
  public let dateSegmentType: SAPFiori.DateSegmentType
  public let isToday: Swift.Bool
  public let isSelected: Swift.Bool
  public init(selectionRangePosition: SAPFiori.FUISelectionRangePosition, dateSegmentType: SAPFiori.DateSegmentType, isToday: Swift.Bool, isSelected: Swift.Bool = false)
}
extension SAPFiori.FUICalendarItemState : SAPFiori.Defaultable {
  public static let `default`: SAPFiori.FUICalendarItemState
}
extension SAPFiori.FUICalendarItemState : SAPFiori.Enableable {
  public static var defaultEnabled: SAPFiori.FUICalendarItemState
}
extension SAPFiori.FUICalendarItemState : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SAPFiori.FUICalendarItemState, b: SAPFiori.FUICalendarItemState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUICalendarItemView : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUITitleComponent {
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var status: SAPFiori.FUIText {
    get
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) public var statusImage: UIKit.UIImage? {
    get
    set
  }
  @available(*, deprecated, renamed: "isEventIndicatorVisible")
  @_Concurrency.MainActor(unsafe) public var hidesEventView: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEventIndicatorVisible: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) public var statusAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIChartView : UIKit.UIView, SAPFiori.FUIChartItemComponent, SAPFiori.FUIChartSelectionComponent {
  @_Concurrency.MainActor(unsafe) public var placeholderText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholderTextColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholderTextFont: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var noDataView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isOpaque: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) public var style: SAPFiori.FUIChartStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var chartType: SAPFiori.FUIChartType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIChartViewDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var dataSource: SAPFiori.FUIChartViewDataSource? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func reloadData()
  @_Concurrency.MainActor(unsafe) public var indexesOfColumnSeries: Foundation.IndexSet? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var indexesOfTotalsCategories: Foundation.IndexSet? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var indexesOfSecondaryValueAxis: Foundation.IndexSet? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func plotItem(at location: CoreFoundation.CGPoint) -> SAPFiori.FUIChartPlotItem?
  @_Concurrency.MainActor(unsafe) public func plotItem(at series: Swift.Int, category: Swift.Int) -> SAPFiori.FUIChartPlotItem?
  @_Concurrency.MainActor(unsafe) public var numericAxis: SAPFiori.FUIChartNumericAxis {
    get
  }
  @_Concurrency.MainActor(unsafe) public var secondaryNumericAxis: SAPFiori.FUIChartNumericAxis {
    get
  }
  @_Concurrency.MainActor(unsafe) public var categoryAxis: SAPFiori.FUIChartCategoryAxis {
    get
  }
  @_Concurrency.MainActor(unsafe) public var series: SAPFiori.FUIChartSeriesCollection {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfGridlines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var colorsForCategory: [Swift.Int : [Swift.Int : UIKit.UIColor]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectionMode: SAPFiori.FUIChartSelectionMode {
    get
    set
  }
  @available(*, unavailable, renamed: "isUserInteractionEnabled")
  @_Concurrency.MainActor(unsafe) public var userInteractionEnable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isUserInteractionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var defaultCategorySelectionMode: SAPFiori.ChartDefaultCategorySelectionMode
  @_Concurrency.MainActor(unsafe) public var selectionEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectionRequired: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var indexOfStockSeries: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selections: [SAPFiori.FUIChartPlotItem]? {
    get
  }
  @_Concurrency.MainActor(unsafe) public func select(category categoryIndex: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func select(categoriesInRange range: Swift.ClosedRange<Swift.Int>)
  @_Concurrency.MainActor(unsafe) public func select(series seriesIndex: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func selectNextSeries()
  @available(*, deprecated, message: "Dimension selection is not supported.")
  @_Concurrency.MainActor(unsafe) public func select(dimension dimensionIndex: Swift.Int = 0)
  @_Concurrency.MainActor(unsafe) public func clearSelections()
  @_Concurrency.MainActor(unsafe) public var centerPosition: CoreFoundation.CGPoint? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scaleX: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scaleY: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scaleXEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scaleYEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var readableScaleEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var debugDataDescription: Swift.String {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class FUIRangeSlider : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) open var minimumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maximumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var lowerValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var upperValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isRangeSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var trackTintColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var trackSelectionColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var thumbTintColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var interval: Swift.Double
  @_Concurrency.MainActor(unsafe) open var isContinuous: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((_ lower: Swift.Double, _ upper: Swift.Double) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func updateLayerFrame()
  @objc deinit
}
extension SAPFiori.FUIRangeSlider {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) public func boundValue(_ value: Swift.Double, toLowerValue lowerValue: Swift.Double, upperValue: Swift.Double) -> Swift.Double
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIKeyValueCollectionViewCell : SAPFiori.NibDesignableFUIBaseCollectionViewCell {
  @_Concurrency.MainActor(unsafe) weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @available(*, unavailable, message: "`valueTextField` property has been removed.")
  @_Concurrency.MainActor(unsafe) weak public var valueTextField: UIKit.UITextField!
  @_Concurrency.MainActor(unsafe) weak public var valueTextView: UIKit.UITextView! {
    get
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var value: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc deinit
}
extension UIKit.UIFont {
  public class func preferredFioriFont(forTextStyle textStyle: SAPFiori.UIFontTextStyle, weight: UIKit.UIFont.Weight = .regular, isItalic: Swift.Bool = false, isCondensed: Swift.Bool = false) -> UIKit.UIFont
  public class func preferredFioriFont(fixedSize size: CoreFoundation.CGFloat, weight: UIKit.UIFont.Weight = .regular, isItalic: Swift.Bool = false, isCondensed: Swift.Bool = false) -> UIKit.UIFont
}
extension UIKit.UIFont {
  public static func registerFioriFonts()
}
extension UIKit.UIFont.TextStyle {
  public static let KPI: UIKit.UIFont.TextStyle
  public static let largeKPI: UIKit.UIFont.TextStyle
}
extension UIKit.UIFont.TextStyle : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension UIKit.UIFont.TextStyle : Swift.CaseIterable {
  public static var allCases: [UIKit.UIFont.TextStyle] {
    get
  }
  public typealias AllCases = [UIKit.UIFont.TextStyle]
}
extension UIKit.UIFont.Weight : Swift.CaseIterable, Swift.CustomStringConvertible {
  public static var allCases: [UIKit.UIFont.Weight] {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias AllCases = [UIKit.UIFont.Weight]
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIOnboardingButton : SAPFiori.FUIButton {
  @_Concurrency.MainActor(unsafe) public var isUsingIntrinsicContentSize: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseCalendarItemCollectionViewCell : UIKit.UICollectionViewCell {
  @available(*, unavailable, message: "---> Please use cellState.isSelected")
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @objc deinit
}
extension SAPFiori.FUISearchTagsField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISearchToSelectView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var tagsField: SAPFiori.FUISearchTagsField {
    get
  }
  @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutMarginsDidChange()
  @objc deinit
}
public enum FUIControlState : Swift.Int {
  case normal
  case enabled
  case highlighted
  case selected
  case disabled
  case enabledSelected
  case enabledUnselected
  case disabledSelected
  case disabledUnselected
  case readOnly
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIMKMapFloorplanContentView : SAPFiori.FUIMapFloorplanContentView {
  @_Concurrency.MainActor(unsafe) final public let mapView: SAPFiori.FUIMKMapView
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUITableViewHeaderFooterView : SAPFiori.NibDesignableTableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) convenience public init(style: SAPFiori.FUISectionHeaderFooterStyle)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func setBackgroundColor(_ color: UIKit.UIColor, forState state: SAPFiori.UIControlState)
  @nonobjc @_Concurrency.MainActor(unsafe) public func setBackgroundColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var attributeLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isDisclosureAccessoryHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var style: SAPFiori.FUISectionHeaderFooterStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var didSelectHandler: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var topPadding: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var bottomPadding: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var selectionStyle: SAPFiori.UITableViewCellSelectionStyle
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public var separators: UIKit.UIRectEdge {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var separatorInset: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var separatorsLineColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
public enum FUICompactCardPosition {
  case bottom
  case middle
  case top
  public static func == (a: SAPFiori.FUICompactCardPosition, b: SAPFiori.FUICompactCardPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(*, deprecated, message: "If using as subview of UITableViewCell: use FUICollectionViewTableViewCell instead; if using generally: use UICollectionView instead.")
@_Concurrency.MainActor(unsafe) public class FUIResizingCollectionView : UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FUIPasscodeInputController : SAPFiori.FUIPasscodeController {
  @_Concurrency.MainActor(unsafe) public var customBackgroundImage: UIKit.UIImage?
  @available(*, unavailable, renamed: "showsCancelBarItem")
  @_Concurrency.MainActor(unsafe) public var isToShowCancelBarItem: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var showsCancelBarItem: Swift.Bool
  @available(*, unavailable, renamed: "showsResetButton")
  @_Concurrency.MainActor(unsafe) public var isToShowResetButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var showsResetButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var hashUserPasscode: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isRequiringAlphaNumericInput: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public class func createInstanceFromStoryboard() -> SAPFiori.FUIPasscodeInputController
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
}
extension SAPFiori.FUIPasscodeInputController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIObjectViewBase : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUIReactingToAccessory, SAPFiori.FUIObjectBaseDrawing, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) public var isDrawingIconStackInLayoutMargin: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailImageView: SAPFiori.FUIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var indicatorImageView: SAPFiori.FUIImageView {
    get
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var preserveIconStackSpacing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var preserveDetailImageSpacing: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var iconsColumnWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailImageViewSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var indicatorImageViewSize: CoreFoundation.CGSize {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var splitPercent: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var showDescriptionInCompact: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isLimitingHeightToMainContent: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var isApplyingSplitPercent: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isStatusForcedToCenterYAlignment: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func centerYOffsetForAccessory() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var isAccessoryActionMode: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var avatars: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var avatarSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isAvatarCircular: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var avatarBorderWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var avatarBorderColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var groupedAvatarsViews: [SAPFiori.FUIImageView] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var footnoteIcons: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var footnoteIconsMaxCount: Swift.Int? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var footnoteIconSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isFootnoteIconCircular: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var iconsSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var footnoteIconsViews: [SAPFiori.FUIImageView] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isMultiline: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) open var isContentCopyable: Swift.Bool {
    get
    set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(_ sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
}
public protocol FUIButtonClosureHandling : AnyObject {
  associatedtype ClosureType
  var didSelectHandler: Self.ClosureType? { get set }
}
extension Swift.Array {
  public struct Diff<T1, T2> {
    public let common: [(T1, T2)]
    public let removed: [T1]
    public let inserted: [T2]
    public init(common: [(T1, T2)] = [], removed: [T1] = [], inserted: [T2] = [])
  }
  public func diff<T2>(_ comparison: [T2], with compare: (Element, T2) -> Swift.Bool) -> Swift.Array<Element>.Diff<Element, T2>
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUITimelinePreviewTableViewCell : SAPFiori.NibDesignableFUIBaseTableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var timelinePreviewView: SAPFiori.FUITimelinePreviewView! {
    get
  }
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseFixedMarginsView : UIKit.UIView {
  @available(*, unavailable, message: "Use `fixedDirectionalLayoutMargins` instead")
  @_Concurrency.MainActor(unsafe) public var fixedLayoutMargins: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) public var fixedDirectionalLayoutMargins: UIKit.NSDirectionalEdgeInsets {
    get
    set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var directionalLayoutMargins: UIKit.NSDirectionalEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(*, deprecated, message: "Use `FUIObjectView`, instead.")
@_Concurrency.MainActor(unsafe) open class FUIObjectCell : SAPFiori.NibDesignable {
  @_Concurrency.MainActor(unsafe) public static var reuseIdentifier: Swift.String {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var iconsStackView: UIKit.UIStackView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var detailImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var headlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var subheadlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var footnoteLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var descriptionLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var statusLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var statusImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var substatusLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var substatusImageView: SAPFiori.FUIImageView! {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var iconImages: [UIKit.UIImage] {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var preserveIconStackSpacing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var detailImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var preserveDetailImageSpacing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var headlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var subheadlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var footnoteText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var statusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var statusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var substatusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var substatusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var splitPercent: CoreFoundation.CGFloat {
    get
    set
  }
  @available(*, unavailable, renamed: "splitPercent")
  @_Concurrency.MainActor(unsafe) public var mainStackWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var forFirstBaselineLayout: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var forLastBaselineLayout: UIKit.UIView {
    @objc get
  }
}
public protocol FUIValuesComponent : SAPFiori.FUIEmptyValueComponent {
  var values: [Swift.String] { get set }
  var valuesAttributedText: Foundation.NSAttributedString! { get set }
  var valuesStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUIValuesComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var valuesStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension UIKit.UISwitch : SAPFiori.Initializable {
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISwitchFormView : SAPFiori.FUIFormCellContentView<UIKit.UISwitch, SAPFiori.FUISwitchControlState, SAPFiori.FUIMultiLineText>, SAPFiori.FUISwitchComponent, SAPFiori.FUITitleMultiLineComponent {
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var isEnabled: Swift.Bool {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var switchView: UIKit.UISwitch {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var value: Swift.Bool {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open func valueChanged(_ sender: UIKit.UISwitch)
  @_Concurrency.MainActor(unsafe) public var isUpdatingTableView: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias TitleText = SAPFiori.FUIMultiLineText
  @objc deinit
}
public typealias DrawingTintState = SAPFiori.Defaultable & SAPFiori.Enableable & Swift.Hashable
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUITintableDrawingView<T> : SAPFiori.FUIBaseDrawingView, SAPFiori.FUITintAttributesProvider, SAPFiori.FUIAttributesProvider, SAPFiori.FUIEnabledComponent, SAPFiori.FUIStyleTintByStringAttributes where T : SAPFiori.Defaultable, T : SAPFiori.Enableable, T : Swift.Hashable {
  @_Concurrency.MainActor(unsafe) open func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUITintableDrawingView<T>.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) open func tintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUITintableDrawingView<T>.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  public typealias TintState = T
  @_Concurrency.MainActor(unsafe) open var tintAttributes: [SAPFiori.FUIPropertyRef : [T : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var tintState: T {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) open func cacheTintState()
  @_Concurrency.MainActor(unsafe) open func restoreTintStateFromCache()
  @_Concurrency.MainActor(unsafe) open var cachedTintAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.FUITintableDrawingView<T>.TintState : [SAPFiori.NSAttributedStringKey : Any]]]]
  @_Concurrency.MainActor(unsafe) public var tintablePropertyRefs: [SAPFiori.FUIPropertyRef : [SAPFiori.FUITintableDrawingView<T>.TintState]]
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public protocol FUIPlaceholderComponent : SAPFiori.FUIAttributesConsumer {
  var placeholder: SAPFiori.FUIText { get }
  var placeholderAttributedText: Foundation.NSAttributedString! { get set }
  var placeholderStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var placeholderNuiClass: Swift.String? { get set }
}
extension SAPFiori.FUIPlaceholderComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var placeholderStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var placeholderNuiClass: Swift.String? {
    get
    set
  }
}
extension SAPFiori.FUIPlaceholderComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var placeholderAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIMapDetailStatusView : SAPFiori.FUIDrawingView, SAPFiori.FUIStatusImageComponent {
  @_Concurrency.MainActor(unsafe) final public let status: SAPFiori.FUIMultiLineText
  @_Concurrency.MainActor(unsafe) public var statusImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var statusAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias StatusText = SAPFiori.FUIMultiLineText
  @objc deinit
}
public protocol FUIBackingPropertyValueMap : AnyObject {
  var backingPropertyValueMap: [SAPFiori.FUIPropertyRef : Foundation.NSAttributedString?] { get set }
}
extension SAPFiori.FUIBackingPropertyValueMap where Self : SAPFiori.FUIAttributesConsumer {
  public func styledAttributedString(forText fuiText: SAPFiori.FUITextProtocol, withPropertyRef propertyRef: SAPFiori.FUIPropertyRef) -> Foundation.NSAttributedString
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIProfileHeader : SAPFiori.NibDesignable {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var imageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var headlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var subheadlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var descriptionLabel: SAPFiori.FUILabel! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var detailContentView: UIKit.UIView? {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var headlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var subheadlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var ibDisplayDetailContentView: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var splitPercent: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var bannerView: SAPFiori.FUIBannerMessageView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
}
@objc @_Concurrency.MainActor(unsafe) open class FUIMapDetailPanel : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var passThroughViews: [UIKit.UIView] {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isApplyingBlurBackground: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isSearchEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var prepareForPushChildViewController: ((SAPFiori.FUIMapDetailPanelContentViewController) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var prepareForPopChildViewController: ((SAPFiori.FUIMapDetailPanelContentViewController) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) final public let searchResults: SAPFiori.FUIMapDetailPanelSearchResultsViewController
  @available(*, unavailable, renamed: "searchResults")
  @_Concurrency.MainActor(unsafe) final public let search: SAPFiori.FUIMapDetailPanelSearchResultsViewController
  @available(*, unavailable, renamed: "search")
  @_Concurrency.MainActor(unsafe) final public let searchResultsViewController: SAPFiori.FUIMapDetailPanelSearchResultsViewController
  @_Concurrency.MainActor(unsafe) final public let content: SAPFiori.FUIMapDetailPanelContentViewController
  @available(*, unavailable, renamed: "content")
  @_Concurrency.MainActor(unsafe) final public let contentViewController: SAPFiori.FUIMapDetailPanelContentViewController
  @_Concurrency.MainActor(unsafe) public init(parentViewController parent: UIKit.UIViewController, mapView pinnedView: UIKit.UIView? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension SAPFiori.FUIMapDetailPanel {
  @_Concurrency.MainActor(unsafe) public func presentContainer()
  @_Concurrency.MainActor(unsafe) public func fitToContent()
  @_Concurrency.MainActor(unsafe) public func pushChildViewController(completion: (() -> Swift.Void)? = nil, in position: SAPFiori.FUICompactCardPosition? = nil)
  @available(*, unavailable, renamed: "pushChildViewController()")
  @_Concurrency.MainActor(unsafe) public func pushChildViewController(child childViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) public func popChildViewController(completion: (() -> Swift.Void)? = nil)
}
@available(*, unavailable, renamed: "FUIMapDetailPanel")
public typealias FUIDetailPanelContainer = SAPFiori.FUIMapDetailPanel
public protocol FUISelectionRangeComponent : SAPFiori.FUIAttributesConsumer {
  var selectionRangeColor: UIKit.UIColor? { get set }
  var selectionRangeStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUISelectionRangeComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var selectionRangeStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public protocol FUIAnnotation : MapKit.MKAnnotation {
  var state: SAPFiori.FUIMapFloorplan.State { get set }
  var layer: SAPFiori.FUIGeometryLayer { get set }
  var indexPath: Foundation.IndexPath { get set }
}
extension Foundation.IndexPath {
  public init(index: Swift.Int, routeIndex: Swift.Int)
  public var index: Swift.Int {
    get
    set
  }
  public var routeIndex: Swift.Int {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIChartSummaryItemBaseView<ItemType> : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUITrendComponent where ItemType : SAPFiori.FUIChartSummaryItemType {
  @_Concurrency.MainActor(unsafe) public var trend: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) public var trendImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var trendSemanticColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public var trendImageSize: CoreFoundation.CGSize?
  @_Concurrency.MainActor(unsafe) public var emptyText: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) public var longPressGestureRecognizer: UIKit.UILongPressGestureRecognizer! {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIObjectCardTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIObjectCardView> {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc public protocol FUIHierarchyViewDelegate {
  @objc optional func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, hierarchyButtonTappedForItemWith uuid: Swift.String)
  @objc optional func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, didSelectItemWith uuid: Swift.String)
}
public protocol FUITagsComponent : SAPFiori.FUIAttributesConsumer {
  var tags: [SAPFiori.FUITag] { get set }
  var tagsAttributedText: Foundation.NSAttributedString! { get set }
  var tagsStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var numberOfTagLines: Swift.Int { get set }
}
extension SAPFiori.FUITagsComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var tagsStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension SAPFiori.FUITagsComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var tagsAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class FUIHierarchyViewHeader : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let leftButton: SAPFiori.FUIButton
  @_Concurrency.MainActor(unsafe) final public let rightButton: SAPFiori.FUIButton
  @_Concurrency.MainActor(unsafe) open var borders: UIKit.UIRectEdge {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
public protocol FUIChartLineAttributes : AnyObject {
  var width: Swift.Double { get set }
  var color: UIKit.UIColor { get set }
  var dashPattern: (length: Swift.Int, gap: Swift.Int)? { get set }
  var isHidden: Swift.Bool { get set }
}
@_hasMissingDesignatedInitializers public class FUIChartGridlineAttributes : SAPFiori.FUIChartLineAttributes {
  public var width: Swift.Double {
    get
    set
  }
  public var color: UIKit.UIColor {
    get
    set
  }
  public var dashPattern: (length: Swift.Int, gap: Swift.Int)? {
    get
    set
  }
  public var isHidden: Swift.Bool {
    get
    set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class FUIMapLegend : SAPFiori.FUIResizablePopoverContainer {
  @_Concurrency.MainActor(unsafe) public var passThroughViews: [UIKit.UIView]
  @_Concurrency.MainActor(unsafe) public var toolbarButton: SAPFiori.FUIMapToolbar.LegendButton?
  @_Concurrency.MainActor(unsafe) public var headerTextView: UIKit.UITextView!
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredContentSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc deinit
}
extension SAPFiori.FUIMapLegend {
  @_Concurrency.MainActor(unsafe) public func setupPopoverAttributes(popOver popController: UIKit.UIPopoverPresentationController, sender view: UIKit.UIView)
}
extension SAPFiori.FUIMapLegend {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
extension SAPFiori.FUIMapLegend : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
extension SAPFiori.FUIMapLegend : UIKit.UITableViewDelegate {
}
extension SAPFiori.FUIMapLegend : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@available(*, unavailable, renamed: "FUIMapLegend")
public typealias FUIMapLegendContainer = SAPFiori.FUIMapLegend
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIChartTitleView : SAPFiori.FUIDrawingView, SAPFiori.FUITitleMultiLineComponent, SAPFiori.FUIStatusMultilineComponent, SAPFiori.FUISubtitleMultiLineComponent {
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var status: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias StatusText = SAPFiori.FUIMultiLineText
  public typealias SubtitleText = SAPFiori.FUIMultiLineText
  public typealias TitleText = SAPFiori.FUIMultiLineText
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIObjectViewComponent {
  public var preserveIconStackSpacing: Swift.Bool {
    get
    set
  }
  public var preserveDetailImageSpacing: Swift.Bool {
    get
    set
  }
  public var isLimitingHeightToMainContent: Swift.Bool {
    get
    set
  }
}
open class FUIDataLoader<Entity> : Foundation.ObservableObject where Entity : Swift.Identifiable {
  @Combine.Published @_projectedValueProperty($results) public var results: [Entity] {
    get
    set
    _modify
  }
  public var $results: Combine.Published<[Entity]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($error) public var error: Swift.Error? {
    get
    set
    _modify
  }
  public var $error: Combine.Published<Swift.Error?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  open func query(forItemsIn range: Swift.Range<Swift.Int>? = nil, with searchString: Swift.String? = nil)
  public init()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIMapDetailTagObjectView : SAPFiori.FUIObjectView {
  @_Concurrency.MainActor(unsafe) override public func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override public func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUICardFooterView : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUIPrimaryActionComponent & SAPFiori.FUISecondaryActionComponent {
  @_Concurrency.MainActor(unsafe) public var primaryAction: SAPFiori.FUIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var secondaryAction: SAPFiori.FUIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(hexString hex: Swift.String)
  public class func preferredFioriColor(forStyle style: SAPFiori.FUIColorStyle) -> UIKit.UIColor
  public class func preferredFioriColor(forStyle style: SAPFiori.FUIColorStyle, background scheme: SAPFiori.FUIBackgroundColorScheme? = nil, interface level: SAPFiori.FUIInterfaceLevel? = nil, display mode: SAPFiori.FUIColorDisplayMode? = nil) -> UIKit.UIColor
  public static let appleDefaultTint: UIKit.UIColor
  public func isAppleDefaultTint() -> Swift.Bool
  public func equals(_ other: UIKit.UIColor) -> Swift.Bool
}
extension SAPFiori.FUIColorStyle : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUICollectionItemView : SAPFiori.FUIImageCollectionItemView, SAPFiori.FUITitleComponent, SAPFiori.FUISubtitleComponent, SAPFiori.FUIStatusComponent, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var status: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) open var actionLayout: SAPFiori.FUIControlLayout {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias StatusText = SAPFiori.FUIText
  public typealias SubtitleText = SAPFiori.FUIText
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUITimelineCell : SAPFiori.NibDesignableFUIBaseTableViewCell {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var headlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var subheadlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var statusLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var subStatusLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var statusImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var subStatusImageView: SAPFiori.FUIImageView! {
    get
  }
  @available(*, unavailable, renamed: "timestampLabel")
  @_Concurrency.MainActor(unsafe) public var eventLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var timestampLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var secondaryTimestampLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var separatorLineView: UIKit.UIView! {
    get
  }
  @available(*, unavailable, renamed: "secondaryTimestampImageView")
  @_Concurrency.MainActor(unsafe) public var eventImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var secondaryTimestampImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var nodeImageView: SAPFiori.FUIImageView! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var nodeColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nodeColorDisabled: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var nodeType: SAPFiori.FUITimelineCell.NodeType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var useCompactLayoutInComplete: Swift.Bool
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var attributeLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var subAttributeLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var timelineBackground: UIKit.UIView! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var cardBackground: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isSingleActionEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let singleActionButton: SAPFiori.FUIButton
  @_Concurrency.MainActor(unsafe) public var isPast: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var headlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var subheadlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var statusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var subStatusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var statusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var subStatusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "timestampText")
  @_Concurrency.MainActor(unsafe) public var eventText: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var timestampText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var secondaryTimestampText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "secondaryTimestampImage")
  @_Concurrency.MainActor(unsafe) public var eventImage: UIKit.UIImage?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var secondaryTimestampImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var nodeImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var timelineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var attributeText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var subAttributeText: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
}
extension SAPFiori.FUITimelineCell {
  public enum NodeType : Swift.Int {
    case open
    case inProgress
    case complete
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
extension UIKit.UIImage : SAPFiori.FUIGlyphImage {
  public var attributedText: Foundation.NSAttributedString! {
    get
  }
  public func adjustedAttributedText(yOffset: CoreFoundation.CGFloat) -> Foundation.NSAttributedString!
  public var glyphImage: UIKit.UIImage? {
    get
  }
}
extension UIKit.UIImage {
  public static func dynamicImage(lightModeImage: UIKit.UIImage?, darkModeImage: UIKit.UIImage?) -> UIKit.UIImage?
}
public protocol FUIStateReadOnly {
  var isReadOnly: Swift.Bool { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIBarcodeScanView : UIKit.UIView {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var scanGuidesImageView: UIKit.UIImageView! {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseDrawingTableViewCell<InnerView> : SAPFiori.FUIBaseTableViewCell, SAPFiori.InnerViewContainer, SAPFiori.FUIStyleByStringAttributes where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  @_Concurrency.MainActor(unsafe) public var _innerView: InnerView! {
    get
  }
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) open var maxDimensions: CoreFoundation.CGSize? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var minDimensions: CoreFoundation.CGSize? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var inlineValidationViewHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public func scrollToVisible()
  @_Concurrency.MainActor(unsafe) public var containerIsEnabled: Swift.Bool? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutMarginsDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIOrderPickerFormCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIOrderPickerFormView>, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) override public class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIText? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectedIcon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isAtLeastOneSelected: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, message: "Please use isAtLeastOneSelected instead")
  @_Concurrency.MainActor(unsafe) public var atLeastOneSelected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((SAPFiori.FUISortCriterion.Change, [SAPFiori.FUISortCriterion]) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var value: [SAPFiori.FUISortCriterion] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIUserConsentPageComponent {
  public var titleText: SAPFiori.FUIText {
    get
  }
  public var titleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var titleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var body: SAPFiori.FUIText {
    get
  }
  public var bodyAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var bodyDataDetectorTypes: UIKit.UIDataDetectorTypes {
    get
    set
  }
  public var bodyStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var actionTitle: SAPFiori.FUIText {
    get
  }
  public var actionTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var actionTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var actionHandler: ((SAPFiori.FUIUserConsentPageViewController) -> Swift.Void)? {
    get
    set
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIAxisTitleComponent {
  public var valuesAxisTitle: SAPFiori.FUIText {
    get
  }
  public var valuesAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var valuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var secondaryValuesAxisTitle: SAPFiori.FUIText {
    get
  }
  public var secondaryValuesAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var secondaryValuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var categoryAxisTitle: SAPFiori.FUIText {
    get
  }
  public var categoryAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var categoryAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public protocol FUIObjectBaseDrawing {
  var iconsColumnWidth: CoreFoundation.CGFloat { get set }
  var isAccessoryActionMode: Swift.Bool { get set }
  var isDrawingIconStackInLayoutMargin: Swift.Bool { get set }
  var isMultiline: Swift.Bool { get }
}
public enum StyleSheetParsingError : Swift.Error {
  case invalidStyleSheet(Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIMultiUserPasscodeController : SAPFiori.FUIPasscodeController {
  @_Concurrency.MainActor(unsafe) final public let logoImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var logoImageViewSize: CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) final public let titleLabel: SAPFiori.FUILabel
  @_Concurrency.MainActor(unsafe) final public let userImageView: SAPFiori.FUIImageView
  @_Concurrency.MainActor(unsafe) final public let userNameLabel: SAPFiori.FUILabel
  @_Concurrency.MainActor(unsafe) final public let userInfoLabel: SAPFiori.FUILabel
  @_Concurrency.MainActor(unsafe) final public let passcodeInputField: SAPFiori.FUITextField
  @_Concurrency.MainActor(unsafe) final public let errorMessageLabel: SAPFiori.FUILabel
  @_Concurrency.MainActor(unsafe) final public let logInButton: SAPFiori.FUIButton
  @_Concurrency.MainActor(unsafe) final public let forgotPasscodeLabel: SAPFiori.FUILabel
  @_Concurrency.MainActor(unsafe) final public let switchUserButton: SAPFiori.FUIButton
  @_Concurrency.MainActor(unsafe) public var addNewUserBarButtonItem: SAPFiori.FUIBarButtonItem! {
    get
  }
  @_Concurrency.MainActor(unsafe) weak open var dataSource: SAPFiori.FUIMultiUserPasscodeControllerDataSource? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var showsUserImage: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var showsUserInfo: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var hashUserPasscode: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @objc deinit
}
extension SAPFiori.FUIMultiUserPasscodeController : SAPFiori.FUIListPickerDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfRows(in listPickerTableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func listPickerTableView(_ tableView: UIKit.UITableView, cellForRowAt index: Swift.Int, isFiltered: Swift.Bool) -> UIKit.UITableViewCell
}
extension SAPFiori.FUIMultiUserPasscodeController : SAPFiori.FUIListPickerSearchResultsUpdating {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func listPicker(_ listPicker: SAPFiori.FUIListPicker, updateSearchResults forSearchString: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func listPicker(_ listPicker: SAPFiori.FUIListPicker, filteredDataSourceContainsItemAt unfilteredIndex: Swift.Int) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func listPicker(_ listPicker: SAPFiori.FUIListPicker, unfilteredDataSourceIndexOfItemAt filteredIndex: Swift.Int) -> Swift.Int
}
extension SAPFiori.FUIMultiUserPasscodeController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUITimelineCollectionViewCell : SAPFiori.NibDesignableCollectionViewCell {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var titleLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var nodeImageView: UIKit.UIImageView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var footnoteLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var timeline: UIKit.UIView! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var timelineColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var gradientAlphas: [CoreFoundation.CGFloat]?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var footnote: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var nodeType: SAPFiori.FUITimelineStatus {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
extension SAPFiori.FUIFeedbackScreen {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ConnectionErrorController : SAPFiori.FUIFeedbackScreen.ErrorController {
    @_Concurrency.MainActor(unsafe) final public let errorImageView: SAPFiori.FUIImageView
    @_Concurrency.MainActor(unsafe) public var onTryAgainHandler: ((SAPFiori.FUIFeedbackScreen.ConnectionErrorController) -> Swift.Void)?
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
    @objc deinit
  }
}
public protocol FUIMultiUserPasscodeControllerDataSource : AnyObject {
  var onboardedUsers: [SAPFiori.FUIUser] { get }
  var currentUserId: Swift.String { get set }
  func registerUserTableViewCell(_ tableView: UIKit.UITableView, controller: SAPFiori.FUIMultiUserPasscodeController)
  func userCell(_ userId: Swift.String, tableView: UIKit.UITableView, controller: SAPFiori.FUIMultiUserPasscodeController) -> UIKit.UITableViewCell?
}
public protocol FUIUser {
  var image: UIKit.UIImage? { get }
  var name: Swift.String { get }
  var infoString: Swift.String? { get }
  var id: Swift.String { get }
}
extension SAPFiori.FUIMultiUserPasscodeControllerDataSource {
  public func registerUserTableViewCell(_ tableView: UIKit.UITableView, controller: SAPFiori.FUIMultiUserPasscodeController)
  public func userCell(_ userId: Swift.String, tableView: UIKit.UITableView, controller: SAPFiori.FUIMultiUserPasscodeController) -> UIKit.UITableViewCell?
}
@_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUINoteCollectionViewCell : SAPFiori.FUIInlineValidationDrawingCollectionViewCell<SAPFiori.FUINoteFormCellContentView> {
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isTrackingLiveChanges: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((Swift.String) -> Swift.Void)? {
    get
    set
  }
  @available(*, deprecated, message: "This property is deprecated. Please use the 'maxNumberOfLines' property.")
  @_Concurrency.MainActor(unsafe) public var isAutoFitting: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minNumberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxNumberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxNoteTextLength: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valueTextView: SAPFiori.FUITextView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var valueText: SAPFiori.FUIText {
    get
  }
  @objc @available(*, deprecated, message: "This property is deprecated.  Please use `placeholder.text`.")
  @IBInspectable @_Concurrency.MainActor(unsafe) public var placeholderText: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var hintText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isReadOnly: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hidesReadOnlyHint: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public var containerIsEnabled: Swift.Bool? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var maxDimensions: CoreFoundation.CGSize? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var minDimensions: CoreFoundation.CGSize? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUICalendarFloorplanViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var calendarView: SAPFiori.FUICalendarView! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var allowsStyleSwitching: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var displaysToolbar: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var calendarFloorplanDelegate: SAPFiori.FUICalendarFloorplanDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(calendarStyle: SAPFiori.FUICalendarStyle = .month, weekStartDay: SAPFiori.FUIWeekStartDay = .localeSpecific, startDate: Foundation.Date? = nil, endDate: Foundation.Date? = nil, displayDateAtStartup: Foundation.Date? = nil, allowsStyleSwitching: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
@objc public protocol FUICalendarFloorplanDelegate {
  @objc optional func didTapDone(_ controller: SAPFiori.FUICalendarFloorplanViewController)
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIInlineSignatureCollectionViewCell : SAPFiori.FUIInlineValidationDrawingCollectionViewCell<SAPFiori.FUIInlineSignatureFormView> {
  @_Concurrency.MainActor(unsafe) public var signatureStrokeWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var signatureStrokeColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var signatureBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var xMarkColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var signatureLineColor: UIKit.UIColor? {
    get
    set
  }
  public typealias ValueType = UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var value: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((UIKit.UIImage?) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var validationMessage: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hidesXMark: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hidesSignatureLine: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var addsTimestampInImage: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var timestampFormatter: Foundation.DateFormatter? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var watermarkTextAlignment: UIKit.NSTextAlignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var appliesTintColorToImage: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public struct FUISwitchControlState : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let disabled: SAPFiori.FUISwitchControlState
  public static let enabled: SAPFiori.FUISwitchControlState
  public static let selected: SAPFiori.FUISwitchControlState
  public static let unselected: SAPFiori.FUISwitchControlState
  public typealias ArrayLiteralElement = SAPFiori.FUISwitchControlState
  public typealias Element = SAPFiori.FUISwitchControlState
  public typealias RawValue = Swift.Int
}
extension SAPFiori.FUISwitchControlState : SAPFiori.Defaultable {
  public static let `default`: SAPFiori.FUISwitchControlState
}
extension SAPFiori.FUISwitchControlState : SAPFiori.Enableable {
  public static var defaultEnabled: SAPFiori.FUISwitchControlState
  public static var enabledSelected: SAPFiori.FUISwitchControlState
  public static var disabledSelected: SAPFiori.FUISwitchControlState
  public static var enabledUnselected: SAPFiori.FUISwitchControlState
  public static var disabledUnselected: SAPFiori.FUISwitchControlState
}
extension SAPFiori.FUISwitchControlState : Swift.Hashable {
}
extension SAPFiori.FUISwitchControlState : SAPFiori.FUIControlStateConvertable {
  public func transformToFUIControlState() -> SAPFiori.FUIControlState
}
public protocol FUISearchToSelectViewDelegate : AnyObject {
  func searchToSelectView(_ searchToSelectView: SAPFiori.FUISearchToSelectView, uuidForItemAt indexPath: Foundation.IndexPath) -> Swift.String?
  func searchToSelectView(_ searchToSelectView: SAPFiori.FUISearchToSelectView, tagTitleFor itemUUID: Swift.String) -> Swift.String?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISearchToSelectViewController : UIKit.UIViewController, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) public var tagsField: SAPFiori.FUISearchTagsField {
    get
  }
  @_Concurrency.MainActor(unsafe) public var tableView: UIKit.UITableView! {
    get
  }
  @_Concurrency.MainActor(unsafe) open func selectedUUIDsDidChange()
  @_Concurrency.MainActor(unsafe) open var selectedUUIDs: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var searchtoSelectViewDelegate: SAPFiori.FUISearchToSelectViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol FUIIconsComponent : AnyObject {
  var iconImages: [SAPFiori.FUIGlyphImage] { get set }
}
public protocol FUIHorizontalIconsComponent : AnyObject {
  var horizontalIcons: [SAPFiori.FUIGlyphImage] { get set }
}
public protocol FUIFootnoteIconsComponent : AnyObject {
  var footnoteIcons: [SAPFiori.FUIGlyphImage] { get set }
  var iconsSpacing: CoreFoundation.CGFloat { get set }
  var footnoteIconsMaxCount: Swift.Int? { get set }
  var footnoteIconSize: CoreFoundation.CGSize { get set }
  var isFootnoteIconCircular: Swift.Bool { get set }
  var footnoteIconsViews: [SAPFiori.FUIImageView] { get }
}
public protocol FUIEULADelegate : AnyObject {
  func eulaAccepted(on viewController: SAPFiori.FUIEULAViewController)
  func eulaRejected(on viewController: SAPFiori.FUIEULAViewController)
  func eulaCancelled(on viewController: SAPFiori.FUIEULAViewController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIEULAViewController : SAPFiori.FUIWelcomeController, UIKit.UIScrollViewDelegate {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var headlineLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var eulaTextView: UIKit.UITextView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var confirmButton: UIKit.UIBarButtonItem! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var rejectButton: UIKit.UIBarButtonItem! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var cancelButton: UIKit.UIBarButtonItem! {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIEULADelegate?
  @_Concurrency.MainActor(unsafe) open var disablesConfirmActionUntilScrollingToEnd: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public class func createInstanceFromStoryboard() -> SAPFiori.FUIEULAViewController
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) public func setEULAText(_ attrString: Foundation.NSAttributedString, replaceWithScaledFont: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol FUIOverlay : MapKit.MKOverlay, SAPFiori.FUIAnnotation {
  var overlayRenderer: [SAPFiori.FUIMapFloorplan.State : MapKit.MKOverlayRenderer] { get set }
}
public struct FUITableTextItem : SAPFiori.FUITableItem {
  public let type: SAPFiori.FUIDataItemType
  public let binding: SAPFiori.ObjectViewProperty.Text?
  public let text: Swift.String
  public let font: UIKit.UIFont?
  public let textColor: UIKit.UIColor?
  public let lineLimit: Swift.Int?
  public init(_ text: Swift.String, _ font: UIKit.UIFont? = nil, _ textColor: UIKit.UIColor? = nil, _ binding: SAPFiori.ObjectViewProperty.Text? = nil, lineLimit: Swift.Int? = nil)
}
public protocol FUIStatusMultilineComponent : SAPFiori.FUIStatusBaseComponent where Self.StatusText : SAPFiori.FUIMultiLineText {
  var status: SAPFiori.FUIMultiLineText { get }
}
public protocol FUIStatusComponent : SAPFiori.FUIStatusBaseComponent where Self.StatusText : SAPFiori.FUIText {
  var status: SAPFiori.FUIText { get }
}
public protocol FUIStatusBaseComponent : SAPFiori.FUIAttributesConsumer {
  associatedtype StatusText : SAPFiori.FUITextProtocol
  var status: Self.StatusText { get }
  var statusAttributedText: Foundation.NSAttributedString! { get set }
  var statusStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUIStatusBaseComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var statusStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension SAPFiori.FUIStatusBaseComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var statusAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
open class FUIPhoneNumberFormatter : SAPFiori.FUIFormattedStringEditing {
  open func attributedString(for string: Swift.String, withDefaultAttributes attrs: [Foundation.NSAttributedString.Key : Any]?, cursorPosition: Swift.Int) -> (formattedAttributedString: Foundation.NSAttributedString?, adjustedCursorPosition: Swift.Int)?
  public var format: Swift.String {
    get
    set
  }
  public init()
  open func string(for string: Swift.String, cursorPosition: Swift.Int) -> (formattedString: Swift.String?, adjustedCursorPosition: Swift.Int)?
  open func editingString(for obj: Any) -> Swift.String?
  open func isPartialStringValid(_ partialString: Swift.String, newEditingString newString: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUINumberFormatter : Foundation.NumberFormatter, SAPFiori.FUIFormattedStringEditing {
  open func attributedString(for string: Swift.String, withDefaultAttributes attrs: [Foundation.NSAttributedString.Key : Any]?, cursorPosition: Swift.Int) -> (formattedAttributedString: Foundation.NSAttributedString?, adjustedCursorPosition: Swift.Int)?
  open func string(for string: Swift.String, cursorPosition: Swift.Int) -> (formattedString: Swift.String?, adjustedCursorPosition: Swift.Int)?
  @objc override dynamic open func editingString(for obj: Any) -> Swift.String?
  @objc override dynamic open func isPartialStringValid(_ partialString: Swift.String, newEditingString newString: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol FUICalculateLayout {
  var container: SAPFiori.InnerViewContainerProtocols? { get set }
  func setNeedsCalculateLayout()
  func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  var needsCalculateLayout: Swift.Bool { get }
  func prepareForReuse()
}
@_Concurrency.MainActor(unsafe) open class FUIObjectFloorplan<Entity> : UIKit.UITableViewController, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate where Entity : Swift.Hashable, Entity : Swift.Identifiable {
  @_Concurrency.MainActor(unsafe) public var objectHeader: SAPFiori.FUIObjectHeader {
    get
  }
  @Combine.Published @_projectedValueProperty($object) @_Concurrency.MainActor(unsafe) public var object: Entity {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var $object: Combine.Published<Entity>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor(unsafe) open var coordinator: SAPFiori.FUICoordinator?
  @_Concurrency.MainActor(unsafe) open var objectHeaderProvider: ((Entity, SAPFiori.FUIObjectHeader) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var sectionsProvider: ((Entity) -> [SAPFiori.FUIObjectSection])?
  @_Concurrency.MainActor(unsafe) open var editButtonDidTapHandler: ((Entity) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var elementDidTapHandler: ((Any, Foundation.IndexPath) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var sectionHeaderDidTapHandler: ((UIKit.UITableViewHeaderFooterView, Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var sectionFooterDidTapHandler: ((UIKit.UITableViewHeaderFooterView, Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(object: Entity, style: SAPFiori.UITableViewStyle = .grouped, objectHeaderProvider: ((Entity, SAPFiori.FUIObjectHeader) -> Swift.Void)? = nil, sectionsProvider: ((Entity) -> [SAPFiori.FUIObjectSection])? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) open func reloadData(animatingDifference: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func reloadHeader()
  @_Concurrency.MainActor(unsafe) open func reloadSections(animatingDifference: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func element(at indexPath: Foundation.IndexPath) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseContainerView<InnerView> : SAPFiori.FUIDrawingView, SAPFiori.InnerViewContainer where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  @_Concurrency.MainActor(unsafe) public var _innerView: InnerView! {
    get
  }
  @_Concurrency.MainActor(unsafe) override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseHeaderView<InnerView> : SAPFiori.FUIBaseContainerView<InnerView> where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  @_Concurrency.MainActor(unsafe) weak public var tableView: UIKit.UITableView?
  @_Concurrency.MainActor(unsafe) override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var bannerView: SAPFiori.FUIBannerMessageView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @available(*, deprecated, message: "Header is always auto-sized.  Value will be ignored.")
  @_Concurrency.MainActor(unsafe) public var isAutoResizingHeight: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public protocol FUIManageRepresentation {
  associatedtype MapContextType
  associatedtype GeometryType : SAPFiori.FUIGeometry
  var geometry: Self.GeometryType? { get }
  var cachedGeometry: Self.GeometryType? { get set }
  var cachedIndex: Swift.Int { get set }
  func updateRepresentation(_ editingCoordinate: CoreLocation.CLLocationCoordinate2D?, add newCoordinates: [CoreLocation.CLLocationCoordinate2D], with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], from existingEditingMode: SAPFiori.FUIGeospatialType, to newEditingMode: SAPFiori.FUIGeospatialType, in colorScheme: SAPFiori.FUIBackgroundColorScheme, on context: Self.MapContextType, shouldUpdateImmediately: Swift.Bool)
  func addRepresentation(to context: Self.MapContextType)
  func removeRepresentation(from context: Self.MapContextType)
  func redrawRepresentation(in context: Self.MapContextType, with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], scheme: SAPFiori.FUIBackgroundColorScheme, traits: UIKit.UIUserInterfaceStyle)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIProgressBannerMessageView : SAPFiori.FUIBannerMessageView {
  @_Concurrency.MainActor(unsafe) public var progress: Swift.Float {
    get
  }
  @_Concurrency.MainActor(unsafe) public var didSelectHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var completionMessage: Swift.String?
  @_Concurrency.MainActor(unsafe) public var isUsingProgressBar: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let progressBar: UIKit.UIProgressView
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var closeIcon: UIKit.UIImageView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var syncIcon: UIKit.UIImageView! {
    get
  }
  @_Concurrency.MainActor(unsafe) open var completionViewDuration: Swift.Double
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func update(progress: Swift.Float, animated: Swift.Bool = false, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) override open func show(message: Swift.String, withDuration duration: Foundation.TimeInterval = 0, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
open class FUISinglePageUserConsentForm : SAPFiori.FUIUserConsentForm, SAPFiori.FUIUserConsentPageComponent {
  public var titleStyleClassPath: [SAPFiori.FioriStyle]
  public var bodyStyleClassPath: [SAPFiori.FioriStyle]
  public var actionTitleStyleClassPath: [SAPFiori.FioriStyle]
  public var attributesProvider: SAPFiori.FUIAttributesProvider?
  public var title: SAPFiori.FUIText
  public var titleAttributedText: Foundation.NSAttributedString!
  public var body: SAPFiori.FUIMultiLineText
  public var bodyAttributedText: Foundation.NSAttributedString!
  public var bodyDataDetectorTypes: UIKit.UIDataDetectorTypes
  final public let actionTitle: SAPFiori.FUIText
  public var actionTitleAttributedText: Foundation.NSAttributedString!
  public var actionHandler: ((SAPFiori.FUIUserConsentPageViewController) -> Swift.Void)?
  public var isRequired: Swift.Bool
  public var isUserAccepted: Swift.Bool {
    get
  }
  public var pages: [SAPFiori.FUIUserConsentPage] {
    get
  }
  public init()
  public func setBodyAttributedText(_ attrString: Foundation.NSAttributedString, replaceWithScaledFont: Swift.Bool = false)
  public typealias Text = SAPFiori.FUIMultiLineText
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
public enum MKEditGeometry {
  public class Point : SAPFiori.MKEditingGeometryWrapper, SAPFiori.FUIInitCoordinate {
    required override public init(_ coordinate: CoreLocation.CLLocationCoordinate2D)
    override public var geometry: MapKit.MKShape? {
      get
    }
    override public func updateRepresentation(_ editingCoordinate: CoreLocation.CLLocationCoordinate2D?, add newCoordinates: [CoreLocation.CLLocationCoordinate2D], with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], from existingEditingMode: SAPFiori.FUIGeospatialType, to newEditingMode: SAPFiori.FUIGeospatialType, in colorScheme: SAPFiori.FUIBackgroundColorScheme, on context: MapKit.MKMapView, shouldUpdateImmediately: Swift.Bool)
    override public func removeRepresentation(from context: MapKit.MKMapView)
    override public func redrawRepresentation(in context: MapKit.MKMapView, with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], scheme: SAPFiori.FUIBackgroundColorScheme, traits: UIKit.UIUserInterfaceStyle)
    @objc deinit
  }
  public class Polyline : SAPFiori.MKEditingGeometryWrapper, SAPFiori.FUIInitCoordinates {
    required override public init(_ coordinates: [CoreLocation.CLLocationCoordinate2D])
    required convenience public init(_ coordinates: [CoreLocation.CLLocationCoordinate2D], selectedIndex: Swift.Int)
    override public var geometry: MapKit.MKShape? {
      get
    }
    override public func updateRepresentation(_ editingCoordinate: CoreLocation.CLLocationCoordinate2D?, add newCoordinates: [CoreLocation.CLLocationCoordinate2D], with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], from existingEditingMode: SAPFiori.FUIGeospatialType, to newEditingMode: SAPFiori.FUIGeospatialType, in colorScheme: SAPFiori.FUIBackgroundColorScheme, on context: SAPFiori.MKEditGeometry.Polyline.MapContextType, shouldUpdateImmediately: Swift.Bool)
    override public func removeRepresentation(from context: MapKit.MKMapView)
    override public func redrawRepresentation(in context: MapKit.MKMapView, with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], scheme: SAPFiori.FUIBackgroundColorScheme, traits: UIKit.UIUserInterfaceStyle)
    @objc deinit
  }
  @_inheritsConvenienceInitializers public class Polygon : SAPFiori.MKEditGeometry.Polyline {
    override public var geometry: MapKit.MKShape? {
      get
    }
    override public func removeRepresentation(from context: MapKit.MKMapView)
    required public init(_ coordinates: [CoreLocation.CLLocationCoordinate2D])
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIChartFloorplanViewController : SAPFiori.FUIBaseDrawingViewController<SAPFiori.FUIChartFloorplanView>, SAPFiori.FUIBackgroundSchemeSupporting {
  @_Concurrency.MainActor(unsafe) public var titleText: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var titleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var status: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var statusAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var statusStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valuesAxisTitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var secondaryValuesAxisTitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var valuesAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var secondaryValuesAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var secondaryValuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var categoryAxisTitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var categoryAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var categoryAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var seriesTitles: [SAPFiori.FUIText] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var seriesTitlesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowLegendViewSeriesSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var seriesTitlesStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @available(*, deprecated, message: "Will be unavailable in newer SDK version.")
  @_Concurrency.MainActor(unsafe) public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var chartView: SAPFiori.FUIChartView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var legendView: SAPFiori.FUIChartLegendView {
    get
  }
  @available(*, unavailable, renamed: "summaryView")
  @_Concurrency.MainActor(unsafe) public var headerView: SAPFiori.FUIChartSummaryView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var summaryView: SAPFiori.FUIChartSummaryView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public protocol FUISwitchComponent : SAPFiori.FUIAttributesConsumer {
  var value: Swift.Bool { get set }
  var switchView: UIKit.UISwitch { get }
  var onChangeHandler: ((Swift.Bool) -> Swift.Void)? { get set }
  var switchStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUISwitchComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var switchStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@_inheritsConvenienceInitializers public class FUITagText : SAPFiori.FUIText {
  public var contentInsets: UIKit.NSDirectionalEdgeInsets?
  public var cornerRadius: CoreFoundation.CGFloat?
  public var fillColor: UIKit.UIColor?
  public var borderColor: UIKit.UIColor?
  @available(*, unavailable, message: "'borderWidth' is no longer supported.")
  public var borderWidth: CoreFoundation.CGFloat?
  override public func attributes() -> [SAPFiori.NSAttributedStringKey : Any]
  public func mergeAttributes(with attr: [SAPFiori.NSAttributedStringKey : Any]) -> [SAPFiori.NSAttributedStringKey : Any]
  required public init(stringLiteral value: Swift.String)
  override public init(_ value: Swift.String)
  override public init(_ value: Swift.String, font: UIKit.UIFont? = nil, textColor: UIKit.UIColor? = nil)
  required public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class FUIEditingPanel<GeometryType> where GeometryType : SAPFiori.FUIGeometry {
  public var createGeometryItems: [SAPFiori.FUIMapLegendItem]
  public var basemapTypes: [MapKit.MKMapType] {
    get
    set
  }
  public var isCreatePointEnabled: Swift.Bool {
    get
    set
  }
  public var isCreatePolylineEnabled: Swift.Bool {
    get
    set
  }
  public var isCreatePolygonEnabled: Swift.Bool {
    get
    set
  }
  public var createGeometryResultsController: UIKit.UIViewController {
    get
    set
  }
  public var willShowCreateGeometryResultsController: ((UIKit.UIViewController) -> Swift.Void)?
  public var didDismissGeometryResultsController: ((UIKit.UIViewController, SAPFiori.FUIMapEditingToolbarButtonActionType) -> Swift.Void)?
  @available(*, unavailable, renamed: "didCommitGeometryResults")
  public var didSaveResults: ((GeometryType, SAPFiori.FUIMapLegendItem) -> Swift.Void)?
  public var didCommitGeometryResults: ((GeometryType, SAPFiori.FUIMapLegendItem) -> Swift.Void)?
  public var didChangeBaseMapType: ((MapKit.MKMapType) -> Swift.Void)?
  public var defaultEditingMode: SAPFiori.FUIGeospatialType {
    get
    set
  }
  @objc deinit
}
public enum FUIMapEditingToolbarButtonActionType {
  case didSaveEditingGeometry
  case didCancelEditingGeometry
  public static func == (a: SAPFiori.FUIMapEditingToolbarButtonActionType, b: SAPFiori.FUIMapEditingToolbarButtonActionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, deprecated, message: "Please use `FUIDetailImageViewComponent` instead")
public protocol FUIPlaceholderDetailImageViewComponent : SAPFiori.FUIAttributesConsumer {
  var detailImageView: SAPFiori.FUIPlaceholderImageView { get set }
}
public protocol FUIStatusImageComponent : SAPFiori.FUIStatusMultilineComponent {
  var statusImage: UIKit.UIImage? { get set }
  var statusImageStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUIStatusImageComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var statusImageStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension SAPFiori.FUIStatusImageComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var statusAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
public protocol FUIGeometry : Swift.Hashable {
}
extension MapKit.MKShape : SAPFiori.FUIGeometry {
}
extension SAPFiori.FUIMapDetailPanel {
  @objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class ActionTableViewCell : SAPFiori.FUIBaseTableViewCell, SAPFiori.FUIBackgroundSchemeSupporting {
    @_Concurrency.MainActor(unsafe) final public let actionTitleLabel: UIKit.UILabel
    @_Concurrency.MainActor(unsafe) final public let actionImageView: UIKit.UIImageView
    @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
      get
    }
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
    @_Concurrency.MainActor(unsafe) public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme
    @_Concurrency.MainActor(unsafe) override open func applyTintColor(forState state: SAPFiori.UIControlState)
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
    @_Concurrency.MainActor(unsafe) override open func stateDidChange()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
    @objc deinit
  }
}
@available(*, unavailable, renamed: "FUIMapDetailPanel.ActionTableViewCell")
public typealias FUIMapDetailActionTableViewCell = SAPFiori.FUIMapDetailPanel.ActionTableViewCell
extension CoreFoundation.CGRectEdge : Swift.CaseIterable {
  public static var allCases: [CoreFoundation.CGRectEdge] {
    get
  }
  public typealias AllCases = [CoreFoundation.CGRectEdge]
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIValuesComponent {
  public var values: [Swift.String] {
    get
    set
  }
  public var valuesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var valuesStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public protocol FUIPolyline : SAPFiori.FUIGeometry {
}
extension MapKit.MKPolyline : SAPFiori.FUIPolyline {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIMapFloorplanContentView : SAPFiori.FUIBaseDrawingView, SAPFiori.FUIMapFloorplanComponent {
  @_Concurrency.MainActor(unsafe) open var toolbar: SAPFiori.FUIMapToolbar!
  @_Concurrency.MainActor(unsafe) open var detailPanel: SAPFiori.FUIMapDetailPanel! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public protocol InnerViewContainer : SAPFiori.InnerViewContainerDimensions, SAPFiori.InnerViewContainerEnabled {
  associatedtype InnerView : SAPFiori.FUIBaseFixedMarginsView, SAPFiori.FUIBackgroundSchemeSupporting, SAPFiori.FUICalculateLayout, SAPFiori.FUIStyleByStringAttributes
  var _innerView: Self.InnerView! { get }
}
public typealias InnerViewContainerProtocols = SAPFiori.InnerViewContainerDimensions & SAPFiori.InnerViewContainerEnabled
public protocol InnerViewContainerDimensions : AnyObject {
  var bounds: CoreFoundation.CGRect { get }
  @available(iOS 11.0, *)
  var safeAreaInsets: UIKit.UIEdgeInsets { get }
  var maxDimensions: CoreFoundation.CGSize? { get }
  var minDimensions: CoreFoundation.CGSize? { get }
  var inlineValidationViewHeight: CoreFoundation.CGFloat { get }
  func scrollToVisible()
}
public protocol InnerViewContainerEnabled : AnyObject {
  var containerIsEnabled: Swift.Bool? { get }
}
extension SAPFiori.InnerViewContainerEnabled {
  public var containerIsEnabled: Swift.Bool? {
    get
  }
}
extension SAPFiori.InnerViewContainerEnabled where Self : UIKit.UICollectionViewCell {
  public var containerIsEnabled: Swift.Bool? {
    get
  }
}
extension SAPFiori.InnerViewContainerDimensions {
  public var maxDimensions: CoreFoundation.CGSize? {
    get
  }
  public var minDimensions: CoreFoundation.CGSize? {
    get
  }
  public var inlineValidationViewHeight: CoreFoundation.CGFloat {
    get
  }
  public func scrollToVisible()
}
extension SAPFiori.InnerViewContainer where Self : SAPFiori.FUIBaseTableViewCell {
  public var fixedDirectionalLayoutMargins: UIKit.NSDirectionalEdgeInsets {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIDrawingView : SAPFiori.FUIBaseDrawingView, SAPFiori.FUIAttributesProvider {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIChartFloorplanTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIChartFloorplanView> {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) public var chartView: SAPFiori.FUIChartView {
    get
  }
  @available(*, unavailable, renamed: "summaryView")
  @_Concurrency.MainActor(unsafe) public var headerView: SAPFiori.FUIChartSummaryView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var summaryView: SAPFiori.FUIChartSummaryView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUINavigationBar : UIKit.UINavigationBar {
  @_Concurrency.MainActor(unsafe) open var bannerView: SAPFiori.FUIBannerMessageView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var barTintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
extension UIKit.UINavigationBar {
  public enum FioriStyleVersion {
    case v1
    case v2
    public static func == (a: UIKit.UINavigationBar.FioriStyleVersion, b: UIKit.UINavigationBar.FioriStyleVersion) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public static func applyFioriStyle(_ v: UIKit.UINavigationBar.FioriStyleVersion = .v2)
  @available(*, unavailable, message: "Use static func instead: UINavigationBar.applyFioriStyle()")
  @_Concurrency.MainActor(unsafe) public func applyFioriStyle()
  @_Concurrency.MainActor(unsafe) public func extendBackgroundColorToTop()
  @_Concurrency.MainActor(unsafe) public func removeExtendeBackgroundColorView()
}
extension UIKit.UINavigationItem {
  @_Concurrency.MainActor(unsafe) public func setTitleView(_ title: Swift.String, subtitle: Swift.String? = nil, withPopover: Swift.Bool = false)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func setTitleView(_ title: Swift.String, subtitle: Swift.String? = nil, withPopover: Swift.Bool = false)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIHierarchyCollectionViewLayout : UIKit.UICollectionViewLayout, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) open var sectionInset: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) open var interItemSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open var showVerticalScrollIndicator: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var invalidationContextClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var flipsHorizontallyInOppositeLayoutDirection: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var collectionViewContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForElements(in rect: CoreFoundation.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForDecorationView(ofKind elementKind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func invalidateLayout(with context: UIKit.UICollectionViewLayoutInvalidationContext)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func invalidationContext(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> UIKit.UICollectionViewLayoutInvalidationContext
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func shouldInvalidateLayout(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare(forCollectionViewUpdates updateItems: [UIKit.UICollectionViewUpdateItem])
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func targetContentOffset(forProposedContentOffset proposedContentOffset: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func targetContentOffset(forProposedContentOffset proposedContentOffset: CoreFoundation.CGPoint, withScrollingVelocity velocity: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIGridTableViewHeader : SAPFiori.FUIGridTableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIRatingControlCollectionViewCell : SAPFiori.FUIInlineValidationDrawingCollectionViewCell<SAPFiori.FUIRatingControlContentView> {
  @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var ratingControl: SAPFiori.FUIRatingControl {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var value: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.Int) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var truncatesKeyLabel: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIInlineValidationUIControlTintTableViewCell : SAPFiori.FUIInlineValidationTableViewCell, SAPFiori.FUIStyleByTintAttributes {
  public typealias TintState = UIKit.UIControl.State
  @_Concurrency.MainActor(unsafe) public var tintAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIInlineValidationUIControlTintTableViewCell.TintState : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tintState: UIKit.UIControl.State {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public protocol FUIEmptyValueComponent : SAPFiori.FUIAttributesConsumer {
  var emptyText: SAPFiori.FUIText { get set }
  var emptyTextStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUIEmptyValueComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var emptyTextStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseTableViewHeaderFooterView : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var topPadding: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var bottomPadding: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var selectionStyle: SAPFiori.UITableViewCellSelectionStyle
  @_Concurrency.MainActor(unsafe) open var borders: UIKit.UIRectEdge {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setBackgroundColor(_ color: UIKit.UIColor, forState state: SAPFiori.UIControlState = .normal)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc deinit
}
public protocol FUIPropertyFormCell : SAPFiori.FUIFormCell {
  var keyName: Swift.String? { get set }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUITextFieldFormCell : SAPFiori.FUIInlineValidationDrawingTableViewCell<SAPFiori.FUITextFieldContentView>, SAPFiori.FUIFormCell {
  public enum Version {
    case v1
    case v2
    public static func == (a: SAPFiori.FUITextFieldFormCell.Version, b: SAPFiori.FUITextFieldFormCell.Version) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var version: SAPFiori.FUITextFieldFormCell.Version {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var keyName: Swift.String? {
    get
    set
  }
  @available(*, deprecated, message: "This property has been deprecated.  Please set the `title.text` property.")
  @_Concurrency.MainActor(unsafe) public var keyLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open var valueTextField: SAPFiori.FUITextField {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isStacked: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maxKeyWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var alternativeInputButton: SAPFiori.FUIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isAlternativeInputEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxTextLength: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((Swift.String) -> Swift.Void)? {
    get
    set
  }
  @available(*, deprecated, message: "This property is deprecated.  Please use `placeholder.text`.")
  @_Concurrency.MainActor(unsafe) open var placeholderText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var formatter: SAPFiori.FUIFormattedStringEditing? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isTrackingLiveChanges: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var valueTextAlignment: UIKit.NSTextAlignment? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hintText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isReadOnly: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hidesReadOnlyHint: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  @_Concurrency.MainActor(unsafe) override public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias ValueType = Swift.String
  @objc deinit
}
extension SAPFiori.FUITextFieldFormCell : SAPFiori.FUITintAttributesProvider {
  @_Concurrency.MainActor(unsafe) public var tintAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIControlState : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tintState: SAPFiori.FUIControlState {
    get
    set
  }
  public typealias TintState = SAPFiori.FUIControlState
  @_Concurrency.MainActor(unsafe) public func tintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) public func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUITextFieldFormCell.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUITextFieldFormCell.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
}
@available(*, deprecated, renamed: "FUITextFieldFormCell")
public typealias FUISimplePropertyFormCell = SAPFiori.FUITextFieldFormCell
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIImageView : UIKit.UIImageView, SAPFiori.InnerViewContainer {
  @_Concurrency.MainActor(unsafe) public var _innerView: SAPFiori.FUIPlaceholderView! {
    get
  }
  public typealias InnerView = SAPFiori.FUIPlaceholderView
  @_Concurrency.MainActor(unsafe) public var isEmpty: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((UIKit.UIImage?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isGradientLayerEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var gradientLayerColors: [CoreGraphics.CGColor]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var placeholderBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isCircular: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var maskType: SAPFiori.FUIImageView.MaskType {
    get
    set
  }
  public enum MaskType : Swift.Equatable {
    case circular
    case roundedCorner(_: CoreFoundation.CGFloat?)
    case none
    public static func == (lhs: SAPFiori.FUIImageView.MaskType, rhs: SAPFiori.FUIImageView.MaskType) -> Swift.Bool
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var borderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var forFirstBaselineLayout: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var forLastBaselineLayout: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var baselineDescenderHeight: CoreFoundation.CGFloat {
    get
    set
  }
}
@_inheritsConvenienceInitializers public class FUIChartRangeSummaryItem : SAPFiori.FUIChartSummaryItemType {
  required public init()
  public var lowerBoundTitle: SAPFiori.FUIText
  public var upperBoundTitle: SAPFiori.FUIText
  public var isEnabled: Swift.Bool
  public var value: SAPFiori.FUIText
  public var categoryRange: Swift.ClosedRange<Swift.Int>
  public var trend: SAPFiori.FUIText
  public var trendImage: UIKit.UIImage?
  public var trendSemanticColor: UIKit.UIColor?
  public var sortableCategoryRange: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseDrawingCollectionViewCell<InnerView> : UIKit.UICollectionViewCell, SAPFiori.FUIStyleByStringAttributes, SAPFiori.InnerViewContainer where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isMomentarySelection: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var _innerView: InnerView! {
    get
  }
  @_Concurrency.MainActor(unsafe) open var inlineValidationViewHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutMarginsDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var borders: UIKit.UIRectEdge {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var borderColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var borderWeights: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var topBorderWeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leftBorderWeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var bottomBorderWeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var rightBorderWeight: CoreFoundation.CGFloat {
    get
    set
  }
  @available(*, unavailable, message: "`topBorder` is now drawn as layer, please use other border APIs to modify.")
  @_Concurrency.MainActor(unsafe) public var topBorder: UIKit.UIView {
    get
  }
  @available(*, unavailable, message: "`leftBorder` is now drawn as layer, please use other border APIs to modify.")
  @_Concurrency.MainActor(unsafe) public var leftBorder: UIKit.UIView {
    get
  }
  @available(*, unavailable, message: "`bottomBorder` is now drawn as layer, please use other border APIs to modify.")
  @_Concurrency.MainActor(unsafe) public var bottomBorder: UIKit.UIView {
    get
  }
  @available(*, unavailable, message: "`rightBorder` is now drawn as layer, please use other border APIs to modify.")
  @_Concurrency.MainActor(unsafe) public var rightBorder: UIKit.UIView {
    get
  }
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIObjectHeaderViewComponent {
  public var bodyLabel: SAPFiori.FUILabel {
    get
  }
  public var bodyText: Swift.String? {
    get
    set
  }
  public var detailContentView: UIKit.UIView? {
    get
    set
  }
  public var labelItems: [SAPFiori.FUILabelItem] {
    get
    set
  }
  public var numberOfLabelItems: Swift.Int {
    get
    set
  }
  public var kpiView: SAPFiori.FUIKPIView? {
    get
    set
  }
  public var statusImageViewAlignment: SAPFiori.FUILabelItem.Alignment {
    get
    set
  }
  public var substatusImageViewAlignment: SAPFiori.FUILabelItem.Alignment {
    get
    set
  }
}
@objc @_Concurrency.MainActor(unsafe) public class FUIFilterValueView : UIKit.UIControl, SAPFiori.Initializable, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) public var value: [Swift.Int] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsMultipleSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var filterGroup: SAPFiori.FUIFilterGroup? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsEmptySelection: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var segmentWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var segmentHeight: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var buttonStyle: SAPFiori.FUIFilterButtonSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var apportionsSegmentWidthsByContent: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: (([Swift.Int]) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) required public init(style: SAPFiori.FUIFilterButtonSize)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) public func getSegmentedControlWidth() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var isStacked: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func setButtonAttributes(_ buttonAttributes: SAPFiori.FUISegmentedControlButtonAttributes, for state: SAPFiori.FUIControlState)
  @_Concurrency.MainActor(unsafe) public func updateAccessibilityLabelForSegmendControl()
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didDeselectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, shouldDeselectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIObjectView : SAPFiori.FUIObjectViewBase, SAPFiori.FUIObjectViewComponent, SAPFiori.FUIIconsComponent, SAPFiori.FUIHorizontalIconsComponent, SAPFiori.FUITagsComponent, SAPFiori.FUIFootnoteIconsComponent {
  @_Concurrency.MainActor(unsafe) public var tags: [SAPFiori.FUITag] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfTagLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var headlineLabel: SAPFiori.FUILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var subheadlineLabel: SAPFiori.FUILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var footnoteLabel: SAPFiori.FUILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var descriptionLabel: SAPFiori.FUILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var statusLabel: SAPFiori.FUILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var substatusLabel: SAPFiori.FUILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var statusImageView: SAPFiori.FUIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var substatusImageView: SAPFiori.FUIImageView {
    get
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var detailImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var headlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var subheadlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var footnoteText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var statusDisplayMode: SAPFiori.FUIStatusDisplayMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var substatusDisplayMode: SAPFiori.FUISubstatusDisplayMode {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var statusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var statusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var substatusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var substatusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var iconImages: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var horizontalIcons: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public protocol FUIStep {
}
public enum FUIObjectStep : SAPFiori.FUIStep {
  case display(Any)
  case edit(Any)
  case create
  case editingFinished(Swift.Result<Any?, Swift.Error>)
}
public protocol FUICoordinator : AnyObject {
  var hostingViewController: UIKit.UIViewController! { get }
  var parentCoordinator: SAPFiori.FUICoordinator? { get set }
  func navigate(to step: SAPFiori.FUIStep)
}
public protocol FUIStyleTintByStringAttributes : SAPFiori.FUIStyleByStringAttributes {
  associatedtype TintState : SAPFiori.Defaultable, SAPFiori.Enableable, Swift.Hashable
  var cachedTintAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [Self.TintState : [SAPFiori.NSAttributedStringKey : Any]]]] { get set }
  func getStylesForTintStates(property: SAPFiori.FUIPropertyRef, source: SAPFiori.FUIStyleClassSource, styleType: SAPFiori.FUIStyleType, states: [Self.TintState])
  var tintablePropertyRefs: [SAPFiori.FUIPropertyRef : [Self.TintState]] { get set }
}
extension SAPFiori.FUIStyleTintByStringAttributes {
  public func getStylesForTintStates(property: SAPFiori.FUIPropertyRef, source: SAPFiori.FUIStyleClassSource, styleType: SAPFiori.FUIStyleType, states: [Self.TintState])
  public func getStylesForTintStates(property: SAPFiori.FUIPropertyRef, source: SAPFiori.FUIStyleClassSource, styleType: SAPFiori.FUIStyleType, states: [SAPFiori.FUIControlState], tintStates: [Self.TintState])
}
public protocol FUIPaletteProvider : SAPFiori._PaletteProvider {
  @available(*, deprecated, renamed: "hexColor(for:)")
  func hexColor(for style: SAPFiori.FUIColorStyle, variant: SAPFiori.FUIColorVariant) -> SAPFiori.FUIPaletteHexColor
}
extension SAPFiori.FUIPaletteProvider {
  @available(*, deprecated, renamed: "hexColor(for:)")
  public func hexColor(for style: SAPFiori.FUIColorStyle, variant: SAPFiori.FUIColorVariant) -> SAPFiori.FUIPaletteHexColor
}
public protocol FUIAttachmentsViewControllerDelegate : AnyObject {
  func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, didPressDeleteAtIndex index: Swift.Int)
  func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, couldNotPresentAttachmentAtIndex index: Swift.Int)
  func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, didSelectAtIndex index: Swift.Int) -> Swift.Bool
  func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, willShowAttachment cell: UIKit.UICollectionViewCell, cellForItemAt index: Swift.Int) -> UIKit.UICollectionViewCell?
}
extension SAPFiori.FUIAttachmentsViewControllerDelegate {
  public func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, didSelectAtIndex index: Swift.Int) -> Swift.Bool
  public func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, willShowAttachment cell: UIKit.UICollectionViewCell, cellForItemAt index: Swift.Int) -> UIKit.UICollectionViewCell?
}
extension SAPFiori.FUIFeedbackScreen {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class UserTransactionErrorController : SAPFiori.FUIFeedbackScreen.ErrorController {
    @_Concurrency.MainActor(unsafe) final public let detailMessageLabel: SAPFiori.FUILabel
    @_Concurrency.MainActor(unsafe) final public let userImageView: SAPFiori.FUIImageView
    @_Concurrency.MainActor(unsafe) final public let userNameLabel: SAPFiori.FUILabel
    @_Concurrency.MainActor(unsafe) final public let userInfoLabel: SAPFiori.FUILabel
    @_Concurrency.MainActor(unsafe) public var user: SAPFiori.FUIUser? {
      get
      set
    }
    @_Concurrency.MainActor(unsafe) public var showsUserImage: Swift.Bool
    @_Concurrency.MainActor(unsafe) public var showsUserInfo: Swift.Bool
    @_Concurrency.MainActor(unsafe) public var onReturnToLoginHandler: ((SAPFiori.FUIFeedbackScreen.UserTransactionErrorController) -> Swift.Void)?
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
    @objc deinit
  }
}
public protocol FUIDetailImageViewComponent : SAPFiori.FUIAttributesConsumer {
  var detailImageView: SAPFiori.FUIImageView { get }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUICardCollectionViewTableViewCell : SAPFiori.FUIBaseCollectionViewTableViewCell {
  @_Concurrency.MainActor(unsafe) public var isAllowingFlowLayout: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutMarginsDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol FUIAxisTitleComponent : SAPFiori.FUIAttributesConsumer {
  var valuesAxisTitle: SAPFiori.FUIText { get }
  var valuesAxisTitleAttributedText: Foundation.NSAttributedString! { get set }
  var valuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var secondaryValuesAxisTitle: SAPFiori.FUIText { get }
  var secondaryValuesAxisTitleAttributedText: Foundation.NSAttributedString! { get set }
  var secondaryValuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var categoryAxisTitle: SAPFiori.FUIText { get }
  var categoryAxisTitleAttributedText: Foundation.NSAttributedString! { get set }
  var categoryAxisTitleStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension SAPFiori.FUIAxisTitleComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var valuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var secondaryValuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var categoryAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension SAPFiori.FUIAxisTitleComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var valuesAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var secondaryValuesAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var categoryAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIListCardComponent {
  public typealias ItemIdentifier = Self.InnerView.ItemIdentifier
  public var tableView: UIKit.UITableView {
    get
  }
  public var cellTappedHandler: ((Foundation.IndexPath, Self.ItemIdentifier) -> Swift.Void)? {
    get
    set
  }
  public var dataSource: UIKit.UITableViewDiffableDataSource<Swift.Int, Self.ItemIdentifier>! {
    get
  }
  public var cellProvider: ((UIKit.UITableView, Foundation.IndexPath, Self.ItemIdentifier) -> UIKit.UITableViewCell)? {
    get
    set
  }
  public func register(_ cellClass: Swift.AnyClass?, forCellReuseIdentifier identifier: Swift.String)
  public func setItems(_ items: [Self.ItemIdentifier])
  public func appendItems(_ items: [Self.ItemIdentifier])
  public func deleteItems(_ items: [Self.ItemIdentifier])
  public func deleteAllItems()
  public func insertItems(_ items: [Self.ItemIdentifier], beforeItem: Self.ItemIdentifier)
  public func insertItems(_ items: [Self.ItemIdentifier], afterItem: Self.ItemIdentifier)
  public func moveItem(_ item: Self.ItemIdentifier, beforeItem: Self.ItemIdentifier)
  public func moveItem(_ item: Self.ItemIdentifier, afterItem: Self.ItemIdentifier)
  public func reloadItems(_ items: [Self.ItemIdentifier])
}
@objc @_inheritsConvenienceInitializers open class FUICalloutAnnotation : MapKit.MKPointAnnotation, SAPFiori.FUIAnnotation {
  open var state: SAPFiori.FUIMapFloorplan.State
  public var layer: SAPFiori.FUIGeometryLayer
  public var indexPath: Foundation.IndexPath
  @objc override dynamic public init()
  @objc deinit
}
public enum FUIKPIViewItemStyle {
  case metric
  case unit
  case icon
  case fraction
  public static func == (a: SAPFiori.FUIKPIViewItemStyle, b: SAPFiori.FUIKPIViewItemStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol FUIKPIViewItem {
  var style: SAPFiori.FUIKPIViewItemStyle { get }
  var attributedString: Foundation.NSAttributedString { get }
  var attributes: [SAPFiori.NSAttributedStringKey : Any] { get set }
  var accessibilityLabel: Swift.String? { get set }
  var accessibilityValue: Swift.String? { get set }
  var accessibilityHint: Swift.String? { get set }
  var accessibilityTraits: UIKit.UIAccessibilityTraits { get set }
  var accessibilityPath: UIKit.UIBezierPath? { get set }
  var accessibilityLanguage: Swift.String? { get set }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIMapDetailTagObjectTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIMapDetailTagObjectView> {
  @_Concurrency.MainActor(unsafe) public var tags: [SAPFiori.FUITag] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUITagsComponent {
  public var tags: [SAPFiori.FUITag] {
    get
    set
  }
  public var numberOfTagLines: Swift.Int {
    get
    set
  }
  public var tagsAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var tagsStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public struct FUIMapLegendLine {
  public var dashPattern: [Foundation.NSNumber]?
  public var dashPhase: CoreFoundation.CGFloat?
  public init(dashPattern: [Foundation.NSNumber]? = nil, dashPhase: CoreFoundation.CGFloat? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBannerMessageView : SAPFiori.NibDesignable {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var blurView: UIKit.UIVisualEffectView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var dividerTop: UIKit.UIView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var dividerBottom: UIKit.UIView! {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var navigationBar: UIKit.UINavigationBar?
  @_Concurrency.MainActor(unsafe) weak public var headerView: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) public var isFading: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var dismissHandler: ((SAPFiori.FUIBannerMessageView) -> Swift.Void)?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var closeImage: UIKit.UIImageView! {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func show(message: Swift.String, withDuration duration: Foundation.TimeInterval = 0, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func dismissBanner(animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIStatusImageComponent {
  public var statusImage: UIKit.UIImage? {
    get
    set
  }
  public var statusImageStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public class FUITag : SAPFiori.FUITagText {
  open var colorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  public init(title: Swift.String, colorScheme: SAPFiori.FUIBackgroundColorScheme = .device)
  required public init(stringLiteral value: Swift.String)
  required public init()
  @available(*, deprecated, message: "This property is deprecated. Please use 'fillColor' property.")
  public var backgroundColor: UIKit.UIColor? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIDynamicAuthenticationScreen : SAPFiori.FUIWelcomeController, UIKit.UIScrollViewDelegate {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var detailLabel: UIKit.UILabel! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var informationFields: [SAPFiori.FUIAuthenticationInformationField]?
  @_Concurrency.MainActor(unsafe) public var verifyingMessage: Swift.String?
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIDynamicAuthenticationDelegate?
  @_Concurrency.MainActor(unsafe) public class func createInstanceFromStoryboard() -> (navigationController: UIKit.UINavigationController, dynamicAuthenticationScreen: SAPFiori.FUIDynamicAuthenticationScreen)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension SAPFiori.FUIDynamicAuthenticationScreen {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension SAPFiori.FUIDynamicAuthenticationScreen : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
public struct FUIAuthenticationInformationField {
  public var placeholder: Swift.String
  public var isSecureText: Swift.Bool
  public var informationString: Swift.String?
  public init(placeholder: Swift.String, isSecureText: Swift.Bool, informationString: Swift.String?)
}
public protocol FUIDynamicAuthenticationDelegate : AnyObject {
  func verify(_ controller: SAPFiori.FUIDynamicAuthenticationScreen, informationStrings: [Swift.String], completion: @escaping ((_ errorMessage: Swift.String?) -> Swift.Void))
  func didCancel(_ controller: SAPFiori.FUIDynamicAuthenticationScreen)
}
public protocol NibDesignableProtocol : ObjectiveC.NSObjectProtocol {
  var nibContainerView: UIKit.UIView { get }
  var nibName: Swift.String { get }
  var bundle: Foundation.Bundle { get }
  var nibLoadingClass: Swift.AnyClass { get }
}
extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic open var nibContainerView: UIKit.UIView {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var nibName: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var bundle: Foundation.Bundle {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class NibDesignable : UIKit.UIView, SAPFiori.NibDesignableProtocol {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class NibDesignableTableViewCell : UIKit.UITableViewCell, SAPFiori.NibDesignableProtocol {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibContainerView: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class NibDesignableFUIBaseTableViewCell : SAPFiori.FUIBaseTableViewCell, SAPFiori.NibDesignableProtocol {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibContainerView: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class NibDesignableControl : UIKit.UIControl, SAPFiori.NibDesignableProtocol {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class NibDesignableTableViewHeaderFooterView : UIKit.UITableViewHeaderFooterView, SAPFiori.NibDesignableProtocol {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibContainerView: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class NibDesignableCollectionReusableView : UIKit.UICollectionReusableView, SAPFiori.NibDesignableProtocol {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class NibDesignableCollectionViewCell : UIKit.UICollectionViewCell, SAPFiori.NibDesignableProtocol {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibContainerView: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class NibDesignableFUIBaseCollectionViewCell : SAPFiori.FUIBaseCollectionViewCell, SAPFiori.NibDesignableProtocol {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibContainerView: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
extension SAPFiori.FUIMapToolbar {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SettingsButton : SAPFiori.FUIMapToolbarButton {
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) override public init(type: SAPFiori.FUIMapToolbarButtonType)
    @objc deinit
  }
}
@available(*, unavailable, renamed: "FUIMapToolbar.SettingsButton")
public typealias FUIMapToolbarSettingsButton = SAPFiori.FUIMapToolbar.SettingsButton
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIValueComponent {
  public var value: Self.InnerView.ValueType {
    get
    set
  }
  public var valueAttributedText: Foundation.NSAttributedString {
    get
    set
  }
  public var valueStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public protocol FUIStateSelectable {
  var isEnabled: Swift.Bool { get set }
  var isSelected: Swift.Bool { get set }
  var isHighlighted: Swift.Bool { get set }
  var tintAdjustmentMode: SAPFiori.UIViewTintAdjustmentMode { get set }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIAutofittingDrawingTableViewCell<InnerView> : SAPFiori.FUIInlineValidationDrawingTableViewCell<InnerView> where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  @_Concurrency.MainActor(unsafe) override open var validationMessage: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @objc deinit
  @_Concurrency.MainActor(unsafe) override public var containerIsEnabled: Swift.Bool? {
    get
  }
  @_Concurrency.MainActor(unsafe) override open var maxDimensions: CoreFoundation.CGSize? {
    get
  }
  @_Concurrency.MainActor(unsafe) override open var minDimensions: CoreFoundation.CGSize? {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func scrollToVisible()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
}
extension UIKit.UIControl.State {
  public static var enabled: UIKit.UIControl.State {
    get
  }
  public static let readOnly: UIKit.UIControl.State
}
extension UIKit.UIControl.State : SAPFiori.Defaultable, SAPFiori.Enableable {
  public static let `default`: SAPFiori.UIControlState
  public static let defaultEnabled: SAPFiori.UIControlState
}
extension UIKit.UIControl.State : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIKPIView : SAPFiori.NibDesignableControl, SAPFiori.FUIStateTintable, SAPFiori.FUIStateTintableImplementation, SAPFiori.FUIKPIContainer {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) public var alignment: UIKit.UIStackView.Alignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var didSelectHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @available(*, deprecated, message: "Will be unavailble in newer SDK version.")
  @_Concurrency.MainActor(unsafe) public var colorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var captionlabel: SAPFiori.FUILabel! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var items: [SAPFiori.FUIKPIViewItem]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func applyTintColor(forState state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var forFirstBaselineLayout: UIKit.UIView {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var forLastBaselineLayout: UIKit.UIView {
    @objc get
  }
  public enum LeadingItemKerning {
    case none
    case `default`
    case repeatingFraction
    case repeatingUnit
    public static func == (a: SAPFiori.FUIKPIView.LeadingItemKerning, b: SAPFiori.FUIKPIView.LeadingItemKerning) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var tintColorForState: [SAPFiori.UIControlState : UIKit.UIColor]
  @_Concurrency.MainActor(unsafe) public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) public func tintColor(for state: SAPFiori.UIControlState) -> UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public var _isTintColorOverridden: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isUserInteractionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(_ sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resignFirstResponder() -> Swift.Bool
  @objc deinit
}
public protocol FUIKPIContainer {
  func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  var isEnabled: Swift.Bool { get set }
  var isHighlighted: Swift.Bool { get set }
}
extension SAPFiori.FUIKPIView : SAPFiori.FUIStateSelectable {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUITextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override weak dynamic open var delegate: UIKit.UITextViewDelegate? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var placeholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var attributedPlaceholder: Foundation.NSAttributedString? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var placeholderTextColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(_ sender: Any?)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class FUILabelItem : SAPFiori.FUIDrawingView {
  @_Concurrency.MainActor(unsafe) public var classPath: [SAPFiori.FioriStyle]
  @_Concurrency.MainActor(unsafe) public var label: SAPFiori.FUILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var iconView: SAPFiori.FUIImageView? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var spacing: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var alignment: SAPFiori.FUILabelItem.Alignment {
    get
  }
  public enum Alignment : Swift.Int, Swift.CaseIterable {
    case leading, trailing
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [SAPFiori.FUILabelItem.Alignment]
    public typealias RawValue = Swift.Int
    public static var allCases: [SAPFiori.FUILabelItem.Alignment] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public init(text: Swift.String, image: UIKit.UIImage? = nil, spacing: CoreFoundation.CGFloat = 2, alignment: SAPFiori.FUILabelItem.Alignment = .trailing)
  @_Concurrency.MainActor(unsafe) public init(label: SAPFiori.FUILabel, imageView: SAPFiori.FUIImageView? = nil, spacing: CoreFoundation.CGFloat = 2, alignment: SAPFiori.FUILabelItem.Alignment = .trailing)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) override public func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) override public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var firstBaselineHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isEmpty: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUISeriesTitleComponent {
  public var seriesTitles: [SAPFiori.FUIText] {
    get
    set
  }
  public var seriesTitlesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var seriesTitlesStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public enum FUISectionHeaderFooterStyle {
  case title
  case attribute
  case empty
  public static func == (a: SAPFiori.FUISectionHeaderFooterStyle, b: SAPFiori.FUISectionHeaderFooterStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, unavailable, renamed: "FUIAddPhotoLibraryItemsAttachmentActionDelegate")
public typealias FUIAddPhotoAttachmentActionDelegate = SAPFiori.FUIAddPhotoLibraryItemsAttachmentActionDelegate
@available(*, unavailable, renamed: "FUIAddPhotoLibraryItemsAttachmentAction")
public typealias FUIAddPhotoAttachmentAction = SAPFiori.FUIAddPhotoLibraryItemsAttachmentAction
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUITrendComponent {
  public var trend: SAPFiori.FUIText {
    get
  }
  public var trendImage: UIKit.UIImage? {
    get
    set
  }
  public var trendAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var trendSemanticColor: UIKit.UIColor? {
    get
    set
  }
  public var trendStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var trendImageStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@_hasMissingDesignatedInitializers public class FUIModalLoadingIndicator {
  public class func show(inView view: UIKit.UIView, animated: Swift.Bool = true) -> SAPFiori.FUIModalLoadingIndicatorView
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIChartCardView : SAPFiori.FUICardBaseView, SAPFiori.FUISeriesTitleComponent, SAPFiori.FUISubtitleComponent, SAPFiori.FUITrendComponent {
  public enum SubtitleAndTrendDisplayMode {
    case both
    case subtitle
    case trend
    public static func == (a: SAPFiori.FUIChartCardView.SubtitleAndTrendDisplayMode, b: SAPFiori.FUIChartCardView.SubtitleAndTrendDisplayMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var subtitleAndTrendDisplayMode: SAPFiori.FUIChartCardView.SubtitleAndTrendDisplayMode
  @_Concurrency.MainActor(unsafe) public var preserveChartViewSpacing: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public let chartView: SAPFiori.FUIChartView
  @_Concurrency.MainActor(unsafe) public var trend: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var trendImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var trendSemanticColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public var trendImageSize: CoreFoundation.CGSize?
  @_Concurrency.MainActor(unsafe) public var subtitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var seriesTitles: [SAPFiori.FUIText] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var seriesTitlesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias SubtitleText = SAPFiori.FUIText
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBasicAuthenticationScreen : SAPFiori.FUIWelcomeController, UIKit.UIScrollViewDelegate {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var headlineLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var detailLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var usernameInputView: SAPFiori.FUIEmailInputView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var passwordInputView: SAPFiori.FUIEmailInputView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var primaryActionButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIBasicAuthenticationDelegate?
  @_Concurrency.MainActor(unsafe) public var verifyingMessage: Swift.String?
  @_Concurrency.MainActor(unsafe) public var signInErrorMessage: Swift.String?
  @_Concurrency.MainActor(unsafe) public class func createInstanceFromStoryboard() -> (navigationController: UIKit.UINavigationController, basicAuthenticationScreen: SAPFiori.FUIBasicAuthenticationScreen)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension SAPFiori.FUIBasicAuthenticationScreen {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension SAPFiori.FUIBasicAuthenticationScreen : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
public protocol FUIBasicAuthenticationDelegate : AnyObject {
  func didSignIn(_ controller: SAPFiori.FUIBasicAuthenticationScreen, username: Swift.String, password: Swift.String, completion: @escaping ((_ errorMessage: Swift.String?) -> Swift.Void))
  func didCancel(_ controller: SAPFiori.FUIBasicAuthenticationScreen)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUITouchIDErrorViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static var titleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var errorTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var errorMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var errorMessageStringForFaceID: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var actionTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public class func createInstanceFromStoryboard() -> SAPFiori.FUITouchIDErrorViewController
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SAPFiori.FUIFeedbackScreen {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ErrorController : SAPFiori.FUIFeedbackScreen.BaseController {
    @_Concurrency.MainActor(unsafe) final public let errorBannerView: SAPFiori.FUIBannerMessageView
    @_Concurrency.MainActor(unsafe) final public let actionButton: SAPFiori.FUIButton
    @_Concurrency.MainActor(unsafe) final public let closeButton: SAPFiori.FUIBarButtonItem
    @_Concurrency.MainActor(unsafe) public var onCloseHandler: ((UIKit.UIViewController) -> Swift.Void)?
    @_Concurrency.MainActor(unsafe) public var hidesCloseButton: Swift.Bool
    @_Concurrency.MainActor(unsafe) public var errorBannerTitle: Swift.String!
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
    @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
    @objc deinit
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIKPIComponent {
  public var kpiItems: [SAPFiori.FUIKPIViewItem] {
    get
    set
  }
  public var kpiAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var kpiUnitItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiMetricItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiIconItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiFractionItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public enum FUITableViewCellActionAccessoryType {
  case none
  case button
  case processing
  case loadingPausable
  case loadingStoppable
  case pausedResumable
  public static func == (a: SAPFiori.FUITableViewCellActionAccessoryType, b: SAPFiori.FUITableViewCellActionAccessoryType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUISingleActionProgressIndicator : SAPFiori.FUIProgressIndicatorControl {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open var didSelectHandler: ((SAPFiori.FUISingleActionProgressIndicator) -> Swift.Void)?
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIKPIAttributesConsumer {
  public var kpiAttributesProvider: SAPFiori.FUIKPIAttributesProvider? {
    get
    set
  }
}
public enum FUITimelineStatus : Swift.Int {
  case complete
  case open
  case end
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class FUITimelineItem : ObjectiveC.NSObject {
  public var title: Swift.String
  public var due: Foundation.Date
  public var status: SAPFiori.FUITimelineStatus
  convenience public init(title: Swift.String, due: Foundation.Date, status: SAPFiori.FUITimelineStatus)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUITimelinePreviewView : UIKit.UIView, UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) public var dateFormatter: Foundation.DateFormatter! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isAscendingOrder: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView! {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var header: SAPFiori.FUICollectionSectionHeaderFooterView! {
    get
  }
  @_Concurrency.MainActor(unsafe) public func addItem(_ item: SAPFiori.FUITimelineItem)
  @_Concurrency.MainActor(unsafe) public func addItems(_ items: [SAPFiori.FUITimelineItem])
  @_Concurrency.MainActor(unsafe) public func insertItem(_ item: SAPFiori.FUITimelineItem, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func removeAllItems()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIOrderPickerFormItemView : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUITitleMultiLineComponent, SAPFiori.FUISubtitleMultiLineComponent, SAPFiori.FUILeadingImageViewComponent, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) public var leadingImageView: SAPFiori.FUIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) override public func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override public func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override public func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override public func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias SubtitleText = SAPFiori.FUIMultiLineText
  public typealias TitleText = SAPFiori.FUIMultiLineText
  @objc deinit
}
extension SAPFiori.FUIOrderPickerFormItemView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func copy(_ sender: Any?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIButton : UIKit.UIButton, SAPFiori.FUIButtonClosureHandling, SAPFiori.FUIStateSelectable, SAPFiori.FUIBackgroundSchemeSupporting {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) convenience public init(style: SAPFiori.FUIButtonStyle)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setTitle(_ title: Swift.String?, for state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) public func setBackgroundColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  @_Concurrency.MainActor(unsafe) open func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setTitleColor(_ color: UIKit.UIColor?, for state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) public var style: SAPFiori.FUIButtonStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var semantic: SAPFiori.FUIButtonSemantic {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isShadowEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setIsApplyingBorderColor(_ value: Swift.Bool, for state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) open var didSelectHandler: ((SAPFiori.FUIButton) -> Swift.Void)?
  public typealias ClosureType = ((SAPFiori.FUIButton) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var isPersistentSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public var imageTitleSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var imagePosition: UIKit.NSDirectionalRectEdge {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var isPreservingPreferredMaxLayoutWidth: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var adjustsContentSizeForAccessibilityContentSizeCategory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
public protocol FUISignatureDrawingPadComponent : SAPFiori.FUIDrawingPadComponent {
  var xMarkColor: UIKit.UIColor? { get set }
  var signatureLineColor: UIKit.UIColor? { get set }
}
public protocol FUIStrokeComponent : AnyObject {
  var strokeWidth: CoreFoundation.CGFloat { get set }
  var strokeColor: UIKit.UIColor { get set }
}
public protocol FUIObjectEditingFloorplan : UIKit.UIViewController {
  associatedtype Entity : Swift.Hashable, Swift.Identifiable
  var object: Self.Entity { get }
  var cancelButtonDidTapHandler: (() -> Swift.Void)? { get set }
  var doneButtonDidTapHandler: ((Swift.Result<Self.Entity?, Swift.Error>) -> Swift.Void)? { get set }
  var coordinator: SAPFiori.FUICoordinator? { get set }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIStepperView : SAPFiori.FUIFormCellContentView<SAPFiori.FUITextField, SAPFiori.FUIControlState, SAPFiori.FUIText>, SAPFiori.FUITitleComponent, SAPFiori.FUIValueComponent, SAPFiori.FUISubtitleComponent, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) public var maximumValue: Swift.Double
  @_Concurrency.MainActor(unsafe) public var minimumValue: Swift.Double
  @_Concurrency.MainActor(unsafe) public var stepValue: Swift.Double
  @_Concurrency.MainActor(unsafe) public var valueTextField: SAPFiori.FUITextField {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isTrackingLiveChanges: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var value: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valueAttributedText: Foundation.NSAttributedString {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.Double) -> Swift.Void)?
  public typealias ValueType = Swift.Double
  @_Concurrency.MainActor(unsafe) final public let subtitle: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @objc deinit
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias SubtitleText = SAPFiori.FUIText
  public typealias TitleText = SAPFiori.FUIText
}
extension SAPFiori.FUIStepperView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
}
@_Concurrency.MainActor(unsafe) open class FUIListFloorplan<Entity, Section> : UIKit.UITableViewController, UIKit.UISearchResultsUpdating where Entity : Swift.Hashable, Entity : Swift.Identifiable, Section : Swift.CaseIterable, Section : Swift.Hashable {
  @_Concurrency.MainActor(unsafe) public var searchBar: SAPFiori.FUISearchBar? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var searchDebounceTiming: Swift.Double
  @_Concurrency.MainActor(unsafe) open var emptyResultsView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var coordinator: SAPFiori.FUICoordinator?
  @_Concurrency.MainActor(unsafe) open var addButtonDidTapHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var gridRowHeaderItems: [SAPFiori.FUIGridRowHeaderItem]
  @_Concurrency.MainActor(unsafe) open var deleteButtonDidTapHandler: ((Section, Entity) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var cellBinding: ((UIKit.UITableView, Foundation.IndexPath, Entity) -> UIKit.UITableViewCell?)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(viewModel: SAPFiori.FUIListViewModel<Entity, Section>)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func updateSearchResults(for searchController: UIKit.UISearchController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
extension SAPFiori.FUIListFloorplan {
  @_Concurrency.MainActor(unsafe) public func indexPath(for entity: Entity) -> Foundation.IndexPath?
  @_Concurrency.MainActor(unsafe) public func entity(for indexPath: Foundation.IndexPath) -> Entity?
}
public protocol FUISignatureCaptureControllerDelegate : AnyObject {
  func didCancelSignatureCaptureController(fromController signatureCaptureController: SAPFiori.FUISignatureCaptureController)
  func didFinishSigning(fromController signatureCaptureController: SAPFiori.FUISignatureCaptureController, signatureImage: UIKit.UIImage)
  var addsTimestampInImage: Swift.Bool { get }
  var timestampFormatter: Foundation.DateFormatter? { get }
  var footnoteText: SAPFiori.FUIMultiLineText? { get }
  var footnoteTextAlignment: UIKit.NSTextAlignment? { get }
}
@available(*, unavailable, renamed: "FUISignatureCaptureControllerDelegate")
public protocol FUISignatureFormDelegate {
}
@objc @_Concurrency.MainActor(unsafe) open class FUIRatingControl : UIKit.UIControl, SAPFiori.Initializable {
  public enum Style {
    case editable
    case editableDisabled
    case standard
    case accented
    public static func == (a: SAPFiori.FUIRatingControl.Style, b: SAPFiori.FUIRatingControl.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) open var style: SAPFiori.FUIRatingControl.Style {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var ratingBounds: Swift.ClosedRange<Swift.Int> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var rating: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) open var offImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) open var itemSize: CoreFoundation.CGSize?
  @_Concurrency.MainActor(unsafe) open var interItemSpacing: CoreFoundation.CGFloat?
  @_Concurrency.MainActor(unsafe) public init(style: SAPFiori.FUIRatingControl.Style)
  @_Concurrency.MainActor(unsafe) @objc required convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setTintColor(_ color: UIKit.UIColor, for range: Swift.Range<Swift.Int>)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func cancelTracking(with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIAttributesConsumer {
  public var attributesProvider: SAPFiori.FUIAttributesProvider? {
    get
    set
  }
}
public protocol FUIObjectSection {
  var elements: [Swift.AnyHashable] { get set }
  var headerProvider: ((SAPFiori.AnyTableBasedFloorplan, Swift.Int) -> UIKit.UITableViewHeaderFooterView)? { get }
  var footerProvider: ((SAPFiori.AnyTableBasedFloorplan, Swift.Int) -> UIKit.UITableViewHeaderFooterView)? { get }
  var cellTypeAndReuseIdentifier: (Swift.AnyClass, Swift.String) { get }
}
public protocol FUIObjectListSection : SAPFiori.FUIObjectSection {
  var cellProvider: ((SAPFiori.AnyTableBasedFloorplan, Foundation.IndexPath, Swift.AnyHashable) -> UIKit.UITableViewCell)? { get }
}
public protocol FUIObjectCollectionSection : SAPFiori.FUIObjectSection {
  var cellProvider: ((SAPFiori.AnyTableBasedFloorplan, UIKit.UICollectionView, Foundation.IndexPath, Swift.AnyHashable) -> UIKit.UICollectionViewCell)? { get }
  var collectionViewLayout: UIKit.UICollectionViewLayout { get }
}
extension SAPFiori.FUIObjectSection {
  public var headerProvider: ((SAPFiori.AnyTableBasedFloorplan, Swift.Int) -> UIKit.UITableViewHeaderFooterView)? {
    get
  }
  public var footerProvider: ((SAPFiori.AnyTableBasedFloorplan, Swift.Int) -> UIKit.UITableViewHeaderFooterView)? {
    get
  }
}
extension SAPFiori.FUIObjectListSection {
  public var cellTypeAndReuseIdentifier: (Swift.AnyClass, Swift.String) {
    get
  }
}
extension SAPFiori.FUIObjectCollectionSection {
  public var cellTypeAndReuseIdentifier: (Swift.AnyClass, Swift.String) {
    get
  }
  public var collectionViewLayout: UIKit.UICollectionViewLayout {
    get
  }
}
public struct AnyTableBasedFloorplan {
  public var base: UIKit.UITableViewController {
    get
  }
  public init(_ base: UIKit.UITableViewController)
}
public struct AnySection : Swift.Hashable {
  public var base: SAPFiori.FUIObjectSection {
    get
  }
  public init(_ base: SAPFiori.FUIObjectSection)
  public static func == (lhs: SAPFiori.AnySection, rhs: SAPFiori.AnySection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FUIGridRowItemAlignment : Swift.Int {
  case top
  case bottom
  case firstBaseline
  case lastBaseline
  case center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIGridTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIObjectView>, SAPFiori.FUIContentCopyable {
  public enum ObjectViewProperty {
    public enum Text {
      case headline
      case subheadline
      case footnote
      case status
      case substatus
      public static func == (a: SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Text, b: SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Text) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Image {
      case statusImage
      case substatusImage
      case detailImage
      case icon
      public static func == (a: SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Image, b: SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Image) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  @_Concurrency.MainActor(unsafe) public var useColumnLayoutInCompact: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var items: [SAPFiori.FUIGridRowItem]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var columnWidth: [CoreFoundation.CGFloat]?
  @_Concurrency.MainActor(unsafe) public var columnWidthPercent: [CoreFoundation.CGFloat]?
  @_Concurrency.MainActor(unsafe) public var spacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessoryView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willTransition(to state: SAPFiori.UITableViewCellStateMask)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didTransition(to state: SAPFiori.UITableViewCellStateMask)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public protocol FUIMKMapViewDelegate : AnyObject {
  func mapView(_ mapView: MapKit.MKMapView, willRender overlayRenderer: MapKit.MKOverlayRenderer, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer, in state: SAPFiori.FUIMapFloorplan.State)
  func mapView(_ mapView: MapKit.MKMapView, willRender annotationView: MapKit.MKAnnotationView, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer, in state: SAPFiori.FUIMapFloorplan.State)
  func mapView(_ mapView: MapKit.MKMapView, willRender clusterAnnotationView: MapKit.MKAnnotationView, for geometryIndexesInLayers: [SAPFiori.FUIGeometryLayer : [Swift.Int]], in state: SAPFiori.FUIMapFloorplan.State)
  func mapView(_ mapView: MapKit.MKMapView, didSelect annotation: SAPFiori.FUIAnnotation, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  func mapView(_ mapView: MapKit.MKMapView, didSelect clusterAnnotation: MapKit.MKClusterAnnotation, for geometryIndexesInLayers: [SAPFiori.FUIGeometryLayer : [Swift.Int]])
  func mapView(_ mapView: MapKit.MKMapView, didSelect overlay: SAPFiori.FUIOverlay, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  func mapView(_ mapView: MapKit.MKMapView, didSelect overlayRenderer: MapKit.MKOverlayRenderer)
  func mapView(_ mapView: MapKit.MKMapView, didDeselect annotation: SAPFiori.FUIAnnotation, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  func mapView(_ mapView: MapKit.MKMapView, didDeselect clusterAnnotation: MapKit.MKClusterAnnotation, for geometryIndexesInLayers: [SAPFiori.FUIGeometryLayer : [Swift.Int]])
  func mapView(_ mapView: MapKit.MKMapView, didDeselect overlay: SAPFiori.FUIOverlay, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  func mapView(_ mapView: MapKit.MKMapView, didDeselect overlayRenderer: MapKit.MKOverlayRenderer)
}
extension SAPFiori.FUIMKMapViewDelegate {
  public func mapView(_ mapView: MapKit.MKMapView, willRender overlayRenderer: MapKit.MKOverlayRenderer, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer, in state: SAPFiori.FUIMapFloorplan.State)
  public func mapView(_ mapView: MapKit.MKMapView, willRender annotationView: MapKit.MKAnnotationView, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer, in state: SAPFiori.FUIMapFloorplan.State)
  public func mapView(_ mapView: MapKit.MKMapView, willRender clusterAnnotationView: MapKit.MKAnnotationView, for geometryIndexesInLayers: [SAPFiori.FUIGeometryLayer : [Swift.Int]], in state: SAPFiori.FUIMapFloorplan.State)
  public func mapView(_ mapView: MapKit.MKMapView, didSelect annotation: SAPFiori.FUIAnnotation, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  public func mapView(_ mapView: MapKit.MKMapView, didSelect clusterAnnotation: MapKit.MKClusterAnnotation, for geometryIndexesInLayers: [SAPFiori.FUIGeometryLayer : [Swift.Int]])
  public func mapView(_ mapView: MapKit.MKMapView, didSelect overlay: SAPFiori.FUIOverlay, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  public func mapView(_ mapView: MapKit.MKMapView, didSelect overlayRenderer: MapKit.MKOverlayRenderer)
  public func mapView(_ mapView: MapKit.MKMapView, didDeselect annotation: SAPFiori.FUIAnnotation, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  public func mapView(_ mapView: MapKit.MKMapView, didDeselect clusterAnnotation: MapKit.MKClusterAnnotation, for geometryIndexesInLayers: [SAPFiori.FUIGeometryLayer : [Swift.Int]])
  public func mapView(_ mapView: MapKit.MKMapView, didDeselect overlay: SAPFiori.FUIOverlay, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  public func mapView(_ mapView: MapKit.MKMapView, didDeselect overlayRenderer: MapKit.MKOverlayRenderer)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIWelcomeScreen : SAPFiori.FUIWelcomeController, UIKit.UITextFieldDelegate, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) public class func createInstanceFromStoryboard() -> SAPFiori.FUIWelcomeScreen
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var headlineLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var detailLabel: UIKit.UILabel! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var headlineImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var headlineImageViewSize: CoreFoundation.CGSize?
  @objc @_Concurrency.MainActor(unsafe) public var emailTextField: SAPFiori.FUIAutoResizingTextField {
    @objc get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var primaryActionButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var footnoteLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var footnoteActionButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  @objc @available(*, unavailable, message: "`appNameLabel` and `thankyouLabel` have been consolidated to the single `welcomeDetailLabel`.  You should concatenate their respective strings to a new value for `welcomeDetailLabel.text`.")
  @IBOutlet @_Concurrency.MainActor(unsafe) public var appNameLabel: UIKit.UILabel! {
    get
  }
  @available(*, deprecated, message: "This property has been renamed to `headlineLabel`.  Please update your code to reference `headlineLabel` directly.")
  @_Concurrency.MainActor(unsafe) public var welcomeDetailLabel: UIKit.UILabel! {
    get
  }
  @objc @available(*, unavailable, message: "`welcomeLabel` has been removed")
  @IBOutlet @_Concurrency.MainActor(unsafe) public var welcomeLabel: UIKit.UILabel! {
    get
  }
  @objc @available(*, unavailable, message: "`appNameLabel` and `thankyouLabel` have been consolidated to the single `welcomeDetailLabel`.  You should concatenate their respective strings to a new value for `welcomeDetailLabel.text`.")
  @IBOutlet @_Concurrency.MainActor(unsafe) public var thankyouLabel: UIKit.UILabel! {
    get
  }
  @objc @available(*, unavailable, renamed: "detailLabel")
  @IBOutlet @_Concurrency.MainActor(unsafe) public var instructionTextView: UIKit.UITextView! {
    get
  }
  @available(*, deprecated, message: "This property has been renamed to `primaryActionButton`.  Please update your code to reference `primaryActionButton` directly.")
  @_Concurrency.MainActor(unsafe) public var signInButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  @available(*, deprecated, message: "This property has been renamed to `footnoteLabel`.  Please update your code to reference `footnoteLabel` directly.")
  @_Concurrency.MainActor(unsafe) public var demoLabel: UIKit.UILabel! {
    get
  }
  @available(*, deprecated, message: "This property has been renamed to `footnoteActionButton`.  Please update your code to reference `footnoteActionButton` directly.")
  @_Concurrency.MainActor(unsafe) public var demoButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var loadingMessage: Swift.String?
  @_Concurrency.MainActor(unsafe) public var showsCancelButtonForDiscoveryService: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var cancelHandler: (() -> Swift.Void)?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var logoImageView: UIKit.UIImageView! {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIWelcomeControllerDelegate?
  @_Concurrency.MainActor(unsafe) public var isDemoAvailable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var state: SAPFiori.FUIWelcomeControllerState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var configurationOptions: SAPFiori.FUIWelcomeControllerConfigurationOption {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) open func dismissLoadingIndicator()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc public protocol FUIWelcomeControllerDelegate {
  @objc optional func welcomeController(_ welcomeController: SAPFiori.FUIWelcomeController, willNavigateToActivationScreen activationScreen: SAPFiori.FUIActivationScreen)
  @objc optional func welcomeController(_ welcomeController: SAPFiori.FUIWelcomeController, shouldTryUserEmail userEmail: Swift.String)
  @objc optional func welcomeController(_ welcomeController: SAPFiori.FUIWelcomeController, willNavigateToScannerScreen scanController: SAPFiori.FUIOnboardingScanViewController)
  @objc optional func didSelectDemoMode(_ welcomeController: SAPFiori.FUIWelcomeController)
  @objc optional func shouldContinueUserOnboarding(_ welcomeController: SAPFiori.FUIWelcomeController)
}
public enum FUIWelcomeControllerState : Swift.Int {
  case notConfigured
  case isConfigured
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct FUIWelcomeControllerConfigurationOption : Swift.OptionSet {
  public let rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public static let discoveryService: SAPFiori.FUIWelcomeControllerConfigurationOption
  public static let barcodeScanner: SAPFiori.FUIWelcomeControllerConfigurationOption
  public typealias ArrayLiteralElement = SAPFiori.FUIWelcomeControllerConfigurationOption
  public typealias Element = SAPFiori.FUIWelcomeControllerConfigurationOption
  public typealias RawValue = Swift.UInt
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIWelcomeController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUITimelineCollectionViewHorizontalFlowLayout : SAPFiori.FUIStandardAutoSizingColumnFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct FUITableRowItem {
  public enum AccessoryItem {
    case button(SAPFiori.FUITableRowItem.AccessoryButton)
    case icon(UIKit.UIImage)
  }
  public struct AccessoryButton {
    public let image: UIKit.UIImage
    public let title: Swift.String
    public let action: () -> Swift.Void
    public init(image: UIKit.UIImage, title: Swift.String, action: @escaping () -> Swift.Void)
  }
  public let leadingAccessories: [SAPFiori.FUITableRowItem.AccessoryItem]
  public let trailingAccessory: SAPFiori.FUITableRowItem.AccessoryItem?
  public let data: [SAPFiori.FUITableItem]
  public let selectedImage: UIKit.UIImage?
  public let deSelectedImage: UIKit.UIImage?
  public init(leadingAccessories: [SAPFiori.FUITableRowItem.AccessoryItem], trailingAccessory: SAPFiori.FUITableRowItem.AccessoryItem?, data: [SAPFiori.FUITableItem], selectedImage: UIKit.UIImage? = nil, deSelectedImage: UIKit.UIImage? = nil)
}
extension SAPFiori.FUIMapToolbar {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ClearAllButton : SAPFiori.FUIMapToolbarButton {
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) override public init(type: SAPFiori.FUIMapToolbarButtonType)
    @_Concurrency.MainActor(unsafe) convenience public init(mapFloorplan: SAPFiori.FUIMKMapFloorplanViewController)
    @_Concurrency.MainActor(unsafe) weak public var mapFloorplan: SAPFiori.FUIMKMapFloorplanViewController?
    @objc deinit
  }
}
public protocol FUIWebViewContainerDelegate : AnyObject {
  func didTapCancel(on viewController: SAPFiori.FUIWebViewContainer)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIWebViewContainer : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var wkWebView: WebKit.WKWebView
  @available(*, deprecated, message: "This type is not needed any more since only WKWebView available")
  public enum WebViewType {
    case wkWebView
    public static func == (a: SAPFiori.FUIWebViewContainer.WebViewType, b: SAPFiori.FUIWebViewContainer.WebViewType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(*, deprecated, message: "Please use init().")
  @_Concurrency.MainActor(unsafe) convenience public init(type: SAPFiori.FUIWebViewContainer.WebViewType)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) weak open var delegate: SAPFiori.FUIWebViewContainerDelegate?
  @_Concurrency.MainActor(unsafe) public var processingIndicatorView: SAPFiori.FUIProcessingIndicatorView
  @_Concurrency.MainActor(unsafe) public var cancelButton: UIKit.UIBarButtonItem?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func showProcessingIndicator()
  @_Concurrency.MainActor(unsafe) public func dismissProcessingIndicator()
  @_Concurrency.MainActor(unsafe) public func startAnimating()
  @_Concurrency.MainActor(unsafe) public func stopAnimating()
  @objc deinit
}
public struct FUIPalette : SAPFiori._PaletteProvider {
  public func hexColor(for style: SAPFiori.FUIColorStyle) -> SAPFiori.FUIHexColor?
  public var uuid: Foundation.UUID {
    get
  }
  public var colorDefinitions: [SAPFiori.FUIColorStyle : SAPFiori.FUIHexColor] {
    get
  }
  public init(_ palette: SAPFiori._PaletteProvider)
}
extension SAPFiori.FUIPalette : Swift.Equatable {
  public static func == (lhs: SAPFiori.FUIPalette, rhs: SAPFiori.FUIPalette) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIRangeSliderCollectionViewCell : SAPFiori.FUIInlineValidationDrawingCollectionViewCell<SAPFiori.FUIRangeSliderContentView> {
  @_Concurrency.MainActor(unsafe) open var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var minimumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maximumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var lowerValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var upperValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isRangeSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var interval: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isContinuous: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((_ lower: Swift.Double, _ upper: Swift.Double) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FUIMKPointAnnotation : MapKit.MKPointAnnotation {
  @objc override dynamic public init()
  @objc deinit
}
public enum FUIIconLibrary {
  @available(*, unavailable, message: "This method is no longer supported.")
  public static func createImage(sfsymbolImageName: Swift.String?, size: CoreFoundation.CGFloat?, defaultImageName: Swift.String) -> UIKit.UIImage
  public enum system {
    public static let barcode: UIKit.UIImage
    public static let calendar: UIKit.UIImage
    public static let camera: UIKit.UIImage
    public static let cart: UIKit.UIImage
    public static let cartAdd: UIKit.UIImage
    public static let check: UIKit.UIImage
    public static let clock: UIKit.UIImage
    public static let close: UIKit.UIImage
    public static let cloud: UIKit.UIImage
    public static let create: UIKit.UIImage
    public static let dislikeOff: UIKit.UIImage
    public static let dislikeOn: UIKit.UIImage
    public static let dismiss: UIKit.UIImage
    public static let download: UIKit.UIImage
    public static let edit: UIKit.UIImage
    public static let email: UIKit.UIImage
    public static let facetime: UIKit.UIImage
    public static let fastforwardOff: UIKit.UIImage
    public static let fastforwardOn: UIKit.UIImage
    public static let filter: UIKit.UIImage
    public static let flagOff: UIKit.UIImage
    public static let flagOn: UIKit.UIImage
    public static let flashOff: UIKit.UIImage
    public static let flashOn: UIKit.UIImage
    public static let imageLibrary: UIKit.UIImage
    public static let information: UIKit.UIImage
    public static let library: UIKit.UIImage
    public static let likeOff: UIKit.UIImage
    public static let likeOn: UIKit.UIImage
    public static let listView: UIKit.UIImage
    public static let me: UIKit.UIImage
    public static let message: UIKit.UIImage
    public static let more: UIKit.UIImage
    public static let pauseOff: UIKit.UIImage
    public static let pauseOn: UIKit.UIImage
    public static let phone: UIKit.UIImage
    public static let pin: UIKit.UIImage
    public static let playOff: UIKit.UIImage
    public static let playOn: UIKit.UIImage
    public static let refresh: UIKit.UIImage
    public static let reply: UIKit.UIImage
    public static let rewindOff: UIKit.UIImage
    public static let rewindOn: UIKit.UIImage
    public static let search: UIKit.UIImage
    public static let searchSmall: UIKit.UIImage
    public static let selected: UIKit.UIImage
    public static let share: UIKit.UIImage
    public static let shuffle: UIKit.UIImage
    public static let success: UIKit.UIImage
    public static let tileView: UIKit.UIImage
    public static let trash: UIKit.UIImage
    public static let volume: UIKit.UIImage
    public static let progressPausable: UIKit.UIImage
    public static let progressStoppable: UIKit.UIImage
    public static let progressPaused: UIKit.UIImage
  }
  public enum app {
    public static let bookmarkOff: UIKit.UIImage
    public static let bookmarkOn: UIKit.UIImage
    public static let cafeOff: UIKit.UIImage
    public static let cafeOn: UIKit.UIImage
    public static let campusOff: UIKit.UIImage
    public static let campusOn: UIKit.UIImage
    public static let changeStatus: UIKit.UIImage
    public static let discoverOff: UIKit.UIImage
    public static let discoverOn: UIKit.UIImage
    public static let eventsOff: UIKit.UIImage
    public static let eventsOn: UIKit.UIImage
    public static let printer: UIKit.UIImage
    public static let stadiumOff: UIKit.UIImage
    public static let stadiumOn: UIKit.UIImage
    public static let staffOff: UIKit.UIImage
    public static let staffOn: UIKit.UIImage
    public static let starOff: UIKit.UIImage
    public static let starOn: UIKit.UIImage
    public static let todayOff: UIKit.UIImage
    public static let todayOn: UIKit.UIImage
    public static let trafficOff: UIKit.UIImage
    public static let trafficOn: UIKit.UIImage
  }
  public enum indicator {
    public static let attachment: UIKit.UIImage
    public static let clock: UIKit.UIImage
    public static let dot: UIKit.UIImage
    public static let female: UIKit.UIImage
    public static let genderNeutral: UIKit.UIImage
    public static let hierarchyOff: UIKit.UIImage
    public static let hierarchyOn: UIKit.UIImage
    public static let highPriority: UIKit.UIImage
    public static let inProcess: UIKit.UIImage
    public static let male: UIKit.UIImage
    public static let mediumPriority: UIKit.UIImage
    public static let pageLeft: UIKit.UIImage
    public static let pageRight: UIKit.UIImage
    public static let veryHighPriority: UIKit.UIImage
  }
  public enum map {
    public enum marker {
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let assetSmall: UIKit.UIImage
      public static let asset: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let busSmall: UIKit.UIImage
      public static let bus: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let cafeSmall: UIKit.UIImage
      public static let cafe: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let cameraSmall: UIKit.UIImage
      public static let camera: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let displaySmall: UIKit.UIImage
      public static let display: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let functionalLocationSmall: UIKit.UIImage
      public static let functionalLocation: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let gameRoomSmall: UIKit.UIImage
      public static let gameRoom: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let gymSmall: UIKit.UIImage
      public static let gym: UIKit.UIImage
      public static let highPriority: UIKit.UIImage
      public static let inProcess: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let informationSmall: UIKit.UIImage
      public static let information: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let jobSmall: UIKit.UIImage
      public static let job: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let librarySmall: UIKit.UIImage
      public static let library: UIKit.UIImage
      public static let mediumPriority: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let meetingRoomSmall: UIKit.UIImage
      public static let meetingRoom: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let notificationSmall: UIKit.UIImage
      public static let notification: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let printerSmall: UIKit.UIImage
      public static let printer: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let restroomMenSmall: UIKit.UIImage
      public static let restroomMen: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let restroomWomenSmall: UIKit.UIImage
      public static let restroomWomen: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let securityOfficeSmall: UIKit.UIImage
      public static let securityOffice: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let turnstileSmall: UIKit.UIImage
      public static let turnstile: UIKit.UIImage
      public static let venue: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let venueSmall: UIKit.UIImage
      public static let veryHighPriority: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let walkSmall: UIKit.UIImage
      public static let walk: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let wellnessRoomSmall: UIKit.UIImage
      public static let wellnessRoom: UIKit.UIImage
    }
    public enum panel {
      public static let clear: UIKit.UIImage
      public static let point: UIKit.UIImage
      public static let polygon: UIKit.UIImage
      public static let polyline: UIKit.UIImage
    }
    public enum legend {
      public static let addBranchPoint: UIKit.UIImage
      public static let addPoint: UIKit.UIImage
      public static let clearAllOff: UIKit.UIImage
      public static let clearAllOn: UIKit.UIImage
      public static let legendOff: UIKit.UIImage
      public static let legendOn: UIKit.UIImage
      public static let locationOff: UIKit.UIImage
      public static let locationOn: UIKit.UIImage
      public static let redo: UIKit.UIImage
      public static let subtractPoint: UIKit.UIImage
      public static let undo: UIKit.UIImage
      public static let zoomExtent: UIKit.UIImage
    }
  }
  public enum onboarding {
    public enum scan {
      public static let controlCollapse: UIKit.UIImage
      public static let controlExpand: UIKit.UIImage
    }
  }
  public enum socialMedia {
    public static let thumbsDownOff: UIKit.UIImage
    public static let thumbsDownOn: UIKit.UIImage
    public static let thumbsUpOff: UIKit.UIImage
    public static let thumbsUpOn: UIKit.UIImage
  }
  public enum docType {
    public static let audio: UIKit.UIImage
    public static let csv: UIKit.UIImage
    public static let generic: UIKit.UIImage
    public static let image: UIKit.UIImage
    public static let pdf: UIKit.UIImage
    public static let presentation: UIKit.UIImage
    public static let table: UIKit.UIImage
    public static let text: UIKit.UIImage
    public static let video: UIKit.UIImage
  }
  public enum analytics {
    public static let chartView: UIKit.UIImage
    public static let chevronNext: UIKit.UIImage
    public static let chevronPrevious: UIKit.UIImage
    public static let trendDown: UIKit.UIImage
    public static let trendUp: UIKit.UIImage
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIMapDetailPanelSearchBar : SAPFiori.FUISearchBar {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FUIModalProcessingIndicator {
  public class func show(inView view: UIKit.UIView, animated: Swift.Bool = true, backgroundMode: SAPFiori.FUIModalProcessingIndicatorView.BackgroundMode = .translucentWhite) -> SAPFiori.FUIModalProcessingIndicatorView
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIInlineSignatureFormCell : SAPFiori.FUIInlineValidationDrawingTableViewCell<SAPFiori.FUIInlineSignatureFormView> {
  @_Concurrency.MainActor(unsafe) public var signatureStrokeWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var signatureStrokeColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var signatureBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var xMarkColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var signatureLineColor: UIKit.UIColor? {
    get
    set
  }
  public typealias ValueType = UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var value: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((UIKit.UIImage?) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var validationMessage: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hidesXMark: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hidesSignatureLine: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var addsTimestampInImage: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var timestampFormatter: Foundation.DateFormatter? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var watermarkTextAlignment: UIKit.NSTextAlignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var appliesTintColorToImage: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class FUIChartSummaryItem : SAPFiori.FUIChartSummaryItemType {
  public var emptyText: SAPFiori.FUIText
  public var title: SAPFiori.FUIText
  public var isEnabled: Swift.Bool
  public var isPreservingTitleHeight: Swift.Bool
  public var isPreservingTrendHeight: Swift.Bool
  public var valuesText: [Swift.String]
  public var categoryIndex: Swift.Int
  public var trend: SAPFiori.FUIText
  public var trendImage: UIKit.UIImage?
  public var trendSemanticColor: UIKit.UIColor?
  required public init()
  @objc deinit
}
public class FUIChartSummaryItemType {
  required public init()
  @objc deinit
}
extension SAPFiori.FUIChartSummaryItemType : Swift.Equatable {
  public static func == (lhs: SAPFiori.FUIChartSummaryItemType, rhs: SAPFiori.FUIChartSummaryItemType) -> Swift.Bool
}
extension SAPFiori.FUIChartSummaryItemType : Swift.Comparable {
  public static func < (lhs: SAPFiori.FUIChartSummaryItemType, rhs: SAPFiori.FUIChartSummaryItemType) -> Swift.Bool
}
extension SAPFiori.FUIChartSummaryItemType : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public protocol FUIListPicker {
  @objc var prompt: Swift.String? { get set }
  @objc var isSearchEnabled: Swift.Bool { get set }
  @objc var isSearchCancelledAfterSelection: Swift.Bool { get set }
  @objc var hidesNavigationBarDuringSearch: Swift.Bool { get set }
  @objc var searchBarDelegate: UIKit.UISearchBarDelegate? { get set }
  @objc var searchBarPlaceholderText: Swift.String? { get set }
  @objc var isBarcodeScannerEnabled: Swift.Bool { get set }
  @objc var barcodeScanMode: SAPFiori.FUIBarcodeScanMode { get set }
  @objc var barcodeScanResultTransformer: ((Swift.String) -> Swift.String)? { get set }
  @objc var dataSource: SAPFiori.FUIListPickerDataSource? { get set }
  @objc var isDataSourceRequiringUniqueIdentifiers: Swift.Bool { get set }
  @objc var searchResultsUpdating: SAPFiori.FUIListPickerSearchResultsUpdating? { get set }
  @objc var selectedEntriesSectionTitle: Swift.String? { get set }
  @objc var allEntriesSectionTitle: Swift.String? { get set }
  @objc var selectAllButtonTitle: Swift.String? { get set }
  @objc var deselectAllButtonTitle: Swift.String? { get set }
  @objc var title: Swift.String? { get set }
  @objc var estimatedRowHeight: CoreFoundation.CGFloat { get set }
  @objc var isSelectedSectionEnabled: Swift.Bool { get set }
  @objc var tintColor: UIKit.UIColor? { get set }
  @objc func register(_ cellClass: Swift.AnyClass?, forCellReuseIdentifier identifier: Swift.String)
  @objc func reloadData()
}
public protocol FUIObjectComponent : AnyObject {
  var detailImage: UIKit.UIImage? { get set }
  var headlineText: Swift.String? { get set }
  var subheadlineText: Swift.String? { get set }
  var footnoteText: Swift.String? { get set }
  var descriptionText: Swift.String? { get set }
  var statusText: Swift.String? { get set }
  var substatusText: Swift.String? { get set }
  var statusImage: UIKit.UIImage? { get set }
  var substatusImage: UIKit.UIImage? { get set }
}
extension SAPFiori.FUIObjectComponent where Self : SAPFiori.FUIObjectViewBaseComponent {
  public var detailImage: UIKit.UIImage? {
    get
    set
  }
  public var headlineText: Swift.String? {
    get
    set
  }
  public var subheadlineText: Swift.String? {
    get
    set
  }
  public var footnoteText: Swift.String? {
    get
    set
  }
  public var descriptionText: Swift.String? {
    get
    set
  }
  public var statusText: Swift.String? {
    get
    set
  }
  public var substatusText: Swift.String? {
    get
    set
  }
  public var statusImage: UIKit.UIImage? {
    get
    set
  }
  public var substatusImage: UIKit.UIImage? {
    get
    set
  }
}
public enum FUISearchTagAcceptOption {
  case `return`
  case comma
  case space
  public static func == (a: SAPFiori.FUISearchTagAcceptOption, b: SAPFiori.FUISearchTagAcceptOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISearchTagsField : UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) open var searchIcon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var searchImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) weak open var textDelegate: UIKit.UITextFieldDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var textColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var normalBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var selectedColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var selectedTextColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var delimiter: Swift.String {
    get
    set
  }
  @available(*, unavailable, message: "Use 'isDelimiterVisible' instead.")
  @_Concurrency.MainActor(unsafe) open var displayDelimiter: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var isDelimiterVisible: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maxHeight: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var numberOfLines: Swift.Int {
    get
    set
  }
  @available(*, unavailable, message: "Use 'cornerRadius' instead.")
  @_Concurrency.MainActor(unsafe) open var tagCornerRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open var cornerRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var borderWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var borderColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var layoutMargins: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var fieldTextColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var placeholder: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var placeholderColor: UIKit.UIColor? {
    get
    set
  }
  @available(*, unavailable, message: "Use 'placeholderAlwaysVisible' instead.")
  @_Concurrency.MainActor(unsafe) open var placeholderAlwayVisible: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var placeholderAlwaysVisible: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var font: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var readOnly: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var acceptTagOption: SAPFiori.FUISearchTagAcceptOption
  @available(*, unavailable, message: "Use 'contentInset' instead.")
  @_Concurrency.MainActor(unsafe) open var padding: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var spaceBetweenTags: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var spaceBetweenLines: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var tagLayoutMargins: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var bounceOnSelection: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var tags: [SAPFiori.FUISearchTag] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var onShouldAcceptTag: ((SAPFiori.FUISearchTagsField) -> Swift.Bool)?
  @_Concurrency.MainActor(unsafe) open var onDidChangeText: ((SAPFiori.FUISearchTagsField, _ text: Swift.String?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onDidAddTag: ((SAPFiori.FUISearchTagsField, _ tag: SAPFiori.FUISearchTag) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onDidRemoveTag: ((SAPFiori.FUISearchTagsField, _ tag: SAPFiori.FUISearchTag) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onDidSelectTagView: ((SAPFiori.FUISearchTagsField, _ tag: SAPFiori.FUISearchTagView) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onDidUnselectTagView: ((SAPFiori.FUISearchTagsField, _ tag: SAPFiori.FUISearchTagView) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onVerifyTag: ((SAPFiori.FUISearchTagsField, _ text: Swift.String) -> Swift.Bool)?
  @_Concurrency.MainActor(unsafe) open var onDidChangeHeightTo: ((SAPFiori.FUISearchTagsField, _ height: CoreFoundation.CGFloat) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var preferredMaxLayoutWidth: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) open func acceptCurrentTextAsTag()
  @_Concurrency.MainActor(unsafe) open var isEditing: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open func beginEditing()
  @_Concurrency.MainActor(unsafe) open func endEditing()
  @_Concurrency.MainActor(unsafe) open func addTags(_ tags: [Swift.String])
  @_Concurrency.MainActor(unsafe) open func addTags(_ tags: [SAPFiori.FUISearchTag])
  @_Concurrency.MainActor(unsafe) open func addTag(_ tag: Swift.String)
  @_Concurrency.MainActor(unsafe) open func addTag(_ tag: SAPFiori.FUISearchTag)
  @_Concurrency.MainActor(unsafe) open func removeTag(_ tag: Swift.String)
  @_Concurrency.MainActor(unsafe) open func removeTag(_ tag: SAPFiori.FUISearchTag)
  @_Concurrency.MainActor(unsafe) open func removeTagAtIndex(_ index: Swift.Int)
  @_Concurrency.MainActor(unsafe) open func removeTags()
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func tokenizeTextFieldText() -> SAPFiori.FUISearchTag?
  @objc @_Concurrency.MainActor(unsafe) open func onTextFieldDidChange(_ sender: Swift.AnyObject)
  @_Concurrency.MainActor(unsafe) open func selectNextTag()
  @_Concurrency.MainActor(unsafe) open func selectPrevTag()
  @_Concurrency.MainActor(unsafe) open func selectTagView(_ tagView: SAPFiori.FUISearchTagView, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func unselectAllTagViewsAnimated(_ animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open var borders: UIKit.UIRectEdge {
    get
    set
  }
  @objc deinit
}
extension SAPFiori.FUISearchTagsField {
  @_Concurrency.MainActor(unsafe) public var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var returnKeyType: UIKit.UIReturnKeyType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var spellCheckingType: UIKit.UITextSpellCheckingType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var autocapitalizationType: UIKit.UITextAutocapitalizationType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var autocorrectionType: UIKit.UITextAutocorrectionType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var enablesReturnKeyAutomatically: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @available(iOS, message: "DO NOT USE.  Property will be overwritten by framework.  Use `inputFieldAccessoryView, instead`.")
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var inputAccessoryView: UIKit.UIView? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var inputFieldAccessoryView: UIKit.UIView? {
    get
    set
  }
}
extension SAPFiori.FUISearchTagsField : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidChangeSelection(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
}
extension SAPFiori.FUISearchTagsField : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
public func == (lhs: UIKit.UITextField, rhs: SAPFiori.FUISearchTagsField) -> Swift.Bool
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIImageCollectionItemView : SAPFiori.FUIDrawingView, SAPFiori.FUIDetailImageViewComponent {
  @_Concurrency.MainActor(unsafe) public var detailImageView: SAPFiori.FUIImageView
  @_Concurrency.MainActor(unsafe) public var detailImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailImageViewSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUISubtitleComponent {
  public var subtitle: SAPFiori.FUIText {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUISubtitleMultiLineComponent {
  public var subtitle: SAPFiori.FUIMultiLineText {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUISubtitleBaseComponent {
  public var subtitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var subtitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIHierarchyCollectionItem : SAPFiori.FUITableViewAccessoryDrawingCollectionViewCell<SAPFiori.FUIHierarchyItemView>, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) weak open var parentHierarchyView: SAPFiori.FUIHierarchyView?
  @_Concurrency.MainActor(unsafe) final public let hierarchyIndicator: SAPFiori.FUIHierarchyIndicator
  @_Concurrency.MainActor(unsafe) override open var accessoriesPaddedWidth: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol FUIBackgroundSchemeSupporting : AnyObject {
  var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme { get set }
}
@objc @_Concurrency.MainActor(unsafe) open class FUIFormCollectionViewController : UIKit.UICollectionViewController {
  @_Concurrency.MainActor(unsafe) public var effectiveNavigationController: UIKit.UINavigationController? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(layout: UIKit.UICollectionViewLayout)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension SAPFiori.FUIFormCollectionViewController {
  @_Concurrency.MainActor(unsafe) public func navigationControllerPresent(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func navigationControllerPush(_ viewControllerToPush: UIKit.UIViewController, animated flag: Swift.Bool)
}
public struct FUIGeometryLayer : Swift.Hashable {
  public let displayName: Swift.String
  public init(displayName: Swift.String, uuid: Swift.String = UUID().uuidString)
  public static func == (lhs: SAPFiori.FUIGeometryLayer, rhs: SAPFiori.FUIGeometryLayer) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBarButtonItem : UIKit.UIBarButtonItem {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage?, for state: SAPFiori.FUIControlState)
  @_Concurrency.MainActor(unsafe) convenience public init(image: UIKit.UIImage?, target: Swift.AnyObject?, action: ObjectiveC.Selector?)
  @_Concurrency.MainActor(unsafe) convenience public init(image: UIKit.UIImage?, landscapeImagePhone: UIKit.UIImage?, target: Swift.AnyObject?, action: ObjectiveC.Selector?)
  @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String?, target: Swift.AnyObject?, action: ObjectiveC.Selector?)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init(customView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MapKit.MKPointAnnotation {
  convenience public init(coordinate: CoreLocation.CLLocationCoordinate2D)
}
public protocol FUIMKRoutingMapViewDataSource : SAPFiori.FUIMKMapViewDataSource {
  func numberOfRoutes(in mapView: MapKit.MKMapView) -> Swift.Int
  func mapView(_ mapView: MapKit.MKMapView, routeAt index: Swift.Int) -> SAPFiori.FUIRoute<MapKit.MKPolyline, MapKit.MKPointAnnotation>
}
extension SAPFiori.FUIMKRoutingMapViewDataSource {
  public func numberOfLayers(in mapView: MapKit.MKMapView) -> Swift.Int
  public func mapView(_ mapView: MapKit.MKMapView, layerAtIndex index: Swift.Int) -> SAPFiori.FUIGeometryLayer
  public func mapView(_ mapView: MapKit.MKMapView, geometriesForLayer layer: SAPFiori.FUIGeometryLayer) -> [SAPFiori.FUIAnnotation]
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIObjectHeaderView : SAPFiori.FUIDrawingView, SAPFiori.FUIObjectHeaderViewComponent, SAPFiori.FUIObjectComponent, SAPFiori.FUITagsComponent, SAPFiori.FUIContentCopyable {
  public enum Version : Swift.Int, Swift.CaseIterable {
    case v1
    case v2
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [SAPFiori.FUIObjectHeaderView.Version]
    public typealias RawValue = Swift.Int
    public static var allCases: [SAPFiori.FUIObjectHeaderView.Version] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var version: SAPFiori.FUIObjectHeaderView.Version {
    get
    set
  }
  public enum StatusLayout : Swift.Int, Swift.CaseIterable {
    case stacked
    case crosswise
    case inline
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [SAPFiori.FUIObjectHeaderView.StatusLayout]
    public typealias RawValue = Swift.Int
    public static var allCases: [SAPFiori.FUIObjectHeaderView.StatusLayout] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var statusLayout: SAPFiori.FUIObjectHeaderView.StatusLayout {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var headlineLabel: SAPFiori.FUILabelProxy {
    get
  }
  @_Concurrency.MainActor(unsafe) public var subheadlineLabel: SAPFiori.FUILabelProxy {
    get
  }
  @_Concurrency.MainActor(unsafe) public var bodyLabel: SAPFiori.FUILabelProxy {
    get
  }
  @_Concurrency.MainActor(unsafe) public var footnoteLabel: SAPFiori.FUILabelProxy {
    get
  }
  @_Concurrency.MainActor(unsafe) public var descriptionLabel: SAPFiori.FUILabelProxy {
    get
  }
  @_Concurrency.MainActor(unsafe) public var statusLabel: SAPFiori.FUILabelProxy {
    get
  }
  @_Concurrency.MainActor(unsafe) public var substatusLabel: SAPFiori.FUILabelProxy {
    get
  }
  @_Concurrency.MainActor(unsafe) public var statusImageView: SAPFiori.FUIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var substatusImageView: SAPFiori.FUIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var detailImageView: SAPFiori.FUIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var statusImageViewAlignment: SAPFiori.FUILabelItem.Alignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var substatusImageViewAlignment: SAPFiori.FUILabelItem.Alignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var kpiView: SAPFiori.FUIKPIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var labelItems: [SAPFiori.FUILabelItem] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfLabelItems: Swift.Int {
    get
    set
  }
  @available(*, deprecated, message: "The component design has been updated, to allocate content frames based upon the content intrinsic sizes.  The value `splitPercent` will be ignored at runtime.")
  @_Concurrency.MainActor(unsafe) public var splitPercent: CoreFoundation.CGFloat
  @available(*, deprecated, message: "The component design has been updated, to allocate content frames based upon the content intrinsic sizes.  The value `isApplyingSplitPercent` will be ignored at runtime.")
  @_Concurrency.MainActor(unsafe) public var isApplyingSplitPercent: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var isCompact: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var preserveDetailImageSpacing: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var tags: [SAPFiori.FUITag] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfTagLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailContentView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) public var pageControl: UIKit.UIPageControl {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) open var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(_ sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
}
extension MapKit.MKOverlayRenderer {
  @objc @_inheritsConvenienceInitializers public class Nil : MapKit.MKOverlayRenderer {
    @objc override dynamic public init(overlay: MapKit.MKOverlay)
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIMKMapView : MapKit.MKMapView {
  @_Concurrency.MainActor(unsafe) @objc override weak dynamic open var delegate: MapKit.MKMapViewDelegate? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open var layers: [SAPFiori.FUIGeometryLayer] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var overlaysForLayer: [SAPFiori.FUIGeometryLayer : [SAPFiori.FUIOverlay]] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var annotationsForLayer: [SAPFiori.FUIGeometryLayer : [SAPFiori.FUIAnnotation]] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isLayerHidden: [SAPFiori.FUIGeometryLayer : Swift.Bool] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var selectedOverlays: [SAPFiori.FUIOverlay] {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func selectAnnotation(_ annotation: MapKit.MKAnnotation, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func deselectAnnotation(_ annotation: MapKit.MKAnnotation?, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func selectOverlay(_ overlay: SAPFiori.FUIOverlay, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func deselectOverlay(_ overlay: SAPFiori.FUIOverlay, animated: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIRangeSliderFormCell : SAPFiori.FUIInlineValidationDrawingTableViewCell<SAPFiori.FUIRangeSliderContentView> {
  @_Concurrency.MainActor(unsafe) open var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var minimumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maximumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var lowerValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var upperValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isRangeSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var interval: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isContinuous: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((_ lower: Swift.Double, _ upper: Swift.Double) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public class FUIEditingGeometryObject<GeometryType, RepresentationType, MapContextType> : SAPFiori.FUIManageRepresentation where GeometryType : SAPFiori.FUIGeometry {
  public var geometry: GeometryType? {
    get
  }
  public var cachedGeometry: GeometryType?
  public var cachedIndex: Swift.Int
  public func updateRepresentation(_ editingCoordinate: CoreLocation.CLLocationCoordinate2D?, add newCoordinates: [CoreLocation.CLLocationCoordinate2D], with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], from existingEditingMode: SAPFiori.FUIGeospatialType, to newEditingMode: SAPFiori.FUIGeospatialType, in colorScheme: SAPFiori.FUIBackgroundColorScheme, on context: MapContextType, shouldUpdateImmediately: Swift.Bool)
  public func addRepresentation(to context: MapContextType)
  public func removeRepresentation(from context: MapContextType)
  public func redrawRepresentation(in context: MapContextType, with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], scheme: SAPFiori.FUIBackgroundColorScheme, traits: UIKit.UIUserInterfaceStyle)
  public init(_ coordinate: CoreLocation.CLLocationCoordinate2D)
  public init(_ coordinates: [CoreLocation.CLLocationCoordinate2D])
  @objc deinit
}
public typealias MKEditingGeometryWrapper = SAPFiori.FUIEditingGeometryObject<MapKit.MKShape, SAPFiori.FUIMKPointAnnotation, MapKit.MKMapView>
public protocol FUIAttributesProvider : AnyObject {
  func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  func styleSheetAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  func mergedAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  func mergedStyleSheetAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
}
extension SAPFiori.FUIAttributesProvider {
  public func mergedAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  public func mergedStyleSheetAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
}
extension SAPFiori.FUIAttributesProvider where Self : SAPFiori.FUITintAttributesProvider {
  public func mergedAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  public func mergedStyleSheetAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
}
extension UIKit.UIBarButtonItem {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var nuiClass: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func override_didMoveToWindow()
}
extension UIKit.UINavigationItem {
  @_Concurrency.MainActor(unsafe) public var nuiClass: Swift.String? {
    get
    set
  }
}
extension UIKit.UITabBarItem {
  @_Concurrency.MainActor(unsafe) public var nuiClass: Swift.String? {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUINoteFormCellContentView : SAPFiori.FUIFormCellContentView<SAPFiori.FUITextView, SAPFiori.FUIControlState, SAPFiori.FUIText>, SAPFiori.FUITitleComponent, SAPFiori.FUIValueComponent, SAPFiori.FUIPlaceholderComponent, SAPFiori.FUISubtitleComponent, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.String) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valueAttributedText: Foundation.NSAttributedString {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valueStyleClassPath: [SAPFiori.FioriStyle]
  public typealias ValueType = Swift.String
  @_Concurrency.MainActor(unsafe) final public let placeholder: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) public var isTrackingLiveChanges: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var minNumberOfLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var maxNumberOfLines: Swift.Int
  @_Concurrency.MainActor(unsafe) public var maxValueTextLength: Swift.Int
  @_Concurrency.MainActor(unsafe) final public let subtitle: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) open var hidesReadOnlyHint: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isReadOnly: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias SubtitleText = SAPFiori.FUIText
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
public protocol FUIObjectHeaderViewBaseComponent : AnyObject {
  var headlineLabel: SAPFiori.FUILabelProxy { get }
  var subheadlineLabel: SAPFiori.FUILabelProxy { get }
  var footnoteLabel: SAPFiori.FUILabelProxy { get }
  var descriptionLabel: SAPFiori.FUILabelProxy { get }
  var statusLabel: SAPFiori.FUILabelProxy { get }
  var substatusLabel: SAPFiori.FUILabelProxy { get }
  var statusImageView: SAPFiori.FUIImageView { get }
  var substatusImageView: SAPFiori.FUIImageView { get }
  var detailImageView: SAPFiori.FUIImageView { get }
  var splitPercent: CoreFoundation.CGFloat { get set }
  var isApplyingSplitPercent: Swift.Bool { get set }
}
public protocol FUIObjectHeaderViewComponent : SAPFiori.FUIObjectHeaderViewBaseComponent {
  var bodyLabel: SAPFiori.FUILabelProxy { get }
  var bodyText: Swift.String? { get set }
  var detailContentView: UIKit.UIView? { get set }
  var labelItems: [SAPFiori.FUILabelItem] { get set }
  var numberOfLabelItems: Swift.Int { get set }
  var kpiView: SAPFiori.FUIKPIView? { get set }
  var statusImageViewAlignment: SAPFiori.FUILabelItem.Alignment { get set }
  var substatusImageViewAlignment: SAPFiori.FUILabelItem.Alignment { get set }
}
extension SAPFiori.FUIObjectHeaderViewComponent {
  public var bodyText: Swift.String? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISimplePropertyCollectionViewCell : SAPFiori.NibDesignableFUIBaseCollectionViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var valueTextField: UIKit.UITextField! {
    get
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var value: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @objc deinit
}
public enum FUIHorizontalAlignment {
  case left
  case center
  case right
  public static func == (a: SAPFiori.FUIHorizontalAlignment, b: SAPFiori.FUIHorizontalAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIButtonFormCell : SAPFiori.FUIInlineValidationTableViewCell {
  public typealias ValueType = SAPFiori.UIControlEvents
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((SAPFiori.UIControlEvents) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var button: SAPFiori.FUIButton! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var alignment: SAPFiori.FUIHorizontalAlignment {
    get
    set
  }
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  @_Concurrency.MainActor(unsafe) override public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public enum FUICalendarStyle {
  case month
  @available(*, unavailable, renamed: "month")
  case monthView
  case week
  @available(*, unavailable, renamed: "week")
  case weekView
  case expandable
  @available(*, unavailable, renamed: "expandable")
  case expandableView
  case rangeSelection
  @available(*, unavailable, renamed: "rangeSelection")
  case multipleSelectionView
  case datesSelection
  public static func == (a: SAPFiori.FUICalendarStyle, b: SAPFiori.FUICalendarStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FUIWeekStartDay {
  case sunday
  case monday
  case saturday
  case localeSpecific
  public static func == (a: SAPFiori.FUIWeekStartDay, b: SAPFiori.FUIWeekStartDay) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct FUIVisibleDates {
  public let previous: [Foundation.Date]
  public let current: [Foundation.Date]
  public let next: [Foundation.Date]
}
public protocol FUIDateSelection {
}
extension Foundation.Date : SAPFiori.FUIDateSelection {
}
extension SAPFiori.FUIDateRange : SAPFiori.FUIDateSelection {
}
@objc @_Concurrency.MainActor(unsafe) open class FUICalendarView : SAPFiori.FUIBaseDrawingView, SAPFiori.FUIAttributesProvider, SAPFiori.FUISelectionRangeComponent, SAPFiori.FUIEventViewComponent {
  @_Concurrency.MainActor(unsafe) public var style: SAPFiori.FUICalendarStyle {
    get
  }
  @_Concurrency.MainActor(unsafe) public var startDay: SAPFiori.FUIWeekStartDay {
    get
  }
  @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var startDate: Foundation.Date? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var endDate: Foundation.Date? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var visibleDates: SAPFiori.FUIVisibleDates? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var selectedDates: [Foundation.Date]? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var displayDateAtStartup: Foundation.Date? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var selectionSingleColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public var selectionRangeColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public var eventViewColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public var hasEventIndicator: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUICalendarViewDelegate?
  @_Concurrency.MainActor(unsafe) public var isPersistentSelection: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var showsWeekNumbers: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public let calendarItemTintAttributesProvider: SAPFiori.FUIControlStateTintAttributesProvider
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(calendarStyle: SAPFiori.FUICalendarStyle = .month, weekStartDay: SAPFiori.FUIWeekStartDay = .localeSpecific, startDate: Foundation.Date? = nil, endDate: Foundation.Date? = nil, displayDateAtStartup: Foundation.Date? = nil, isPersistentSelection: Swift.Bool = false, hasEventIndicator: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func scrollToDate(_ date: Foundation.Date?, animated: Swift.Bool = true, completionHandler: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) open func selectDate(_ date: Foundation.Date?)
  @_Concurrency.MainActor(unsafe) open func selectDateRange(_ dateRange: SAPFiori.FUIDateRange?)
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func reloadData()
}
extension SAPFiori.FUICalendarView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
public protocol FUICalendarViewDelegate : AnyObject {
  func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeVisibleDatesTo visibleDates: SAPFiori.FUIVisibleDates)
  func calendarView(_ calendarView: SAPFiori.FUICalendarView, didSelectDate date: Foundation.Date, cell: SAPFiori.FUICalendarItemCollectionViewCell)
  func calendarView(_ calendarView: SAPFiori.FUICalendarView, didDeselectDate date: Foundation.Date, cell: SAPFiori.FUICalendarItemCollectionViewCell)
  func calendar(_ calendarView: SAPFiori.FUICalendarView, willDisplay cell: SAPFiori.FUICalendarItemCollectionViewCell, forItemAt date: Foundation.Date, indexPath: Foundation.IndexPath)
  func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeTitleTo title: Swift.String)
  func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeSelections selections: [SAPFiori.FUIDateSelection])
}
extension SAPFiori.FUICalendarViewDelegate {
  public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeVisibleDatesTo visibleDates: SAPFiori.FUIVisibleDates)
  public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didSelectDate date: Foundation.Date, cell: SAPFiori.FUICalendarItemCollectionViewCell)
  public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didDeselectDate date: Foundation.Date, cell: SAPFiori.FUICalendarItemCollectionViewCell)
  public func calendar(_ calendarView: SAPFiori.FUICalendarView, willDisplay cell: SAPFiori.FUICalendarItemCollectionViewCell, forItemAt date: Foundation.Date, indexPath: Foundation.IndexPath)
  public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeTitleTo title: Swift.String)
}
extension SAPFiori.FUICalendarView : SAPFiori.FUICalendarViewDelegate {
  @_Concurrency.MainActor(unsafe) public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeVisibleDatesTo visibleDates: SAPFiori.FUIVisibleDates)
  @_Concurrency.MainActor(unsafe) public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didSelectDate date: Foundation.Date, cell: SAPFiori.FUICalendarItemCollectionViewCell)
  @_Concurrency.MainActor(unsafe) public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didDeselectDate date: Foundation.Date, cell: SAPFiori.FUICalendarItemCollectionViewCell)
  @_Concurrency.MainActor(unsafe) public func calendar(_ calendarView: SAPFiori.FUICalendarView, willDisplay cell: SAPFiori.FUICalendarItemCollectionViewCell, forItemAt date: Foundation.Date, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeTitleTo title: Swift.String)
  @_Concurrency.MainActor(unsafe) public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeSelections selections: [SAPFiori.FUIDateSelection])
}
extension SAPFiori.FUIMapToolbar {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class LegendButton : SAPFiori.FUIMapToolbarButton {
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) override public init(type: SAPFiori.FUIMapToolbarButtonType)
    @objc deinit
  }
}
@available(*, unavailable, renamed: "FUIMapToolbar.LegendButton")
public typealias FUIMapToolbarLegendButton = SAPFiori.FUIMapToolbar.LegendButton
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUITextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.String?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var isFioriStyleSecureTextEntry: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var secureShowImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var secureHideImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) open var secureHideButton: SAPFiori.FUIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var secureShowButton: SAPFiori.FUIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeholderRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func addSubview(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func caretRect(for position: UIKit.UITextPosition) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func clearButtonRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUILoadingIndicatorView : SAPFiori.NibDesignable {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var activityIndicator: UIKit.UIActivityIndicatorView! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var textLabel: UIKit.UILabel! {
    get
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isAnimating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func show(animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func dismiss()
  @_Concurrency.MainActor(unsafe) open func startAnimating()
  @_Concurrency.MainActor(unsafe) open func stopAnimating()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
public enum FUIControlLayout {
  case none
  case single
  case double
  public static func == (a: SAPFiori.FUIControlLayout, b: SAPFiori.FUIControlLayout) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol FUIGlyphImage {
  var glyphText: Swift.String? { get }
  var glyphImage: UIKit.UIImage? { get }
  var attributedText: Foundation.NSAttributedString! { get }
  var attributes: [SAPFiori.NSAttributedStringKey : Any] { get }
}
extension SAPFiori.FUIImageView : SAPFiori.FUIGlyphImage {
  @_Concurrency.MainActor(unsafe) public var glyphImage: UIKit.UIImage? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var attributedText: Foundation.NSAttributedString! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var attributes: [SAPFiori.NSAttributedStringKey : Any] {
    get
  }
}
extension SAPFiori.FUIImageView : SAPFiori.FUIAttributedGlyphImage {
  @_Concurrency.MainActor(unsafe) public var size: CoreFoundation.CGSize? {
    get
  }
}
public protocol FUIAttributedGlyphImage : SAPFiori.FUIGlyphImage {
  var size: CoreFoundation.CGSize? { get }
  var tintColor: UIKit.UIColor! { get set }
  var isCircular: Swift.Bool { get set }
  var contentMode: SAPFiori.UIViewContentMode { get set }
}
public class FUIAttributedImage : SAPFiori.FUIAttributedGlyphImage {
  public var bounds: CoreFoundation.CGRect {
    get
    set
  }
  public var glyphImage: UIKit.UIImage? {
    get
  }
  public var attributedText: Foundation.NSAttributedString! {
    get
  }
  public var size: CoreFoundation.CGSize? {
    get
    set
  }
  public var tintColor: UIKit.UIColor! {
    get
    set
  }
  public var isCircular: Swift.Bool
  public var contentMode: SAPFiori.UIViewContentMode
  public var attributes: [SAPFiori.NSAttributedStringKey : Any] {
    get
    set
  }
  public init(image: UIKit.UIImage)
  public init(image: UIKit.UIImage, attributes: [SAPFiori.NSAttributedStringKey : Any])
  @objc deinit
}
extension SAPFiori.FUIGlyphImage {
  public var glyphText: Swift.String? {
    get
  }
  public var glyphImage: UIKit.UIImage? {
    get
  }
  public var attributes: [SAPFiori.NSAttributedStringKey : Any] {
    get
  }
}
@available(*, deprecated, message: "Use FUICollectionViewTableViewCell instead.")
open class FUITableViewCollectionSection {
  open var collectionView: UIKit.UICollectionView {
    get
  }
  open var collectionViewTableViewCell: SAPFiori.FUICollectionViewTableViewCell {
    get
  }
  public init(tableView: UIKit.UITableView, collectionViewLayout: UIKit.UICollectionViewLayout = UICollectionViewFlowLayout())
  open var rowCount: Swift.Int {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIAttachmentsFormCell : SAPFiori.FUIInlineValidationTableViewCell {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) open var attachmentsController: SAPFiori.FUIAttachmentsViewController {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  @_Concurrency.MainActor(unsafe) override public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
public enum FUICollectionViewLayout {
  public static var horizontalScroll: SAPFiori.FUIHorizontalScrollCollectionViewLayout {
    get
  }
  public static var horizontalScrollDynamicSize: SAPFiori.FUIHorizontalScrollDynamicSizeCollectionViewLayout {
    get
  }
  public static var horizontalFlow: SAPFiori.FUIHorizontalFlowCollectionViewLayout {
    get
  }
  public static var autosizingColumnFlow: SAPFiori.FUIStandardAutoSizingColumnFlowLayout {
    get
  }
  public static var keyValueColumnFlow: SAPFiori.FUIKeyValueFlowLayout {
    get
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIObjectCardContentView : SAPFiori.FUIObjectViewBase, SAPFiori.FUIObjectCardComponent {
  @_Concurrency.MainActor(unsafe) open var trailingProperties: [SAPFiori.FUIObjectCardContentView.OrderedPropertyRef] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let title: SAPFiori.FUIMultiLineText
  @_Concurrency.MainActor(unsafe) final public let subtitle: SAPFiori.FUIMultiLineText
  @_Concurrency.MainActor(unsafe) final public let footnote: SAPFiori.FUIMultiLineText
  @_Concurrency.MainActor(unsafe) final public let status: SAPFiori.FUIMultiLineText
  @_Concurrency.MainActor(unsafe) final public let body: SAPFiori.FUIMultiLineText
  @_Concurrency.MainActor(unsafe) public var statusImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var iconImages: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var rating: Swift.Int? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tags: [SAPFiori.FUITag] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberOfTagLines: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var hiddenTagsIndicatorAttrText: Foundation.NSAttributedString {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var overflowActionSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override public var splitPercent: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var overflowAction: SAPFiori.FUIButton {
    get
  }
  public enum OrderedPropertyRef {
    case footnote
    case rating
    case tags
    public static func == (a: SAPFiori.FUIObjectCardContentView.OrderedPropertyRef, b: SAPFiori.FUIObjectCardContentView.OrderedPropertyRef) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias FootnoteText = SAPFiori.FUIMultiLineText
  public typealias StatusText = SAPFiori.FUIMultiLineText
  public typealias SubtitleText = SAPFiori.FUIMultiLineText
  public typealias Text = SAPFiori.FUIMultiLineText
  public typealias TitleText = SAPFiori.FUIMultiLineText
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIHorizontalFlowCollectionViewLayout : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) open var minimumScaledItemSize: CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) open var numberOfColumns: Swift.Int
  @_Concurrency.MainActor(unsafe) open var isLayoutJustified: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var numberOfRows: Swift.Int
  @_Concurrency.MainActor(unsafe) open var isTopAligned: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var scrollDirection: SAPFiori.UICollectionViewScrollDirection {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForElements(in rect: CoreFoundation.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func shouldInvalidateLayout(forBoundsChange newBounds: CoreFoundation.CGRect) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var collectionViewContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func invalidateLayout(with context: UIKit.UICollectionViewLayoutInvalidationContext)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISingleActionButton : SAPFiori.FUIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUISignatureCaptureView : UIKit.UIView, SAPFiori.FUIStrokeComponent {
  @_Concurrency.MainActor(unsafe) weak public var xImageView: UIKit.UIImageView! {
    get
  }
  @_Concurrency.MainActor(unsafe) open var hidesXImageView: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var usesCompactSignature: Swift.Bool? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var signatureLineView: UIKit.UIView! {
    get
  }
  @_Concurrency.MainActor(unsafe) open var hidesSignatureLineView: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var strokeWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var strokeColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var signatureImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var appliesTintColorToImage: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var isFullScreenMode: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func clear()
  @_Concurrency.MainActor(unsafe) public func generateImage() -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(*, unavailable, renamed: "FUISignatureCaptureView")
open class FUISignatureFormView {
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIStepperCollectionViewCell : SAPFiori.FUIInlineValidationDrawingCollectionViewCell<SAPFiori.FUIStepperView>, SAPFiori.FUIFormCell {
  @_Concurrency.MainActor(unsafe) open var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var valueTextField: SAPFiori.FUITextField {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isTrackingLiveChanges: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hintText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maximumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var minimumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var stepValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var value: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.Double) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  public typealias ValueType = Swift.Double
  @objc deinit
}
extension SAPFiori.FUIStepperCollectionViewCell : SAPFiori.FUITintAttributesProvider {
  @_Concurrency.MainActor(unsafe) public var tintAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIControlState : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tintState: SAPFiori.FUIControlState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func tintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) public func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIStepperCollectionViewCell.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIStepperCollectionViewCell.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  public typealias TintState = SAPFiori.FUIControlState
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseCollectionViewLayout<LayoutManager> : UIKit.UICollectionViewLayout where LayoutManager : SAPFiori.FUISectionLayoutManager {
  @_Concurrency.MainActor(unsafe) open var sectionInset: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) open var itemSize: CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) open var estimatedItemSize: CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) open var interitemSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open var lineSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open var headerReferenceHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open var footerReferenceHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var invalidationContextClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var flipsHorizontallyInOppositeLayoutDirection: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var collectionViewContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func shouldInvalidateLayout(forBoundsChange newBounds: CoreFoundation.CGRect) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func shouldInvalidateLayout(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func invalidateLayout(with context: UIKit.UICollectionViewLayoutInvalidationContext)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func invalidationContext(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> UIKit.UICollectionViewLayoutInvalidationContext
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForElements(in rect: CoreFoundation.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForDecorationView(ofKind elementKind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @objc deinit
}
extension SAPFiori.FUIMapDetailPanel {
  @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class StatusTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIMapDetailStatusView> {
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
    @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
    @objc deinit
  }
}
@available(*, unavailable, renamed: "FUIMapDetailPanel.StatusTableViewCell")
public typealias FUIMapDetailStatusTableViewCell = SAPFiori.FUIMapDetailPanel.StatusTableViewCell
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIListPickerTableViewController : UIKit.UITableViewController, UIKit.UISearchResultsUpdating, UIKit.UISearchBarDelegate, SAPFiori.FUIBarcodeScanViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public class func createInstanceFromStoryboard() -> SAPFiori.FUIListPickerTableViewController
  @_Concurrency.MainActor(unsafe) public var effectiveNavigationController: UIKit.UINavigationController? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var listPicker: SAPFiori.FUIListPicker
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) public var onSelectionHandler: ((Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onMultipleSelectionHandler: (([Swift.Int]) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onUuidSelectionHandler: ((Swift.String) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onUuidMultipleSelectionHandler: (([Swift.String]) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var showsCancelButton: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isDismissedOnSelection: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var allowsMultipleSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsEmptySelection: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) public var adjustsContentOffsetOnCancelSearch: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) public func selectItem(_ index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func selectItem(_ uniqueIdentifier: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc public func updateSearchResults(for searchController: UIKit.UISearchController)
  @_Concurrency.MainActor(unsafe) @objc public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc public func searchBar(_ searchBar: UIKit.UISearchBar, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func searchBarShouldBeginEditing(_ searchBar: UIKit.UISearchBar) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func searchBarTextDidBeginEditing(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc public func searchBarShouldEndEditing(_ searchBar: UIKit.UISearchBar) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func searchBarTextDidEndEditing(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc public func searchBarBookmarkButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc public func searchBarCancelButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc public func searchBarResultsListButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc public func searchBar(_ searchBar: UIKit.UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func barcodeScanViewController(_ barcodeScanViewController: SAPFiori.FUIBarcodeScanViewController, didReceiveScanResult scanResult: SAPFiori.FUIBarcodeScanResult?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseDrawingViewController<InnerView> : UIKit.UIViewController, SAPFiori.InnerViewContainer where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  @_Concurrency.MainActor(unsafe) public var bounds: CoreFoundation.CGRect {
    get
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) public var safeAreaInsets: UIKit.UIEdgeInsets {
    get
  }
  @_Concurrency.MainActor(unsafe) public var _innerView: InnerView! {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @objc deinit
}
public enum FUIGridRowItemType {
  case number
  case text
  case image
  public static func == (a: SAPFiori.FUIGridRowItemType, b: SAPFiori.FUIGridRowItemType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol FUIGridRowItem : AnyObject {
  var type: SAPFiori.FUIGridRowItemType { get }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIListPickerFormView : SAPFiori.FUIDrawingView, SAPFiori.FUITitleMultiLineComponent, SAPFiori.FUIValueComponent {
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIMultiLineText
  @_Concurrency.MainActor(unsafe) public var valueText: SAPFiori.FUIMultiLineText
  @_Concurrency.MainActor(unsafe) public var valueAttributedText: Foundation.NSAttributedString {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var value: [Swift.Int]
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: (([Swift.Int]) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var valueOptions: [Swift.String]
  @_Concurrency.MainActor(unsafe) public var listPicker: SAPFiori.FUIListPicker!
  @_Concurrency.MainActor(unsafe) public var alwaysShowValueTextOnBottom: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsMultipleSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func setup()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias TitleText = SAPFiori.FUIMultiLineText
  public typealias ValueType = [Swift.Int]
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIObjectHeaderChartView : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUITitleComponent, SAPFiori.FUISubtitleComponent, SAPFiori.FUITrendComponent, SAPFiori.FUIKPIComponent, SAPFiori.FUIKPIAttributesConsumer, SAPFiori.FUIKPIAttributesProvider {
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var trend: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var trendImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var trendSemanticColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var trendImageSize: CoreFoundation.CGSize?
  @_Concurrency.MainActor(unsafe) public var kpiItems: [SAPFiori.FUIKPIViewItem] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var kpiUnitItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var kpiMetricItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var kpiIconItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var kpiFractionItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var kpiAttributesProvider: SAPFiori.FUIKPIAttributesProvider?
  @_Concurrency.MainActor(unsafe) final public let chartView: SAPFiori.FUIChartView
  @_Concurrency.MainActor(unsafe) override open var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var longPressGestureRecognizer: UIKit.UILongPressGestureRecognizer! {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) open func defaultAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) open func tintAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) open func kpiParagraphStyle() -> UIKit.NSParagraphStyle
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias SubtitleText = SAPFiori.FUIText
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUITimelineNowIndicatorCell : SAPFiori.NibDesignableFUIBaseTableViewCell {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var nodeImageView: SAPFiori.FUIImageView! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var nodeColor: UIKit.UIColor? {
    get
    set
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var indicatorLine: UIKit.UIView! {
    get
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var nodeImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var timelineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
extension SAPFiori.FUITimelineNowIndicatorCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUICreateGeometryPopOverTableViewController : SAPFiori.FUIResizablePopoverContainer, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open var didSelectHandler: ((SAPFiori.FUIMapLegendItem) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc public protocol FUIListPickerDataSource {
  @available(*, unavailable, renamed: "numberOfRows(in:)")
  @objc optional func numberOfRows() -> Swift.Int
  @objc optional func numberOfRows(in listPickerTableView: UIKit.UITableView) -> Swift.Int
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, cellForRowAt index: Swift.Int, isFiltered: Swift.Bool) -> UIKit.UITableViewCell
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, cellForItemWithUniqueIdentifier uniqueIdentifier: Swift.String) -> UIKit.UITableViewCell
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, uniqueIdentifierForItemAt index: Swift.Int) -> Swift.String
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, indexForUniqueIdentifier uniqueIdentifier: Swift.String) -> Swift.Int
  @objc optional func numberOfSections(in listPicker: SAPFiori.FUIListPicker) -> Swift.Int
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, cellForRowAtIndexPath indexPath: Foundation.IndexPath, isFiltered: Swift.Bool) -> UIKit.UITableViewCell
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, uniqueIdentifierForItemAtIndexPath indexPath: Foundation.IndexPath) -> Swift.String
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, indexPathForUniqueIdentifier uniqueIdentifier: Swift.String) -> Foundation.IndexPath?
}
@objc public protocol FUIListPickerSearchResultsUpdating {
  @objc func listPicker(_ listPicker: SAPFiori.FUIListPicker, updateSearchResults forSearchString: Swift.String)
  @objc optional func listPicker(_ listPicker: SAPFiori.FUIListPicker, filteredDataSourceContainsItemAt unfilteredIndex: Swift.Int) -> Swift.Bool
  @objc optional func listPicker(_ listPicker: SAPFiori.FUIListPicker, unfilteredDataSourceIndexOfItemAt filteredIndex: Swift.Int) -> Swift.Int
  @objc optional func listPicker(_ listPicker: SAPFiori.FUIListPicker, filteredDataSourceContainsItemWithUniqueIdentifier uniqueIdentifier: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIListPickerFormCell : SAPFiori.FUIInlineValidationTableViewCell {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  public typealias ValueType = [Swift.Int]
  @_Concurrency.MainActor(unsafe) public var value: [Swift.Int]
  @_Concurrency.MainActor(unsafe) public var uuidValues: [Swift.String]
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: (([Swift.Int]) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onUuidChangeHandler: (([Swift.String]) -> Swift.Void)?
  @available(*, deprecated, message: "No longer needed.")
  @_Concurrency.MainActor(unsafe) public var hierarchyPickerType: SAPFiori.FUIHierarchyListPickerType
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) public var valueOptions: [Swift.String]
  @_Concurrency.MainActor(unsafe) public var listPicker: SAPFiori.FUIListPicker!
  @_Concurrency.MainActor(unsafe) public var presentsListPickerModally: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var allowsMultipleSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsEmptySelection: Swift.Bool
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @available(*, unavailable, renamed: "valueLabel")
  @_Concurrency.MainActor(unsafe) weak public var valueTextField: UIKit.UITextField! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var valueLabel: UIKit.UILabel! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isUndoEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isTrackingLiveChanges: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isPickerDismissedOnSelection: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var alwaysShowValueTextOnBottom: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateConstraints()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
}
public enum FUIHierarchyListPickerType {
  case none
  case singleLine
  case multiLine
  public static func == (a: SAPFiori.FUIHierarchyListPickerType, b: SAPFiori.FUIHierarchyListPickerType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol FUIChartViewDelegate : AnyObject {
  func chartView(_ chartView: SAPFiori.FUIChartView, didChangeSelections selections: [SAPFiori.FUIChartPlotItem]?)
  func chartView(_ chartView: SAPFiori.FUIChartView, colorForPlotItem plotItem: SAPFiori.FUIChartPlotItem) -> UIKit.UIColor?
}
extension SAPFiori.FUIChartViewDelegate {
  public func chartView(_ chartView: SAPFiori.FUIChartView, didChangeSelections selections: [SAPFiori.FUIChartPlotItem]?)
  public func chartView(_ chartView: SAPFiori.FUIChartView, colorForPlotItem plotItem: SAPFiori.FUIChartPlotItem) -> UIKit.UIColor?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISearchController : UIKit.UISearchController, SAPFiori.FUIBarcodeScanViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(searchResultsController: UIKit.UIViewController?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isActive: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var searchBar: SAPFiori.FUISearchBar {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var searchResultsUpdater: UIKit.UISearchResultsUpdating? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var setsNavigationBarColor: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var setsStatusBarStyle: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func barcodeScanViewController(_ barcodeScanViewController: SAPFiori.FUIBarcodeScanViewController, didReceiveScanResult scanResult: SAPFiori.FUIBarcodeScanResult?)
  @objc deinit
}
extension SAPFiori.FUISearchController : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarShouldBeginEditing(_ searchBar: UIKit.UISearchBar) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarTextDidBeginEditing(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarShouldEndEditing(_ searchBar: UIKit.UISearchBar) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarTextDidEndEditing(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarBookmarkButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarCancelButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarResultsListButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Swift.Int)
}
extension SAPFiori.FUISearchController : UIKit.UIBarPositioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func position(for bar: UIKit.UIBarPositioning) -> UIKit.UIBarPosition
}
extension SAPFiori.FUISearchController : UIKit.UISearchResultsUpdating {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateSearchResults(for searchController: UIKit.UISearchController)
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIObjectBaseTableViewCell<InnerView> : SAPFiori.FUIBaseDrawingTableViewCell<InnerView>, SAPFiori.FUIContentCopyable where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIObjectBaseDrawing, InnerView : SAPFiori.FUIReactingToAccessory, InnerView : SAPFiori.FUIStyleByStringAttributes {
  @_Concurrency.MainActor(unsafe) public var iconsColumnWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessoryView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var isActionAccessoryAlsoEditingActionAccessory: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var actionAccessoryView: SAPFiori.FUISingleActionAccessoryView? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var actionAccessoryType: SAPFiori.FUITableViewCellActionAccessoryType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var editingAccessoryView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willTransition(to state: SAPFiori.UITableViewCellStateMask)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didTransition(to state: SAPFiori.UITableViewCellStateMask)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class FUIGridRowImageItem : SAPFiori.FUIImageView, SAPFiori.FUIGridRowItem {
  @_Concurrency.MainActor(unsafe) public var isAffectingRowHeight: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var binding: SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Image?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var type: SAPFiori.FUIGridRowItemType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FUIChartLabelAttributes {
  public var color: UIKit.UIColor {
    get
    set
  }
  public var isHidden: Swift.Bool {
    get
    set
  }
  @objc deinit
}
public enum FUICollectionViewVerticalAlignment : Swift.Int {
  case top
  case middle
  case bottom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIHorizontalScrollCollectionViewLayout : UIKit.UICollectionViewLayout {
  @_Concurrency.MainActor(unsafe) open var itemSize: CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) open var estimatedItemSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var sectionInset: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var headerReferenceSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var footerReferenceSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var minimumInteritemSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var alignment: SAPFiori.FUICollectionViewVerticalAlignment {
    get
    set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) public var scrollDirection: SAPFiori.UICollectionViewScrollDirection {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var flipsHorizontallyInOppositeLayoutDirection: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var invalidationContextClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func shouldInvalidateLayout(forBoundsChange newBounds: CoreFoundation.CGRect) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func shouldInvalidateLayout(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func invalidationContext(forBoundsChange newBounds: CoreFoundation.CGRect) -> UIKit.UICollectionViewLayoutInvalidationContext
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func invalidationContext(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> UIKit.UICollectionViewLayoutInvalidationContext
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func invalidateLayout(with context: UIKit.UICollectionViewLayoutInvalidationContext)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var collectionViewContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForSupplementaryView(ofKind elementKind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForElements(in rect: CoreFoundation.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol FUIControlStateConvertable {
  func transformToFUIControlState() -> SAPFiori.FUIControlState
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIBaseAccessoryDrawingCollectionViewCell<InnerView> : SAPFiori.FUIBaseDrawingCollectionViewCell<InnerView> where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIReactingToAccessory, InnerView : SAPFiori.FUIStyleByStringAttributes {
  @_Concurrency.MainActor(unsafe) open var accessoryView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var accessoriesPaddedWidth: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIInlineValidationDrawingTableViewCell<InnerView> : SAPFiori.FUIBaseDrawingTableViewCell<InnerView>, SAPFiori.FUIInlineValidation where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  @_Concurrency.MainActor(unsafe) open var validationView: SAPFiori.FUIInlineValidationView!
  @_Concurrency.MainActor(unsafe) open var validationMessage: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var inlineValidationViewHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) open var disabledBackgroundView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override open func applyTintColor(forState state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public enum FUIInterfaceLevel : Swift.String, Swift.CaseIterable {
  case device
  case deviceInverse
  case baseConstant
  case elevatedConstant
  public func inverse() -> SAPFiori.FUIInterfaceLevel
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SAPFiori.FUIInterfaceLevel]
  public typealias RawValue = Swift.String
  public static var allCases: [SAPFiori.FUIInterfaceLevel] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension SAPFiori.FUIInterfaceLevel : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public enum FUIChartType : Swift.CaseIterable {
  case line
  case column
  case combo
  case bar
  case stackedColumn
  case stackedBar
  case waterfall
  case area
  case scatter
  case bubble
  case stock
  case donut
  public static func == (a: SAPFiori.FUIChartType, b: SAPFiori.FUIChartType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SAPFiori.FUIChartType]
  public static var allCases: [SAPFiori.FUIChartType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum FUIChartSelectionMode {
  case single
  case all
  case multiple
  public static func == (a: SAPFiori.FUIChartSelectionMode, b: SAPFiori.FUIChartSelectionMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ChartDefaultCategorySelectionMode {
  case index
  case first
  case last
  public static func == (a: SAPFiori.ChartDefaultCategorySelectionMode, b: SAPFiori.ChartDefaultCategorySelectionMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol FUIChartPlotItem {
  var seriesIndex: Swift.Int { get }
  var categoryIndex: Swift.Int { get }
  func value(dimension: Swift.Int) -> Swift.Double?
}
extension SAPFiori.FUIChartPlotItem {
  public func value(dimension: Swift.Int = 0) -> Swift.Double?
}
public enum FUIGeospatialType : Swift.Int {
  case point
  case polygon
  case polyline
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SAPFiori.FUIObjectView : SAPFiori.FUIObjectComponent {
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUISliderFormCell : SAPFiori.FUIInlineValidationTableViewCell, SAPFiori.FUIPropertyFormCell {
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  public typealias ValueType = Swift.Float
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var value: Swift.Float {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.Float) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var unit: Foundation.Unit {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let formatter: Foundation.MeasurementFormatter
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var valueTextField: UIKit.UITextField! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var slider: UIKit.UISlider! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var maximumValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimumValue: Swift.Float {
    get
    set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
}
extension Foundation.Bundle {
  public static let SAPFiori: Foundation.Bundle
  public static let module: Foundation.Bundle
}
public protocol _PaletteProvider {
  var uuid: Foundation.UUID { get }
  var colorDefinitions: [SAPFiori.FUIColorStyle : SAPFiori.FUIHexColor] { get }
  func hexColor(for style: SAPFiori.FUIColorStyle) -> SAPFiori.FUIHexColor?
}
public protocol FUIStateTintable : AnyObject {
  var state: SAPFiori.UIControlState { get }
  func stateDidChange()
  var tintColor: UIKit.UIColor! { get set }
  func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  func tintColor(for state: SAPFiori.UIControlState) -> UIKit.UIColor?
}
extension SAPFiori.FUIStateTintableImplementation {
  public var tintableChildren: [SAPFiori.FUIStateTintable] {
    get
  }
}
extension SAPFiori.FUIStateTintable where Self : SAPFiori.FUIStateTintableImplementation {
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  public func stateDidChange()
  public func tintColor(for state: SAPFiori.UIControlState) -> UIKit.UIColor?
}
extension SAPFiori.FUIStateTintable where Self : SAPFiori.FUIStateSelectable {
  public var state: SAPFiori.UIControlState {
    get
  }
}
public protocol FUIStateTintableImplementation : AnyObject {
  var tintColorForState: [SAPFiori.UIControlState : UIKit.UIColor] { get set }
  func applyTintColor(forState state: SAPFiori.UIControlState)
  func tintColorDidChange()
  var _isTintColorOverridden: Swift.Bool { get set }
  var tintableChildren: [SAPFiori.FUIStateTintable] { get }
}
@_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIChartPlotTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIChartPlotView> {
  @_Concurrency.MainActor(unsafe) public var chartView: SAPFiori.FUIChartView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FUIThemeManager {
  public static let shared: SAPFiori.FUIThemeManager
  public func setPaletteVersion(_ version: SAPFiori.FUIPaletteVersion)
  public func setPalette(_ palette: SAPFiori.FUIPalette)
  public var palette: SAPFiori.FUIPalette {
    get
  }
  public func reset()
  public func setColor(_ color: UIKit.UIColor, for style: SAPFiori.FUIColorStyle)
  public func setColor(_ color: UIKit.UIColor, for style: SAPFiori.FUIColorStyle, variant: SAPFiori.FUIColorVariant?)
  @available(*, unavailable, renamed: "setColor(color:for:variant:)")
  public func setColor(_ color: UIKit.UIColor, for style: SAPFiori.FUIColorStyle, background scheme: SAPFiori.FUIBackgroundColorScheme?)
  public func setHexColor(_ hex: Swift.String, for style: SAPFiori.FUIColorStyle)
  public func setHexColor(_ hex: Swift.String, for style: SAPFiori.FUIColorStyle, variant: SAPFiori.FUIColorVariant)
  @available(*, unavailable, renamed: "setHexColor(hex:for:variant:)")
  public func setHexColor(_ hex: Swift.String, for style: SAPFiori.FUIColorStyle, background scheme: SAPFiori.FUIBackgroundColorScheme)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIChartLegendView : SAPFiori.FUIDrawingView, SAPFiori.FUISeriesTitleComponent, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) public var seriesColors: [UIKit.UIColor] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var allowSelection: Swift.Bool
  @available(*, unavailable, renamed: "indexForSelectedSeries")
  @_Concurrency.MainActor(unsafe) open var indexForSelectedSeires: Swift.Int? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var indexForSelectedSeries: Swift.Int? {
    get
  }
  @_Concurrency.MainActor(unsafe) open func selectSeries(at index: Swift.Int?)
  @_Concurrency.MainActor(unsafe) open func deselectSeries(at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIChartLegendViewDelegate?
  @_Concurrency.MainActor(unsafe) public var seriesTitles: [SAPFiori.FUIText] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var seriesTitlesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
}
public protocol FUIChartLegendViewDelegate : AnyObject {
  func legendView(_ legendView: SAPFiori.FUIChartLegendView, didSelectSeries index: Swift.Int)
  func legendView(_ legendView: SAPFiori.FUIChartLegendView, didDeSelectSeries index: Swift.Int)
}
extension SAPFiori.FUIChartLegendViewDelegate {
  public func legendView(_ legendView: SAPFiori.FUIChartLegendView, didSelectSeries index: Swift.Int)
  public func legendView(_ legendView: SAPFiori.FUIChartLegendView, didDeSelectSeries index: Swift.Int)
}
public protocol FUIAttributesConsumer : AnyObject {
  var attributesProvider: SAPFiori.FUIAttributesProvider? { get set }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FUITextKitView : UIKit.UIView, SAPFiori.FUIContentCopyable {
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(_ sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resignFirstResponder() -> Swift.Bool
}
@_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIKPIProgressCardView : SAPFiori.FUIKPICardView {
  @_Concurrency.MainActor(unsafe) override public var kpiAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) open var progress: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public enum FUIButtonStyle : Swift.Int {
  @available(*, deprecated, renamed: "tertiary")
  case none
  @available(*, deprecated, renamed: "secondary")
  case fuiRounded
  @available(*, deprecated, renamed: "primary")
  case fuiRoundedFilled
  case primary
  case secondary
  case tertiary
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum FUIButtonSemantic : Swift.Int {
  case normal
  case tint
  case negative
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class NUIRenderer : ObjectiveC.NSObject {
  @objc public static func renderActivityIndicator(activityIndicator: UIKit.UIActivityIndicatorView)
  @objc public static func renderActivityIndicator(activityIndicator: UIKit.UIActivityIndicatorView, withClass className: Swift.String)
  @objc public static func renderBarButtonItem(item: UIKit.UIBarButtonItem)
  @objc public static func renderBarButtonItem(item: UIKit.UIBarButtonItem, withClass className: Swift.String)
  @objc public static func renderButton(button: UIKit.UIButton)
  @objc public static func renderButton(button: UIKit.UIButton, withClass className: Swift.String)
  @objc public static func renderControl(control: UIKit.UIControl)
  @objc public static func renderControl(control: UIKit.UIControl, withClass className: Swift.String)
  @objc public static func renderLabel(label: UIKit.UILabel)
  @objc public static func renderLabel(label: UIKit.UILabel, withClass className: Swift.String)
  @objc public static func renderLabel(label: UIKit.UILabel, withClass className: Swift.String, withSuffix suffix: Swift.String)
  @objc public static func renderImageView(imageView: UIKit.UIImageView, withClass className: Swift.String)
  @objc public static func renderNavigationBar(bar: UIKit.UINavigationBar)
  @objc public static func renderNavigationBar(bar: UIKit.UINavigationBar, withClass className: Swift.String)
  @objc public static func renderProgressView(progressView: UIKit.UIProgressView)
  @objc public static func renderProgressView(progressView: UIKit.UIProgressView, withClass className: Swift.String)
  @objc public static func renderNavigationItem(item: UIKit.UINavigationItem)
  @objc public static func renderNavigationItem(item: UIKit.UINavigationItem, withClass className: Swift.String)
  @objc public static func renderSearchBar(bar: UIKit.UISearchBar)
  @objc public static func renderSearchBar(bar: UIKit.UISearchBar, withClass className: Swift.String)
  @objc public static func renderSegmentedControl(control: UIKit.UISegmentedControl)
  @objc public static func renderSegmentedControl(control: UIKit.UISegmentedControl, withClass className: Swift.String)
  @objc public static func renderSlider(slider: UIKit.UISlider)
  @objc public static func renderSlider(slider: UIKit.UISlider, withClass className: Swift.String)
  @objc public static func renderSwitch(uiSwitch: UIKit.UISwitch)
  @objc public static func renderSwitch(uiSwitch: UIKit.UISwitch, withClass className: Swift.String)
  @objc public static func renderPageControl(pageControl: UIKit.UIPageControl)
  @objc public static func renderPageControl(pageControl: UIKit.UIPageControl, withClass className: Swift.String)
  @objc public static func renderTabBar(bar: UIKit.UITabBar)
  @objc public static func renderTabBar(bar: UIKit.UITabBar, withClass className: Swift.String)
  @objc public static func renderTabBarItem(item: UIKit.UITabBarItem)
  @objc public static func renderTabBarItem(item: UIKit.UITabBarItem, withClass className: Swift.String)
  @objc public static func renderTableView(tableView: UIKit.UITableView)
  @objc public static func renderTableView(tableView: UIKit.UITableView, withClass className: Swift.String)
  @objc public static func renderTableViewCell(cell: UIKit.UITableViewCell)
  @objc public static func renderTableViewCell(cell: UIKit.UITableViewCell, withClass className: Swift.String)
  @objc public static func renderToolbar(bar: UIKit.UIToolbar)
  @objc public static func renderToolbar(bar: UIKit.UIToolbar, withClass className: Swift.String)
  @objc public static func renderTextField(textField: UIKit.UITextField)
  @objc public static func renderTextField(textField: UIKit.UITextField, withClass className: Swift.String)
  @objc public static func renderTextView(textView: UIKit.UITextView)
  @objc public static func renderTextView(textView: UIKit.UITextView, withClass className: Swift.String)
  @objc public static func renderProgressView(kpiProgressView: SAPFiori.FUIKPIProgressView)
  @objc public static func renderProgressView(kpiProgressView: SAPFiori.FUIKPIProgressView, withClass className: Swift.String)
  @objc public static func renderView(view: UIKit.UIView)
  @objc public static func renderView(view: UIKit.UIView, withClass className: Swift.String)
  @objc public static func renderView(view: UIKit.UIView, withClass className: Swift.String, withSuffix suffix: Swift.String)
  @objc public static func renderWindow(window: UIKit.UIWindow)
  @objc public static func renderWindow(window: UIKit.UIWindow, withClass className: Swift.String)
  @objc public static func needsTextTransformWithClass(className: Swift.String) -> Swift.Bool
  @objc public static func transformText(text: Swift.String, withClass className: Swift.String) -> Swift.String
  @objc public static func sizeDidChangeForNavigationBar(bar: UIKit.UINavigationBar)
  @objc public static func sizeDidChangeForTabBar(bar: UIKit.UITabBar)
  @objc public static func sizeDidChangeForTableViewCell(cell: UIKit.UITableViewCell)
  @objc public static func sizeDidChangeForTableView(tableView: UIKit.UITableView)
  @objc public static func addOrientationDidChangeObserver(observer: Swift.AnyObject)
  @objc deinit
  @objc public static func removeOrientationDidChangeObserver(observer: Swift.AnyObject)
  @objc public static func rerender()
  @objc public static func rerenderView(view: UIKit.UIView)
  @objc public static func setRerenderOnOrientationChange(rerender: Swift.Bool)
  @objc public static func getInstance() -> SAPFiori.NUIRenderer
  @objc public static func orientationDidChange(notification: Foundation.NSNotification)
  @objc public static func stylesheetFileChanged()
  @objc override dynamic public init()
}
open class FUIMultiPageUserConsentForm : SAPFiori.FUIUserConsentForm {
  public var pages: [SAPFiori.FUIUserConsentPage]
  public var isRequired: Swift.Bool
  public var isUserAccepted: Swift.Bool {
    get
  }
  public init(pages: [SAPFiori.FUIUserConsentPage], isRequired: Swift.Bool = true)
  @objc deinit
}
public struct FUIMapLegendItem {
  public var title: Swift.String
  public init(title: Swift.String)
  public var backgroundColor: UIKit.UIColor
  public var tintColor: UIKit.UIColor! {
    get
    set
  }
  public var icon: SAPFiori.FUIMapLegendIcon?
  public var line: SAPFiori.FUIMapLegendLine?
  public var fillItem: SAPFiori.FUIMapLegendFillItem?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIChartPlotView : SAPFiori.FUIDrawingView, SAPFiori.FUIAxisTitleComponent {
  @_Concurrency.MainActor(unsafe) public var chartView: SAPFiori.FUIChartView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) public var valuesAxisTitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var secondaryValuesAxisTitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var categoryAxisTitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIObjectCardCollectionViewCell : SAPFiori.FUIBaseDrawingCollectionViewCell<SAPFiori.FUIObjectCardView> {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol FUIContentCopyable : AnyObject {
  var isContentCopyable: Swift.Bool { get set }
}
@available(iOS 14, *)
@_Concurrency.MainActor(unsafe) open class FUISideBarListItem : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUITitleMultiLineComponent, SAPFiori.FUISubtitleMultiLineComponent, SAPFiori.FUILeadingImageViewComponent, SAPFiori.FUITrailingImageViewComponent {
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var leadingImageView: SAPFiori.FUIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var trailingImageView: SAPFiori.FUIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) override open var tintState: SAPFiori.FUIControlState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) override open func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
  public typealias SubtitleText = SAPFiori.FUIMultiLineText
  public typealias TitleText = SAPFiori.FUIMultiLineText
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIRoundedButton : SAPFiori.FUIButton {
  @_Concurrency.MainActor(unsafe) override public var style: SAPFiori.FUIButtonStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(style: SAPFiori.FUIButtonStyle)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public typealias FUIMKRoute = SAPFiori.FUIRoute<MapKit.MKPolyline, MapKit.MKPointAnnotation>
open class FUIRoute<LineGeometry, PointGeometry> where LineGeometry : SAPFiori.FUIPolyline, PointGeometry : SAPFiori.FUIPoint {
  open var routeName: Swift.String?
  open var segments: [LineGeometry]
  open var vertexes: [PointGeometry]
  public init(segments: [LineGeometry], vertexes: [PointGeometry], routeName: Swift.String?)
  @objc deinit
}
extension SAPFiori.FUIRoute : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SAPFiori.FUIRoute<LineGeometry, PointGeometry>, rhs: SAPFiori.FUIRoute<LineGeometry, PointGeometry>) -> Swift.Bool
  open var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIInlineValidationTableViewCell : SAPFiori.NibDesignableFUIBaseTableViewCell, SAPFiori.FUIInlineValidation {
  @_Concurrency.MainActor(unsafe) open var validationView: SAPFiori.FUIInlineValidationView!
  @_Concurrency.MainActor(unsafe) open var validationMessage: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var disabledBackgroundView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var readOnlyBackgroundView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) override open func applyTintColor(forState state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIKeyValueFlowLayout : SAPFiori.FUIStandardAutoSizingColumnFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIRatingControlContentView : SAPFiori.FUIFormCellContentView<SAPFiori.FUIRatingControl, SAPFiori.FUIControlState, SAPFiori.FUIText>, SAPFiori.FUITitleComponent, SAPFiori.FUIPropertyFormCell, SAPFiori.FUISubtitleComponent {
  @_Concurrency.MainActor(unsafe) final public let subtitle: SAPFiori.FUIText
  public typealias Text = SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) open var keyName: Swift.String? {
    get
    set
  }
  public typealias ValueType = Swift.Int
  @_Concurrency.MainActor(unsafe) public var validationMessage: Swift.String?
  @_Concurrency.MainActor(unsafe) public var validationView: SAPFiori.FUIInlineValidationView!
  @_Concurrency.MainActor(unsafe) open var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var value: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var ratingControl: SAPFiori.FUIRatingControl {
    get
  }
  @_Concurrency.MainActor(unsafe) public var truncatesKeyLabel: Swift.Bool
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias SubtitleText = SAPFiori.FUIText
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
@_inheritsConvenienceInitializers open class FUIGridRowSummaryItem : SAPFiori.FUIGridRowTextItem {
  override public var type: SAPFiori.FUIGridRowItemType {
    get
  }
  override public init(text: Swift.String)
  override public init(number: Foundation.NSNumber, formatter: Foundation.NumberFormatter? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIDatePickerFormCell : SAPFiori.FUIInlineValidationTableViewCell, SAPFiori.FUIPropertyFormCell {
  public typealias ValueType = Foundation.Date
  @_Concurrency.MainActor(unsafe) open var value: Foundation.Date {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Foundation.Date) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @available(*, unavailable, message: "use valueLabel")
  @_Concurrency.MainActor(unsafe) weak public var valueTextField: UIKit.UITextField! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var valueLabel: UIKit.UILabel! {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var isEnabled: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, message: "Placeholder is no more supported to KeyLabel")
  @_Concurrency.MainActor(unsafe) public var placeholderText: Swift.String?
  @available(*, unavailable, message: "Placeholder is no more supported to KeyLabel")
  @_Concurrency.MainActor(unsafe) public var placeholderTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) open var dateFormatter: Foundation.DateFormatter? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isTrackingLiveChanges: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var datePickerMode: UIKit.UIDatePicker.Mode {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var datePicker: UIKit.UIDatePicker {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func applyTintColor(forState state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public enum FUIPasscodeControllerError : Swift.Error {
  @available(*, deprecated, renamed: "failedToMatch")
  case invalidPasscode(code: Swift.String, triesRemaining: Swift.Int)
  case failedToMatch(message: Swift.String, triesRemaining: Swift.Int)
  case failedToMeetPolicy(message: Swift.String)
}
public enum FUIPasscodeInputMode : Swift.Int {
  case create
  case match
  case matchForChange
  case change
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum FUIPasscodeSource : Swift.Int {
  case unknown
  case user
  case device
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol FUIPrivateEncryptionKeyGenerator : AnyObject {
  func generatePrivateEncryptionKey() -> Foundation.Data
}
extension SAPFiori.FUIPasscodeControllerDelegate {
  public func passcodePolicy() -> SAPFiori.FUIPasscodePolicy
  public func didSetBiometricIDOption(to enabled: Swift.Bool, fromController passcodeController: SAPFiori.FUIPasscodeController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIPasscodeController : UIKit.UIViewController, SAPFiori.FUIPrivateEncryptionKeyGenerator, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIPasscodeControllerDelegate!
  @_Concurrency.MainActor(unsafe) weak public var privateEncryptionKeyGenerator: SAPFiori.FUIPrivateEncryptionKeyGenerator!
  @_Concurrency.MainActor(unsafe) public var userIdentifier: Swift.String?
  @_Concurrency.MainActor(unsafe) public var keychainAccessGroup: Swift.String?
  @_Concurrency.MainActor(unsafe) public var passcodeSource: SAPFiori.FUIPasscodeSource
  @available(*, unavailable, message: "use choosePasscodeTitleString, confirmPasscodeTitleString, or changePasscodeTitleString")
  @_Concurrency.MainActor(unsafe) public static var setPasscodeTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var choosePasscodeTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var confirmPasscodeTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var changePasscodeTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var passcodeTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var enterPasscodeAgainString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var confirmPasscodeString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var enterYourPasscodeMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var enterYourCurrentPasscodeMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var notNowButtonString: Swift.String?
  @available(*, deprecated, message: "This property is kept for backwards-compatibility, but has no effect on the view. The iOS default localized 'Back' string is used.")
  @_Concurrency.MainActor(unsafe) public static var backItemString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var nextItemString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var doneItemString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var setPasscodeMessageFormat: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var setPasscodeWithDigitsMessageFormat: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var includeRequiredGroupMessage: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var lowerCaseLabelString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var upperCaseLabelString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var digitsLabelString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var nonAlphabeticLabelString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var resetPasscodeButtonString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var passcodeValidationFailedMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var passcodeRejectedMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var useTouchIDMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var useFaceIDMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var retryButtonString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var touchIDTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var faceIDTitleString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var isNowAvailableString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var touchIDMessage1String: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var faceIDMessage1String: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var touchIDEnableMessage1String: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var faceIDEnableMessage1String: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var touchIDMessage2String: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var faceIDMessage2String: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var touchIDEnableMessage2String: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var faceIDEnableMessage2String: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var learnMoreTouchIDLinkString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var learnMoreFaceIDLinkString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var enableButtonString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var authenticateWithTouchIDMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var authenticateWithFaceIDMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var passcodeNotMatchMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var attemptsLeftMessageFormat: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var oneAttempLeftMessageFormat: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var maxAttemptsReachedMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var enterCredentialsMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var okButtonString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var retryPasscodeMessageString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var notNowActionString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var settingsActionString: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var touchIDFallbackButtonTitle: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var biometricIDCancelButtonTitle: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var backgroundImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public static var backgroundImageContentMode: UIKit.UIView.ContentMode
  @available(*, deprecated, message: "No longer supported.")
  @_Concurrency.MainActor(unsafe) public static var allowButtonsToUseIntrinsicContentSize: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var imageViewSize: CoreFoundation.CGSize?
  @_Concurrency.MainActor(unsafe) public var isActionButtonOnNavigationBar: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var actionButton: SAPFiori.FUIButton {
    get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @available(*, deprecated, message: "use isBiometricIDEnabled instead")
  @_Concurrency.MainActor(unsafe) public class func isTouchIDEnabled(userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public class func isBiometricIDEnabled(userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil) -> Swift.Bool
  @available(*, unavailable, message: "use func enableBiometricID(userIdentifier: String?)")
  @_Concurrency.MainActor(unsafe) public class func enableTouchID(forPasscode passcode: Swift.String)
  @_Concurrency.MainActor(unsafe) public class func isPasscodeHashUsed(userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public class func enableBiometricID(_ passcode: Swift.String, userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil)
  @available(*, unavailable, message: "use func enableBiometricID(_ passcode: String, userIdentifier: String? = nil, accessGroup: String? = nil)")
  @_Concurrency.MainActor(unsafe) public class func enableBiometricID(userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil) -> Swift.String
  @available(*, deprecated, message: "use clearBiometricIDSettings instead")
  @_Concurrency.MainActor(unsafe) public class func clearTouchIDSettings(userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public class func clearBiometricIDSettings(userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public class func clearPasscodeSettings(userIdentifier: Swift.String?, accessGroup: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public func generatePrivateEncryptionKey() -> Foundation.Data
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public func isBiometricIDAvailable() -> Swift.Bool
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIButtonFormView : SAPFiori.FUIBaseDrawingView {
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIChartFloorplanView : SAPFiori.FUIDrawingView, SAPFiori.FUITitleMultiLineComponent, SAPFiori.FUISubtitleMultiLineComponent, SAPFiori.FUIStatusMultilineComponent, SAPFiori.FUIAxisTitleComponent, SAPFiori.FUISeriesTitleComponent {
  @_Concurrency.MainActor(unsafe) public var title: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var titleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var subtitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var status: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var statusStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var valuesAxisTitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var secondaryValuesAxisTitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var valuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var secondaryValuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var categoryAxisTitle: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var categoryAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowLegendViewSeriesSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var seriesTitles: [SAPFiori.FUIText] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var seriesTitlesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var seriesTitlesStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] {
    get
    set
  }
  @available(*, deprecated, message: "Will be unavailble in newer SDK version.")
  @_Concurrency.MainActor(unsafe) override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var summaryView: SAPFiori.FUIChartSummaryView! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var legendView: SAPFiori.FUIChartLegendView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var chartView: SAPFiori.FUIChartView {
    get
  }
  @_Concurrency.MainActor(unsafe) override public func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override public func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias StatusText = SAPFiori.FUIMultiLineText
  public typealias SubtitleText = SAPFiori.FUIMultiLineText
  public typealias TitleText = SAPFiori.FUIMultiLineText
  @objc deinit
}
@available(*, unavailable, message: "Use FUITimelineCell.NodeType or FUITimelineMarkerCell.NodeType instead.")
public struct FUITimelineNode {
}
public protocol FUIKPIAttributesConsumer : AnyObject {
  var kpiAttributesProvider: SAPFiori.FUIKPIAttributesProvider? { get set }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIStandardAutoSizingColumnFlowLayout : SAPFiori.FUIBaseCollectionViewLayout<SAPFiori.FUIStandardAutoSizingColumnSectionLayoutManager> {
  @available(*, unavailable, renamed: "interitemSpacing")
  @_Concurrency.MainActor(unsafe) open var minimumInteritemSpacing: CoreFoundation.CGFloat
  @available(*, unavailable, renamed: "lineSpacing")
  @_Concurrency.MainActor(unsafe) open var minimumLineSpacing: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func shouldInvalidateLayout(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func invalidationContext(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> UIKit.UICollectionViewLayoutInvalidationContext
  @_Concurrency.MainActor(unsafe) open var numberOfColumns: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isSingleColumnInCompact: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUIStandardAutoSizingColumnSectionLayoutManager : SAPFiori.FUISectionLayoutManager {
  open var numberOfColumns: Swift.Int
  override open func prepare()
  @objc required dynamic public init()
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIEmptyValueComponent {
  public var emptyText: SAPFiori.FUIText {
    get
    set
  }
  public var emptyTextStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public typealias FUIHierarchyItemComponent = SAPFiori.FUIDetailImageViewComponent & SAPFiori.FUIFootnoteMultiLineComponent & SAPFiori.FUIIconsComponent & SAPFiori.FUIStatusImageComponent & SAPFiori.FUISubtitleMultiLineComponent & SAPFiori.FUITitleMultiLineComponent
public protocol Initializable : AnyObject {
  init()
}
extension SAPFiori.FUITextView : SAPFiori.Initializable {
}
extension SAPFiori.FUIText : SAPFiori.Initializable {
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIFormCellContentView<ValueView, T, Text> : SAPFiori.FUITintableDrawingView<T> where ValueView : UIKit.UIView, ValueView : SAPFiori.Initializable, T : SAPFiori.Defaultable, T : SAPFiori.Enableable, T : Swift.Hashable, Text : SAPFiori.FUITextProtocol, Text : SAPFiori.Initializable {
  @_Concurrency.MainActor(unsafe) final public let title: Text
  @_Concurrency.MainActor(unsafe) public var titleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISignatureCaptureController : UIKit.UIViewController {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var signatureCaptureView: SAPFiori.FUISignatureCaptureView! {
    get
  }
  @_Concurrency.MainActor(unsafe) open var usesCompactSignature: Swift.Bool? {
    get
    set
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var cancelButton: UIKit.UIBarButtonItem! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var doneButton: UIKit.UIBarButtonItem! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var clearButton: UIKit.UIBarButtonItem! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var closeButton: UIKit.UIBarButtonItem {
    get
  }
  @_Concurrency.MainActor(unsafe) public var reenterSignatureButton: UIKit.UIBarButtonItem {
    get
  }
  @_Concurrency.MainActor(unsafe) weak open var delegate: SAPFiori.FUISignatureCaptureControllerDelegate?
  @_Concurrency.MainActor(unsafe) public class func createInstance() -> SAPFiori.FUISignatureCaptureController
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(*, unavailable, renamed: "FUISignatureCaptureController")
open class FUISignatureFormController {
  @objc deinit
}
public protocol FUIModalCheckoutViewControllerDelegate : AnyObject {
  func cancelTapped(onController controller: SAPFiori.FUIModalCheckoutViewController)
  func doneTapped(onController controller: SAPFiori.FUIModalCheckoutViewController)
}
extension SAPFiori.FUIModalCheckoutViewControllerDelegate {
  public func cancelTapped(onController controller: SAPFiori.FUIModalCheckoutViewController)
  public func doneTapped(onController controller: SAPFiori.FUIModalCheckoutViewController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIModalCheckoutViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIModalCheckoutViewControllerDelegate?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var navigationBar: UIKit.UINavigationBar! {
    get
  }
  @available(*, unavailable, message: "Use `navigationItem` property for customization.")
  @_Concurrency.MainActor(unsafe) public var navigationBarTitleItem: UIKit.UINavigationItem! {
    get
  }
  @available(*, unavailable, message: "Please set custom bar button to `leftBarButtonItem` of `navigationItem`.")
  @_Concurrency.MainActor(unsafe) public var leftBarButtonItem: UIKit.UIBarButtonItem! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var textLabel: UIKit.UILabel! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var listItems: [UIKit.UIView]
  @_Concurrency.MainActor(unsafe) public var showDoneButtonOnCompletion: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var displayState: SAPFiori.FUICheckoutIndicatorView.DisplayState {
    get
  }
  @_Concurrency.MainActor(unsafe) public class func instantiateViewController() -> SAPFiori.FUIModalCheckoutViewController
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func changeDisplayState(to newState: SAPFiori.FUICheckoutIndicatorView.DisplayState, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.String : SAPFiori.FUIGlyphImage {
  public var glyphText: Swift.String? {
    get
  }
  public var attributedText: Foundation.NSAttributedString! {
    get
  }
  public var attributes: [SAPFiori.NSAttributedStringKey : Any] {
    get
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIDataTableCardView : SAPFiori.FUICardBaseView, SAPFiori.FUISubtitleMultiLineComponent, SAPFiori.FUIFootnoteComponent, SAPFiori.FUIDetailImageViewComponent {
  @_Concurrency.MainActor(unsafe) public var detailImageView: SAPFiori.FUIImageView
  @_Concurrency.MainActor(unsafe) public var subtitle: SAPFiori.FUIMultiLineText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var footnote: SAPFiori.FUIText {
    get
  }
  @_Concurrency.MainActor(unsafe) public var detailImageViewSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var data: [[SAPFiori.FUIText]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override public func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override public func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) override public func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias FootnoteText = SAPFiori.FUIText
  public typealias SubtitleText = SAPFiori.FUIMultiLineText
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIUserConsentViewController : UIKit.UIViewController, SAPFiori.FUIUserConsentPageViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public var forms: [SAPFiori.FUIUserConsentForm]
  @_Concurrency.MainActor(unsafe) weak public var delegate: SAPFiori.FUIUserConsentViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) public var alertMessage: Swift.String?
  @_Concurrency.MainActor(unsafe) public var alertQuitTitle: Swift.String?
  @_Concurrency.MainActor(unsafe) public var alertGiveConsentTitle: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) public func didAllow(_ controller: SAPFiori.FUIUserConsentPageViewController)
  @_Concurrency.MainActor(unsafe) public func didDeny(_ controller: SAPFiori.FUIUserConsentPageViewController)
  @objc deinit
}
public protocol FUIUserConsentPageViewControllerDelegate : AnyObject {
  func didAllow(_ controller: SAPFiori.FUIUserConsentPageViewController)
  func didDeny(_ controller: SAPFiori.FUIUserConsentPageViewController)
}
public protocol FUIUserConsentViewControllerDelegate : AnyObject {
  func userConsentViewController(viewController: SAPFiori.FUIUserConsentViewController, didReceiveResponseToConsentForms forms: [SAPFiori.FUIUserConsentForm])
  func userConsentViewController(viewController: SAPFiori.FUIUserConsentViewController, didCancelConsentForms forms: [SAPFiori.FUIUserConsentForm])
}
extension SAPFiori.FUITextKitView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIFormEntryView<FormValueView> : SAPFiori.FUIBaseDrawingView, SAPFiori.FUITitleComponent, SAPFiori.FUIStatusComponent, SAPFiori.FUIAttributesProvider where FormValueView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let title: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) final public let status: SAPFiori.FUIText
  @_Concurrency.MainActor(unsafe) override public func refreshAttributedStrings()
  @_Concurrency.MainActor(unsafe) override public func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias StatusText = SAPFiori.FUIText
  public typealias TitleText = SAPFiori.FUIText
  @objc deinit
}
extension CoreFoundation.CGSize : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CoreLocation.CLLocationCoordinate2D : Swift.Equatable, Swift.Hashable {
  public static func == (lhs: CoreLocation.CLLocationCoordinate2D, rhs: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIMapSnapshotContentView : SAPFiori.FUIFormEntryView<SAPFiori.FUITextKitView> {
  @_Concurrency.MainActor(unsafe) override public func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) override public func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIMapSnapshotFormCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIMapSnapshotContentView> {
  @_Concurrency.MainActor(unsafe) public var snapshotImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var geometry: MapKit.MKShape? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var coordinates: [CoreLocation.CLLocationCoordinate2D]? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUISearchBar : UIKit.UISearchBar {
  @_Concurrency.MainActor(unsafe) public var isBarcodeScannerEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var barcodeScanner: SAPFiori.FUIBarcodeScanner?
  @_Concurrency.MainActor(unsafe) @objc override weak dynamic public var delegate: UIKit.UISearchBarDelegate? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var placeholderText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholderTextFont: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholderTextColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToSuperview()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUICardBaseContainer<Header, Content> : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUIPrimaryActionComponent & SAPFiori.FUISecondaryActionComponent, SAPFiori.InnerViewContainerProtocols where Header : SAPFiori.FUIBaseFixedMarginsView, Header : SAPFiori.FUIBackgroundSchemeSupporting, Header : SAPFiori.FUICalculateLayout, Header : SAPFiori.FUIStyleByStringAttributes, Content : SAPFiori.FUIBaseFixedMarginsView, Content : SAPFiori.FUIBackgroundSchemeSupporting, Content : SAPFiori.FUICalculateLayout, Content : SAPFiori.FUIStyleByStringAttributes {
  @_Concurrency.MainActor(unsafe) public var content: Content! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var header: Header! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var footer: SAPFiori.FUICardFooterView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var primaryAction: SAPFiori.FUIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) public var secondaryAction: SAPFiori.FUIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUISegmentedControlFormView : SAPFiori.FUIBaseDrawingView {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    get
    set
  }
  public typealias ValueType = Swift.Int
  @_Concurrency.MainActor(unsafe) public var value: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsEmptySelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var segmentWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var segmentHeight: CoreFoundation.CGFloat? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var valueOptions: [Swift.String] {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var apportionsSegmentWidthsByContent: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var onChangeHandler: ((Swift.Int) -> Swift.Void)?
  @available(*, unavailable, renamed: "keyLabel")
  @_Concurrency.MainActor(unsafe) weak public var titleLabel: UIKit.UILabel! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var keyLabel: SAPFiori.FUILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open func calculateLayout(_ targetSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public func setButtonAttributes(_ buttonAttributes: SAPFiori.FUISegmentedControlButtonAttributes, for state: SAPFiori.FUIControlState)
  @_Concurrency.MainActor(unsafe) override open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
extension SAPFiori.FUISegmentedControlFormView : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didDeselectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, shouldDeselectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUICalendarItemCollectionViewCell : SAPFiori.FUIBaseDrawingCalendarItemCollectionViewCell<SAPFiori.FUICalendarItemView> {
  @_Concurrency.MainActor(unsafe) open var isEventIndicatorVisible: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUICalendarItemView {
  public var eventView: UIKit.UIView {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIItemCollectionViewTableViewCell : SAPFiori.FUIBaseCollectionViewTableViewCell {
  @_Concurrency.MainActor(unsafe) public var isAllowingFlowLayout: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isLayoutJustified: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var numberOfRows: Swift.Int {
    get
    set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutMarginsDidChange()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIStatusMultilineComponent {
  public var status: SAPFiori.FUIMultiLineText {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIStatusComponent {
  public var status: SAPFiori.FUIText {
    get
  }
}
extension SAPFiori.InnerViewContainer where Self.InnerView : SAPFiori.FUIStatusBaseComponent {
  public var statusAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var statusStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@objc @_Concurrency.MainActor(unsafe) open class FUISearchTagView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var displayText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var displayDelimiter: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var font: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var cornerRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var borderWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var borderColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var selectedColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var normalBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var textColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var selectedTextColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var bounceOnSelection: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var selected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(tag: SAPFiori.FUISearchTag)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) open func sizeToFit(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @objc deinit
}
extension SAPFiori.FUISearchTagView : UIKit.UIKeyInput {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var hasText: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public func insertText(_ text: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func deleteBackward()
}
extension SAPFiori.FUISearchTagView : UIKit.UITextInputTraits {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var autocorrectionType: UIKit.UITextAutocorrectionType {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIEditableTableViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType> : UIKit.UITableViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType> where SectionIdentifierType : Swift.Hashable, ItemIdentifierType : Swift.Hashable {
  @_Concurrency.MainActor(unsafe) weak open var editingDataSource: UIKit.UITableViewDataSource?
  @_Concurrency.MainActor(unsafe) convenience public init(tableView: UIKit.UITableView, editingDataSource: UIKit.UITableViewDataSource? = nil, cellProvider: @escaping UIKit.UITableViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.CellProvider)
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override open func tableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) override public init(tableView: UIKit.UITableView, cellProvider: @escaping UIKit.UITableViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType>.CellProvider)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIFilterFormCell : SAPFiori.FUIInlineValidationDrawingTableViewCell<SAPFiori.FUIFilterFormView>, SAPFiori.FUIFormCell {
  @_Concurrency.MainActor(unsafe) override open class var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var keyLabel: SAPFiori.FUILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var filterValueView: SAPFiori.FUIFilterValueView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var buttonStyle: SAPFiori.FUIFilterButtonSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  public typealias ValueType = [Swift.Int]
  @_Concurrency.MainActor(unsafe) public var value: [Swift.Int] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: (([Swift.Int]) -> Swift.Void)? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public var valueOptions: [Swift.String] {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var filterGroup: SAPFiori.FUIFilterGroup? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsMultipleSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsEmptySelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var apportionsSegmentWidthsByContent: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setButtonAttributes(_ buttonAttributes: SAPFiori.FUISegmentedControlButtonAttributes, for state: SAPFiori.FUIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIStepperFormCell : SAPFiori.FUIInlineValidationDrawingTableViewCell<SAPFiori.FUIStepperView>, SAPFiori.FUIFormCell {
  @_Concurrency.MainActor(unsafe) open var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var valueTextField: SAPFiori.FUITextField {
    get
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isTrackingLiveChanges: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var hintText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maximumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var minimumValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var stepValue: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var value: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.Double) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  public typealias ValueType = Swift.Double
  @objc deinit
}
extension SAPFiori.FUIStepperFormCell : SAPFiori.FUITintAttributesProvider {
  @_Concurrency.MainActor(unsafe) public var tintAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIControlState : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tintState: SAPFiori.FUIControlState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func tintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) public func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIStepperFormCell.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @_Concurrency.MainActor(unsafe) public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIStepperFormCell.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  public typealias TintState = SAPFiori.FUIControlState
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIValuePickerFormCell : SAPFiori.FUIInlineValidationTableViewCell, SAPFiori.FUIPropertyFormCell, UIKit.UIPickerViewDataSource, UIKit.UIPickerViewDelegate {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var valueTextField: UIKit.UITextField! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var valueOptions: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open class var reuseIdentifier: Swift.String {
    get
  }
  public typealias ValueType = Swift.Int
  @_Concurrency.MainActor(unsafe) public var value: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onChangeHandler: ((Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var isEditable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isTrackingLiveChanges: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var ibDisplayValue: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc public func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreFoundation.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) override open func applyTintColor(forState state: SAPFiori.UIControlState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FUIObjectHeader : SAPFiori.FUIBaseHeaderView<SAPFiori.FUIObjectHeaderView>, SAPFiori.FUIContentCopyable {
  @_Concurrency.MainActor(unsafe) public var version: SAPFiori.FUIObjectHeaderView.Version {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var statusLayout: SAPFiori.FUIObjectHeaderView.StatusLayout {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isContentCopyable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var directionalLayoutMargins: UIKit.NSDirectionalEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var detailImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var headlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var subheadlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var bodyText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var footnoteText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var statusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var statusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var substatusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var substatusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var ibDisplayTagsText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "The component design has been updated, to allocate content frames based upon the content intrinsic sizes.  The value `splitPercent` will be ignored at runtime.")
  @_Concurrency.MainActor(unsafe) public var splitPercent: CoreFoundation.CGFloat {
    get
    set
  }
  @available(*, deprecated, message: "The component design has been updated, to allocate content frames based upon the content intrinsic sizes.  The value `isApplyingSplitPercent` will be ignored at runtime.")
  @_Concurrency.MainActor(unsafe) public var isApplyingSplitPercent: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @objc deinit
}
public struct FUISortCriterion : Swift.Equatable, Swift.Identifiable, Swift.CustomStringConvertible {
  public let criterion: SAPFiori.FUIMultiLineText
  public var isSelected: Swift.Bool
  public var isAscending: Swift.Bool
  public let ascendingText: SAPFiori.FUIMultiLineText
  public let descendingText: SAPFiori.FUIMultiLineText
  public let id: Foundation.UUID
  public init(criterion: SAPFiori.FUIMultiLineText, isSelected: Swift.Bool, isAscending: Swift.Bool, ascendingText: SAPFiori.FUIMultiLineText, descendingText: SAPFiori.FUIMultiLineText)
  public static func == (lhs: SAPFiori.FUISortCriterion, rhs: SAPFiori.FUISortCriterion) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public enum Change : Swift.CustomStringConvertible {
    case selected(index: Swift.Int, isSelected: Swift.Bool)
    case ascending(index: Swift.Int, isAscending: Swift.Bool)
    case order(sourceIndex: Swift.Int, destinationIndex: Swift.Int)
    public var description: Swift.String {
      get
    }
  }
  public typealias ID = Foundation.UUID
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FUIPasscodeChangeController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) weak public var passcodeControllerDelegate: SAPFiori.FUIPasscodeControllerDelegate?
  @_Concurrency.MainActor(unsafe) weak public var validationDelegate: SAPFiori.FUIPasscodeValidationDelegate?
  @_Concurrency.MainActor(unsafe) public var customBackgroundImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var canEnableTouchID: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var hashUserPasscode: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var userIdentifier: Swift.String?
  @_Concurrency.MainActor(unsafe) public var keychainAccessGroup: Swift.String?
  @available(*, unavailable, renamed: "showsCancelBarItem")
  @_Concurrency.MainActor(unsafe) public var isToShowCancelBarItem: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var showsCancelBarItem: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var showsResetButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isRequiringAlphaNumericInput: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var imageViewSize: CoreFoundation.CGSize?
  @_Concurrency.MainActor(unsafe) public var isActionButtonOnNavigationBar: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var actionButton: SAPFiori.FUIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public class func createInstanceFromStoryboard() -> SAPFiori.FUIPasscodeChangeController
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FUIChartPointAttributes {
  public var isHidden: Swift.Bool {
    get
    set
  }
  public var diameter: Swift.Double {
    get
    set
  }
  public var gap: Swift.Double {
    get
    set
  }
  @objc deinit
}
extension UIKit.UITabBar {
  @_Concurrency.MainActor(unsafe) public static func applyFioriStyle()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FUIProcessingIndicatorView : SAPFiori.NibDesignable {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var textLabel: UIKit.UILabel!
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var isTextLabelHidden: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isAnimating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func show(animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func dismiss(animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func startAnimating(easeIn: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func stopAnimating(easeOut: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
extension SAPFiori.FUITimelineMarkerCell.NodeType : Swift.Equatable {}
extension SAPFiori.FUITimelineMarkerCell.NodeType : Swift.Hashable {}
extension SAPFiori.FUITimelineMarkerCell.NodeType : Swift.RawRepresentable {}
extension SAPFiori.FUIBarcodeScanMode : Swift.Equatable {}
extension SAPFiori.FUIBarcodeScanMode : Swift.Hashable {}
extension SAPFiori.FUIBarcodeScanMode : Swift.RawRepresentable {}
extension SAPFiori.FUIFilterButtonSize : Swift.Equatable {}
extension SAPFiori.FUIFilterButtonSize : Swift.Hashable {}
extension SAPFiori.FUIFilterButtonSize : Swift.RawRepresentable {}
extension SAPFiori.FUIControlState : Swift.Equatable {}
extension SAPFiori.FUIControlState : Swift.CustomStringConvertible {}
extension SAPFiori.FUIControlState : Swift.Hashable {}
extension SAPFiori.FUIControlState : Swift.RawRepresentable {}
extension SAPFiori.FUIPropertyRef : Swift.Equatable {}
extension SAPFiori.FUIPropertyRef : Swift.Hashable {}
extension SAPFiori.FUIPropertyRef : Swift.RawRepresentable {}
extension SAPFiori.FUIBackgroundColorScheme : Swift.Equatable {}
extension SAPFiori.FUIBackgroundColorScheme : Swift.Hashable {}
extension SAPFiori.FUIBackgroundColorScheme : Swift.RawRepresentable {}
extension SAPFiori.FUIDataItemType : Swift.Equatable {}
extension SAPFiori.FUIDataItemType : Swift.Hashable {}
extension SAPFiori.ObjectViewProperty.Text : Swift.Equatable {}
extension SAPFiori.ObjectViewProperty.Text : Swift.Hashable {}
extension SAPFiori.ObjectViewProperty.Image : Swift.Equatable {}
extension SAPFiori.ObjectViewProperty.Image : Swift.Hashable {}
extension SAPFiori.FUIColorVariant : Swift.Equatable {}
extension SAPFiori.FUIColorVariant : Swift.Hashable {}
extension SAPFiori.FUIObjectCard : SAPFiori.FUIContentCopyable {}
extension SAPFiori.FUIMapFloorplan.State : Swift.Equatable {}
extension SAPFiori.FUIMapFloorplan.State : Swift.Hashable {}
extension SAPFiori.FUIStyleClassSource : Swift.Equatable {}
extension SAPFiori.FUIStyleClassSource : Swift.Hashable {}
extension SAPFiori.FUIStyleClassSource : Swift.RawRepresentable {}
extension SAPFiori.FUIChartAxisId : Swift.Equatable {}
extension SAPFiori.FUIChartAxisId : Swift.Hashable {}
extension SAPFiori.FUIChartCategoryAxisLabelLayoutStyle : Swift.Equatable {}
extension SAPFiori.FUIChartCategoryAxisLabelLayoutStyle : Swift.Hashable {}
extension SAPFiori.FUIDimensionSelector.FUISegmentWidthMode : Swift.Sendable {}
extension SAPFiori.FUIDataTableRowAlignment : Swift.Equatable {}
extension SAPFiori.FUIDataTableRowAlignment : Swift.Hashable {}
extension SAPFiori.FUICheckoutIndicatorView.DisplayState : Swift.Hashable {}
extension SAPFiori.FUIPaletteVersion : Swift.Hashable {}
extension SAPFiori.FUIProgressIndicatorControl.DisplayState : Swift.Equatable {}
extension SAPFiori.FUIProgressIndicatorControl.DisplayState : Swift.Hashable {}
extension SAPFiori.FUISelectionRangePosition : Swift.Equatable {}
extension SAPFiori.FUISelectionRangePosition : Swift.Hashable {}
extension SAPFiori.FUISelectionRangePosition : Swift.RawRepresentable {}
extension SAPFiori.FUIStatusDisplayMode : Swift.Equatable {}
extension SAPFiori.FUIStatusDisplayMode : Swift.Hashable {}
extension SAPFiori.FUISubstatusDisplayMode : Swift.Equatable {}
extension SAPFiori.FUISubstatusDisplayMode : Swift.Hashable {}
extension SAPFiori.FUIPageViewController.Style : Swift.Equatable {}
extension SAPFiori.FUIPageViewController.Style : Swift.Hashable {}
extension SAPFiori.FUIListViewModel.FUIListViewModelState : Swift.Hashable {}
extension SAPFiori.FUICreateGeometryResultsDisplayMode : Swift.Equatable {}
extension SAPFiori.FUICreateGeometryResultsDisplayMode : Swift.Hashable {}
extension SAPFiori.FUIColorDisplayMode : Swift.Equatable {}
extension SAPFiori.FUIColorDisplayMode : Swift.Hashable {}
extension SAPFiori.FUIColorDisplayMode : Swift.RawRepresentable {}
extension SAPFiori.FUIColorStyle : Swift.Equatable {}
extension SAPFiori.FUIColorStyle : Swift.Hashable {}
extension SAPFiori.FUIColorStyle : Swift.RawRepresentable {}
extension SAPFiori.FUIKPIProgressView : SAPFiori.FUIContentCopyable {}
extension SAPFiori.FUIKPIProgressViewSize : Swift.Equatable {}
extension SAPFiori.FUIKPIProgressViewSize : Swift.Hashable {}
extension SAPFiori.FUIModalProcessingIndicatorView.BackgroundMode : Swift.Equatable {}
extension SAPFiori.FUIModalProcessingIndicatorView.BackgroundMode : Swift.Hashable {}
extension SAPFiori.FUIListPickerCollectionViewCell : SAPFiori.FUIPropertyFormCell {}
extension SAPFiori.FUIMapToolbarButtonType : Swift.Equatable {}
extension SAPFiori.FUIMapToolbarButtonType : Swift.Hashable {}
extension SAPFiori.FUINoteFormCell.Version : Swift.Equatable {}
extension SAPFiori.FUINoteFormCell.Version : Swift.Hashable {}
extension SAPFiori.DateSegmentType : Swift.Equatable {}
extension SAPFiori.DateSegmentType : Swift.Hashable {}
extension SAPFiori.DateSegmentType : Swift.RawRepresentable {}
extension SAPFiori.FUICompactCardPosition : Swift.Equatable {}
extension SAPFiori.FUICompactCardPosition : Swift.Hashable {}
extension SAPFiori.FUITimelineCell.NodeType : Swift.Equatable {}
extension SAPFiori.FUITimelineCell.NodeType : Swift.Hashable {}
extension SAPFiori.FUITimelineCell.NodeType : Swift.RawRepresentable {}
extension SAPFiori.FUIMapEditingToolbarButtonActionType : Swift.Equatable {}
extension SAPFiori.FUIMapEditingToolbarButtonActionType : Swift.Hashable {}
extension UIKit.UINavigationBar.FioriStyleVersion : Swift.Equatable {}
extension UIKit.UINavigationBar.FioriStyleVersion : Swift.Hashable {}
extension SAPFiori.FUITextFieldFormCell.Version : Swift.Equatable {}
extension SAPFiori.FUITextFieldFormCell.Version : Swift.Hashable {}
extension SAPFiori.FUIKPIViewItemStyle : Swift.Equatable {}
extension SAPFiori.FUIKPIViewItemStyle : Swift.Hashable {}
extension UIKit.UIControl.State : Swift.CustomStringConvertible {}
extension SAPFiori.FUIKPIView : SAPFiori.FUIContentCopyable {}
extension SAPFiori.FUIKPIView.LeadingItemKerning : Swift.Equatable {}
extension SAPFiori.FUIKPIView.LeadingItemKerning : Swift.Hashable {}
extension SAPFiori.FUILabelItem.Alignment : Swift.Equatable {}
extension SAPFiori.FUILabelItem.Alignment : Swift.Hashable {}
extension SAPFiori.FUILabelItem.Alignment : Swift.RawRepresentable {}
extension SAPFiori.FUISectionHeaderFooterStyle : Swift.Equatable {}
extension SAPFiori.FUISectionHeaderFooterStyle : Swift.Hashable {}
extension SAPFiori.FUIChartCardView.SubtitleAndTrendDisplayMode : Swift.Equatable {}
extension SAPFiori.FUIChartCardView.SubtitleAndTrendDisplayMode : Swift.Hashable {}
extension SAPFiori.FUITableViewCellActionAccessoryType : Swift.Equatable {}
extension SAPFiori.FUITableViewCellActionAccessoryType : Swift.Hashable {}
extension SAPFiori.FUITimelineStatus : Swift.Equatable {}
extension SAPFiori.FUITimelineStatus : Swift.Hashable {}
extension SAPFiori.FUITimelineStatus : Swift.RawRepresentable {}
extension SAPFiori.FUIRatingControl.Style : Swift.Equatable {}
extension SAPFiori.FUIRatingControl.Style : Swift.Hashable {}
extension SAPFiori.FUIGridRowItemAlignment : Swift.Equatable {}
extension SAPFiori.FUIGridRowItemAlignment : Swift.Hashable {}
extension SAPFiori.FUIGridRowItemAlignment : Swift.RawRepresentable {}
extension SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Text : Swift.Equatable {}
extension SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Text : Swift.Hashable {}
extension SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Image : Swift.Equatable {}
extension SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Image : Swift.Hashable {}
extension SAPFiori.FUIWelcomeControllerState : Swift.Equatable {}
extension SAPFiori.FUIWelcomeControllerState : Swift.Hashable {}
extension SAPFiori.FUIWelcomeControllerState : Swift.RawRepresentable {}
@available(*, deprecated, message: "This type is not needed any more since only WKWebView available")
extension SAPFiori.FUIWebViewContainer.WebViewType : Swift.Equatable {}
@available(*, deprecated, message: "This type is not needed any more since only WKWebView available")
extension SAPFiori.FUIWebViewContainer.WebViewType : Swift.Hashable {}
extension SAPFiori.FUISearchTagAcceptOption : Swift.Equatable {}
extension SAPFiori.FUISearchTagAcceptOption : Swift.Hashable {}
extension SAPFiori.FUIObjectHeaderView.Version : Swift.Equatable {}
extension SAPFiori.FUIObjectHeaderView.Version : Swift.Hashable {}
extension SAPFiori.FUIObjectHeaderView.Version : Swift.RawRepresentable {}
extension SAPFiori.FUIObjectHeaderView.StatusLayout : Swift.Equatable {}
extension SAPFiori.FUIObjectHeaderView.StatusLayout : Swift.Hashable {}
extension SAPFiori.FUIObjectHeaderView.StatusLayout : Swift.RawRepresentable {}
extension SAPFiori.FUIListPickerFormCell : SAPFiori.FUIPropertyFormCell {}
extension SAPFiori.FUIHorizontalAlignment : Swift.Equatable {}
extension SAPFiori.FUIHorizontalAlignment : Swift.Hashable {}
extension SAPFiori.FUICalendarStyle : Swift.Equatable {}
extension SAPFiori.FUICalendarStyle : Swift.Hashable {}
extension SAPFiori.FUIWeekStartDay : Swift.Equatable {}
extension SAPFiori.FUIWeekStartDay : Swift.Hashable {}
extension SAPFiori.FUIControlLayout : Swift.Equatable {}
extension SAPFiori.FUIControlLayout : Swift.Hashable {}
extension SAPFiori.FUIObjectCardContentView.OrderedPropertyRef : Swift.Equatable {}
extension SAPFiori.FUIObjectCardContentView.OrderedPropertyRef : Swift.Hashable {}
extension SAPFiori.FUIGridRowItemType : Swift.Equatable {}
extension SAPFiori.FUIGridRowItemType : Swift.Hashable {}
extension SAPFiori.FUIHierarchyListPickerType : Swift.Equatable {}
extension SAPFiori.FUIHierarchyListPickerType : Swift.Hashable {}
extension SAPFiori.FUICollectionViewVerticalAlignment : Swift.Equatable {}
extension SAPFiori.FUICollectionViewVerticalAlignment : Swift.Hashable {}
extension SAPFiori.FUICollectionViewVerticalAlignment : Swift.RawRepresentable {}
extension SAPFiori.FUIInterfaceLevel : Swift.Equatable {}
extension SAPFiori.FUIInterfaceLevel : Swift.Hashable {}
extension SAPFiori.FUIInterfaceLevel : Swift.RawRepresentable {}
extension SAPFiori.FUIChartType : Swift.Equatable {}
extension SAPFiori.FUIChartType : Swift.Hashable {}
extension SAPFiori.FUIChartSelectionMode : Swift.Equatable {}
extension SAPFiori.FUIChartSelectionMode : Swift.Hashable {}
extension SAPFiori.ChartDefaultCategorySelectionMode : Swift.Equatable {}
extension SAPFiori.ChartDefaultCategorySelectionMode : Swift.Hashable {}
extension SAPFiori.FUIGeospatialType : Swift.Equatable {}
extension SAPFiori.FUIGeospatialType : Swift.Hashable {}
extension SAPFiori.FUIGeospatialType : Swift.RawRepresentable {}
extension SAPFiori.FUIButtonStyle : Swift.Equatable {}
extension SAPFiori.FUIButtonStyle : Swift.Hashable {}
extension SAPFiori.FUIButtonStyle : Swift.RawRepresentable {}
extension SAPFiori.FUIButtonSemantic : Swift.Equatable {}
extension SAPFiori.FUIButtonSemantic : Swift.Hashable {}
extension SAPFiori.FUIButtonSemantic : Swift.RawRepresentable {}
extension SAPFiori.FUIPasscodeInputMode : Swift.Equatable {}
extension SAPFiori.FUIPasscodeInputMode : Swift.Hashable {}
extension SAPFiori.FUIPasscodeInputMode : Swift.RawRepresentable {}
extension SAPFiori.FUIPasscodeSource : Swift.Equatable {}
extension SAPFiori.FUIPasscodeSource : Swift.Hashable {}
extension SAPFiori.FUIPasscodeSource : Swift.RawRepresentable {}
