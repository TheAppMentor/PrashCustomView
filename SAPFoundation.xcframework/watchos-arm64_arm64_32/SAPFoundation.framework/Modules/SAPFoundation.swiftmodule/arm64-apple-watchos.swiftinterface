// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-watchos9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SAPFoundation
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
import SAPCommon
import Swift
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SAPURLSessionDownloadTask : SAPFoundation.SAPURLSessionTask {
  public func cancel(byProducingResumeData completionHandler: @escaping (Foundation.Data?) -> Swift.Void)
  @objc deinit
}
public protocol SAPURLSessionDelegate : AnyObject {
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, didBecomeInvalidWithError error: Swift.Error?)
  func sapURLSessionDidFinishEvents(forBackgroundURLSession session: SAPFoundation.SAPURLSession)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willBeginDelayedRequest request: Foundation.URLRequest, completionHandler: @escaping (SAPFoundation.SAPURLSession.DelayedRequestDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, taskIsWaitingForConnectivity task: SAPFoundation.SAPURLSessionTask)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (SAPFoundation.SAPURLSession.HTTPRedirectDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (SAPFoundation.SAPURLSession.AuthChallengeDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, needNewBodyStream completionHandler: @escaping (SAPFoundation.SAPURLSession.InputStreamDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didCompleteWithError error: Swift.Error?)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (SAPFoundation.SAPURLSession.ResponseDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, didBecome downloadTask: Foundation.URLSessionDownloadTask)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, didReceive data: Foundation.Data)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (SAPFoundation.SAPURLSession.CacheResponseDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, downloadTask: SAPFoundation.SAPURLSessionTask, didFinishDownloadingTo location: Foundation.URL)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, downloadTask: SAPFoundation.SAPURLSessionTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, downloadTask: SAPFoundation.SAPURLSessionTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didCreate sessionTask: Foundation.URLSessionTask)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, didCreate task: SAPFoundation.SAPURLSessionTask, for sessionTask: Foundation.URLSessionTask)
}
extension SAPFoundation.SAPURLSessionDelegate {
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, didBecomeInvalidWithError error: Swift.Error?)
  public func sapURLSessionDidFinishEvents(forBackgroundURLSession session: SAPFoundation.SAPURLSession)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willBeginDelayedRequest request: Foundation.URLRequest, completionHandler: @escaping (SAPFoundation.SAPURLSession.DelayedRequestDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, taskIsWaitingForConnectivity task: SAPFoundation.SAPURLSessionTask)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (SAPFoundation.SAPURLSession.HTTPRedirectDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (SAPFoundation.SAPURLSession.AuthChallengeDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, needNewBodyStream completionHandler: @escaping (SAPFoundation.SAPURLSession.InputStreamDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didCompleteWithError error: Swift.Error?)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (SAPFoundation.SAPURLSession.ResponseDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, didBecome downloadTask: Foundation.URLSessionDownloadTask)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, didReceive data: Foundation.Data)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (SAPFoundation.SAPURLSession.CacheResponseDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, downloadTask: SAPFoundation.SAPURLSessionTask, didFinishDownloadingTo location: Foundation.URL)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, downloadTask: SAPFoundation.SAPURLSessionTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, downloadTask: SAPFoundation.SAPURLSessionTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didCreate sessionTask: Foundation.URLSessionTask)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, didCreate task: SAPFoundation.SAPURLSessionTask, for sessionTask: Foundation.URLSessionTask)
}
public enum ConfigurationError : Swift.Error {
  case missingKey(Swift.String, source: Swift.String)
  case invalidStructure(detail: Swift.String, source: Swift.String)
}
extension SAPFoundation.ConfigurationError : SAPCommon.SAPError {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
}
public protocol OAuth2TokenStore {
  func store(token: SAPFoundation.OAuth2Token, for url: Foundation.URL) throws
  func token(for url: Foundation.URL) throws -> SAPFoundation.OAuth2Token?
  func deleteToken(for url: Foundation.URL) throws
}
public enum OAuth2Error : Swift.Error {
  case server(error: SAPFoundation.OAuth2ServerError)
  case webView(error: Swift.Error)
  case invalidArgument(detail: Swift.String)
  case http(error: Swift.Error, statusCode: Swift.Int?, response: Swift.String?)
  case missingHTTPResponse
  case parse(error: Swift.String, httpUrlResponse: Foundation.HTTPURLResponse, data: Foundation.Data)
  case authenticationInProgress
  case authorizationCode
  case tokenRejected
  case backgroundAuthentication
  case cancelled
  case webViewReloaded
}
extension SAPFoundation.OAuth2Error : SAPCommon.SAPError {
  public var description: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
}
public let OAuth2AuthenticationParametersAuthorizationEndpointURL: Swift.String
public let OAuth2AuthenticationParametersRedirectURL: Swift.String
public let OAuth2AuthenticationParametersTokenEndpointURL: Swift.String
public let OAuth2AuthenticationParametersClientID: Swift.String
public let OAuth2AuthenticationParametersClientSecret: Swift.String
public let OAuth2AuthenticationParametersScope: Swift.String
public let OAuth2AuthenticationParametersState: Swift.String
public let OAuth2AuthenticationParametersxsuaaURL: Swift.String
public struct OAuth2AuthenticationParameters {
  public let authorizationEndpointURL: Foundation.URL
  public let tokenEndpointURL: Foundation.URL
  public let redirectURL: Foundation.URL
  public let clientID: Swift.String
  public let clientSecret: Swift.String?
  public let xsuaaAuthorizationURL: Foundation.URL?
  public let requestingScopes: Swift.Set<Swift.String>
  public let state: Swift.String?
  public let codeChallengeMethod: Swift.String
  public init(authorizationEndpointURL: Foundation.URL, clientID: Swift.String, redirectURL: Foundation.URL, tokenEndpointURL: Foundation.URL, requestingScopes: Swift.Set<Swift.String> = [], state: Swift.String? = nil, clientSecret: Swift.String? = nil, xsuaaAuthorizationURL: Foundation.URL? = nil, codeChallengeMethod: Swift.String = "S256")
}
public let OAuth2AuthenticationParametersDiscoveryServiceAuthType: Swift.String
public let OAuth2AuthenticationParametersDiscoveryServiceAuthorizationEndpointURL: Swift.String
public let OAuth2AuthenticationParametersDiscoveryServiceTokenEndpointURL: Swift.String
public let OAuth2AuthenticationParametersDiscoveryServiceEndUserUIURL: Swift.String
public let OAuth2AuthenticationParametersDiscoveryServiceClients: Swift.String
public let OAuth2AuthenticationParametersDiscoveryServiceClientID: Swift.String
public let OAuth2AuthenticationParametersDiscoveryServiceRedirectURL: Swift.String
public let OAuth2AuthenticationParametersDiscoveryServicexsuaaAuthorizationURL: Swift.String
public let OAuth2AuthenticationParametersDiscoveryServiceGrantType: Swift.String
public let OAuth2PKCEAuthenticationParameters: Swift.String
public let OAuth2PKCEAuthenticationParametersCodeChallengeMethod: Swift.String
extension SAPFoundation.OAuth2AuthenticationParameters : SAPFoundation.DiscoveryServiceConfigurable {
  public init(discoveryServiceConfig config: Any) throws
  public init(config: Any) throws
}
@_hasMissingDesignatedInitializers public class OAuth2Authenticator : SAPFoundation.OAuth2Authentication {
  public static func defaultSAPURLSession() -> SAPFoundation.SAPURLSession
  public func authenticate(completionHandler: @escaping (_ token: SAPFoundation.OAuth2Token?, _ error: Swift.Error?) -> Swift.Void)
  public func refresh(token: SAPFoundation.OAuth2Token, completionHandler: @escaping (_ newToken: SAPFoundation.OAuth2Token?, _ error: Swift.Error?) -> Swift.Void)
  public func cancelAuthentication()
  @objc deinit
}
public class MemoryDataStorage : SAPCommon.DataStoring {
  public init()
  public func put(data: Foundation.Data, for key: Swift.String) throws
  public func data(for key: Swift.String) throws -> Foundation.Data?
  public func removeData(for key: Swift.String) throws
  public func keys() throws -> Swift.Set<Swift.String>
  @objc deinit
}
public enum OAuth2TokenError : Foundation.LocalizedError, Swift.Equatable {
  case refreshTokenExpired
  case tokenNotAvailable
  public var errorDescription: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SAPFoundation.OAuth2TokenError, b: SAPFoundation.OAuth2TokenError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
open class OAuth2Observer {
  public var authenticationHandler: SAPFoundation.AuthenticationHandling?
  public init(authenticationParameters: SAPFoundation.OAuth2AuthenticationParameters, tokenStore: SAPFoundation.OAuth2TokenStore)
  open func isChallenge(dataTask: SAPFoundation.SAPURLSessionTask, response: Foundation.URLResponse) -> Swift.Bool
  @objc deinit
}
extension SAPFoundation.OAuth2Observer : SAPFoundation.SAPURLSessionObserving {
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willSend request: Foundation.URLRequest, completionHandler: @escaping (SAPFoundation.SAPURLSession.RequestDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (SAPFoundation.SAPURLSession.HTTPRedirectDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (SAPFoundation.SAPURLSession.ResponseDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, downloadTask: SAPFoundation.SAPURLSessionTask, didFinishDownloadingTo location: Foundation.URL, completionHandler: @escaping (SAPFoundation.SAPURLSession.DidCompleteDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didCompleteWithError error: Swift.Error?, completionHandler: @escaping (SAPFoundation.SAPURLSession.DidCompleteDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didCompleteWithError error: Swift.Error?)
  public func copy() -> Any?
}
open class OAuth2TokenStorage : SAPFoundation.OAuth2TokenStore {
  open var store: SAPFoundation.CodableStoring
  open var keyHandler: (Foundation.URL) -> Swift.String
  public init(store: SAPFoundation.CodableStoring, keyHandler: @escaping (Foundation.URL) -> Swift.String = OAuth2TokenStorage.key)
  open func store(token: SAPFoundation.OAuth2Token, for url: Foundation.URL) throws
  open func token(for url: Foundation.URL) throws -> SAPFoundation.OAuth2Token?
  open func deleteToken(for url: Foundation.URL) throws
  public static let keyPrefix: Swift.String
  public class func key(for url: Foundation.URL) -> Swift.String
  @objc deinit
}
public protocol OAuth2TokenStoreUserInfoTransforming {
  func toUserInfo() throws -> [Swift.String : Any]
  func apply(userInfo: [Swift.String : Any]) throws
}
extension SAPFoundation.OAuth2TokenStorage : SAPFoundation.OAuth2TokenStoreUserInfoTransforming {
  public func toUserInfo() throws -> [Swift.String : Any]
  public func apply(userInfo: [Swift.String : Any]) throws
}
open class CodableStorage : SAPFoundation.CodableStoring {
  public init(store: SAPCommon.DataStoring, coder: SAPFoundation.CoderProtocol = PlistCoder())
  open func get<T>(_ type: T.Type, for key: Swift.String) throws -> T? where T : Swift.Decodable, T : Swift.Encodable
  open func put<T>(_ value: T, for key: Swift.String) throws where T : Swift.Decodable, T : Swift.Encodable
  open func remove(for key: Swift.String) throws
  public func keys() throws -> Swift.Set<Swift.String>
  @objc deinit
}
public struct OAuth2Token {
  public let accessToken: Swift.String
  public let tokenType: Swift.String
  public let scopes: Swift.Set<Swift.String>
  public let expiryDate: Foundation.Date?
  public let refreshToken: Swift.String?
  public init(accessToken: Swift.String, tokenType: Swift.String, expiryDate: Foundation.Date? = nil, scopes: Swift.Set<Swift.String> = [], refreshToken: Swift.String? = nil)
}
extension SAPFoundation.OAuth2Token : Swift.Equatable {
  public static func == (lhs: SAPFoundation.OAuth2Token, rhs: SAPFoundation.OAuth2Token) -> Swift.Bool
}
extension SAPFoundation.OAuth2Token : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol DiscoveryServiceConfigurable {
  init(discoveryServiceConfig config: Any) throws
}
public let DiscoveryServiceHost: Swift.String
public let DiscoveryServicePort: Swift.String
public let DiscoveryServiceProtocol: Swift.String
public let DiscoveryServiceAuth: Swift.String
public let DiscoveryServiceType: Swift.String
public let DiscoveryServiceConfig: Swift.String
public let DiscoveryServiceAppID: Swift.String
open class CompositeStorage : SAPFoundation.CompositeCodableStoring {
  public var persistentStore: SAPCommon.DataStoring? {
    get
  }
  public init(memoryStore: SAPCommon.DataStoring = MemoryDataStorage(), coder: SAPFoundation.CoderProtocol = PlistCoder())
  open func get<T>(_ type: T.Type, for key: Swift.String) throws -> T? where T : Swift.Decodable, T : Swift.Encodable
  open func put<T>(_ value: T, for key: Swift.String) throws where T : Swift.Decodable, T : Swift.Encodable
  open func remove(for key: Swift.String) throws
  open func keys() throws -> Swift.Set<Swift.String>
  open func setPersistentStore(_ store: SAPCommon.DataStoring) throws
  open func releasePersistentStore()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SAPURLSessionTask {
  final public let taskID: Foundation.UUID
  public var urlSessionTask: Foundation.URLSessionTask? {
    get
  }
  public var priority: Swift.Float {
    get
    set
  }
  public var taskDescription: Swift.String?
  public var state: Foundation.URLSessionTask.State {
    get
  }
  final public let originalRequest: Foundation.URLRequest?
  public var currentRequest: Foundation.URLRequest? {
    get
  }
  public var response: Foundation.URLResponse? {
    get
  }
  public var context: [Swift.String : Any]
  public func resume()
  public func cancel()
  public func suspend()
  @objc deinit
}
extension SAPFoundation.SAPURLSessionTask {
  public func markBypass(id: Foundation.UUID)
  public func shouldBypass(id: Foundation.UUID) -> Swift.Bool
}
public class SAPURLSession {
  public var delegate: SAPFoundation.SAPURLSessionDelegate? {
    get
  }
  public var delegateQueue: Foundation.OperationQueue {
    get
  }
  public var configuration: Foundation.URLSessionConfiguration {
    get
  }
  public var sessionDescription: Swift.String? {
    get
    set
  }
  public var observers: [SAPFoundation.SAPURLSessionObserving] {
    get
  }
  public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.default, delegate: SAPFoundation.SAPURLSessionDelegate? = nil, delegateQueue queue: Foundation.OperationQueue? = nil)
  @objc deinit
  public func finishTasksAndInvalidate()
  public func invalidateAndCancel()
  public func reset(completionHandler: @escaping () -> Swift.Void)
  public func flush(completionHandler: @escaping () -> Swift.Void)
  public func copy(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.default, delegate: SAPFoundation.SAPURLSessionDelegate? = nil, delegateQueue queue: Foundation.OperationQueue? = nil) -> SAPFoundation.SAPURLSession
  public func dataTask(with request: Foundation.URLRequest) -> SAPFoundation.SAPURLSessionTask
  public func dataTask(with url: Foundation.URL) -> SAPFoundation.SAPURLSessionTask
  public func uploadTask(with request: Foundation.URLRequest, fromFile fileURL: Foundation.URL) -> SAPFoundation.SAPURLSessionTask
  public func uploadTask(with request: Foundation.URLRequest, from bodyData: Foundation.Data) -> SAPFoundation.SAPURLSessionTask
  public func uploadTask(withStreamedRequest request: Foundation.URLRequest) -> SAPFoundation.SAPURLSessionTask
  public func downloadTask(with request: Foundation.URLRequest) -> SAPFoundation.SAPURLSessionDownloadTask
  public func downloadTask(with url: Foundation.URL) -> SAPFoundation.SAPURLSessionDownloadTask
  public func downloadTask(withResumeData resumeData: Foundation.Data) -> SAPFoundation.SAPURLSessionDownloadTask
  public func dataTask(with request: Foundation.URLRequest, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> SAPFoundation.SAPURLSessionTask
  public func dataTask(with url: Foundation.URL, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> SAPFoundation.SAPURLSessionTask
  public func uploadTask(with request: Foundation.URLRequest, fromFile fileURL: Foundation.URL, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> SAPFoundation.SAPURLSessionTask
  public func uploadTask(with request: Foundation.URLRequest, from bodyData: Foundation.Data, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> SAPFoundation.SAPURLSessionTask
  public func downloadTask(with request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URL?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> SAPFoundation.SAPURLSessionDownloadTask
  public func downloadTask(with url: Foundation.URL, completionHandler: @escaping (Foundation.URL?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> SAPFoundation.SAPURLSessionDownloadTask
  public func downloadTask(withResumeData resumeData: Foundation.Data, completionHandler: @escaping (Foundation.URL?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> SAPFoundation.SAPURLSessionDownloadTask
  public func uploadTask(withStreamedRequest request: Foundation.URLRequest, needNewBodyStream: @escaping () -> Foundation.InputStream?, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> SAPFoundation.SAPURLSessionTask
  public func dataTask(with request: Foundation.URLRequest, receivedResponseHandler: ((Foundation.URLResponse) -> Swift.Void)? = nil, receivedDataHandler: @escaping (Foundation.Data) -> Swift.Void, completionHandler: @escaping (Swift.Error?) -> Swift.Void) -> SAPFoundation.SAPURLSessionTask
  public func register(_ observer: SAPFoundation.SAPURLSessionObserving)
  public func unregister(_ observer: SAPFoundation.SAPURLSessionObserving)
  public func isRegistered(_ observer: SAPFoundation.SAPURLSessionObserving) -> Swift.Bool
  public func configure(_ request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?, Swift.Error?) -> Swift.Void)
  public func configure(_ cookieStore: Foundation.HTTPCookieStorage, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  public func close(completionHandler: @escaping () -> Swift.Void)
}
public protocol OptionalCopying {
  func copy() -> Any?
}
extension SAPFoundation.OptionalCopying {
  public func copy() -> Any?
}
extension SAPFoundation.SAPURLSession {
  @_hasMissingDesignatedInitializers public class DataTaskPublisher : Combine.Publisher {
    public typealias Output = (data: Foundation.Data, response: Foundation.URLResponse)
    public typealias Failure = Swift.Error
    public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Error, S.Input == (data: Foundation.Data, response: Foundation.URLResponse)
    @objc deinit
  }
  public class DataTaskSubscriber : Combine.Subscriber, Combine.Cancellable {
    public typealias Input = (data: Foundation.Data, response: Foundation.URLResponse)
    public typealias Failure = Swift.Error
    public init(sapUrlSession: SAPFoundation.SAPURLSession)
    public func receive(subscription: Combine.Subscription)
    public func receive(_ input: SAPFoundation.SAPURLSession.DataTaskSubscriber.Input) -> Combine.Subscribers.Demand
    public func receive(completion: Combine.Subscribers.Completion<Swift.Error>)
    public func cancel()
    @objc deinit
  }
  public func dataTaskPublisher(for urlRequest: Foundation.URLRequest) -> SAPFoundation.SAPURLSession.DataTaskPublisher
  public func dataTaskPublisher(for url: Foundation.URL) -> SAPFoundation.SAPURLSession.DataTaskPublisher
}
extension SAPFoundation.SAPURLSession {
  #if compiler(>=5.3) && $AsyncAwait
  public func data(for request: Foundation.URLRequest) async throws -> (Foundation.Data, Foundation.URLResponse)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func data(from url: Foundation.URL) async throws -> (Foundation.Data, Foundation.URLResponse)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func upload(for request: Foundation.URLRequest, fromFile fileURL: Foundation.URL) async throws -> (Foundation.Data, Foundation.URLResponse)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func upload(for request: Foundation.URLRequest, from bodyData: Foundation.Data) async throws -> (Foundation.Data, Foundation.URLResponse)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func download(for request: Foundation.URLRequest) async throws -> (Foundation.URL, Foundation.URLResponse)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func download(from url: Foundation.URL) async throws -> (Foundation.URL, Foundation.URLResponse)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func download(resumeFrom resumeData: Foundation.Data) async throws -> (Foundation.URL, Foundation.URLResponse)
  #endif
}
public protocol CodableStoring : AnyObject {
  func get<T>(_ type: T.Type, for: Swift.String) throws -> T? where T : Swift.Decodable, T : Swift.Encodable
  func put<T>(_ value: T, for: Swift.String) throws where T : Swift.Decodable, T : Swift.Encodable
  func remove(for: Swift.String) throws
  func keys() throws -> Swift.Set<Swift.String>
}
public enum AuthenticationObserverError : Swift.Error {
  case retryCountReached
  public static func == (a: SAPFoundation.AuthenticationObserverError, b: SAPFoundation.AuthenticationObserverError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SAPFoundation.AuthenticationObserverError : SAPCommon.SAPError {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
}
public protocol SAPURLSessionObserving : AnyObject, SAPFoundation.OptionalCopying {
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, didBecomeInvalidWithError error: Swift.Error?, completionHandler: @escaping () -> Swift.Void)
  func sapURLSessionDidFinishEvents(forBackgroundURLSession session: SAPFoundation.SAPURLSession, completionHandler: @escaping () -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willBeginDelayedRequest request: Foundation.URLRequest, completionHandler: @escaping (SAPFoundation.SAPURLSession.DelayedRequestDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, taskIsWaitingForConnectivity task: SAPFoundation.SAPURLSessionTask)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (SAPFoundation.SAPURLSession.HTTPRedirectDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (SAPFoundation.SAPURLSession.AuthChallengeDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willUse credential: Foundation.URLCredential, for challenge: Foundation.URLAuthenticationChallenge)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, needNewBodyStream completionHandler: @escaping (SAPFoundation.SAPURLSession.InputStreamDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64, completionHandler: @escaping (SAPFoundation.SAPURLSession.CancellableDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics, completionHandler: @escaping () -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didCompleteWithError error: Swift.Error?, completionHandler: @escaping (SAPFoundation.SAPURLSession.DidCompleteDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (SAPFoundation.SAPURLSession.ResponseDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, didBecome downloadTask: Foundation.URLSessionDownloadTask, completionHandler: @escaping (SAPFoundation.SAPURLSession.CancellableDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, didReceive data: Foundation.Data, completionHandler: @escaping (SAPFoundation.SAPURLSession.DataDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (SAPFoundation.SAPURLSession.CacheResponseDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, downloadTask: SAPFoundation.SAPURLSessionTask, didFinishDownloadingTo location: Foundation.URL, completionHandler: @escaping (SAPFoundation.SAPURLSession.DidCompleteDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, downloadTask: SAPFoundation.SAPURLSessionTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64, completionHandler: @escaping (SAPFoundation.SAPURLSession.CancellableDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, downloadTask: SAPFoundation.SAPURLSessionTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64, completionHandler: @escaping (SAPFoundation.SAPURLSession.CancellableDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didCreate sessionTask: Foundation.URLSessionTask)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, didCreate task: SAPFoundation.SAPURLSessionTask, for sessionTask: Foundation.URLSessionTask)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willSend request: Foundation.URLRequest, completionHandler: @escaping (SAPFoundation.SAPURLSession.RequestDisposition) -> Swift.Void)
  func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didCompleteWithError error: Swift.Error?)
}
extension SAPFoundation.SAPURLSessionObserving {
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, didBecomeInvalidWithError error: Swift.Error?, completionHandler: @escaping () -> Swift.Void)
  public func sapURLSessionDidFinishEvents(forBackgroundURLSession session: SAPFoundation.SAPURLSession, completionHandler: @escaping () -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willBeginDelayedRequest request: Foundation.URLRequest, completionHandler: @escaping (SAPFoundation.SAPURLSession.DelayedRequestDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, taskIsWaitingForConnectivity task: SAPFoundation.SAPURLSessionTask)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (SAPFoundation.SAPURLSession.HTTPRedirectDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (SAPFoundation.SAPURLSession.AuthChallengeDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willUse credential: Foundation.URLCredential, for challenge: Foundation.URLAuthenticationChallenge)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, needNewBodyStream completionHandler: @escaping (SAPFoundation.SAPURLSession.InputStreamDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64, completionHandler: @escaping (SAPFoundation.SAPURLSession.CancellableDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics, completionHandler: @escaping () -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didCompleteWithError error: Swift.Error?, completionHandler: @escaping (SAPFoundation.SAPURLSession.DidCompleteDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (SAPFoundation.SAPURLSession.ResponseDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, didBecome downloadTask: Foundation.URLSessionDownloadTask, completionHandler: @escaping (SAPFoundation.SAPURLSession.CancellableDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, didReceive data: Foundation.Data, completionHandler: @escaping (SAPFoundation.SAPURLSession.DataDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, dataTask: SAPFoundation.SAPURLSessionTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (SAPFoundation.SAPURLSession.CacheResponseDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, downloadTask: SAPFoundation.SAPURLSessionTask, didFinishDownloadingTo location: Foundation.URL, completionHandler: @escaping (SAPFoundation.SAPURLSession.DidCompleteDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, downloadTask: SAPFoundation.SAPURLSessionTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64, completionHandler: @escaping (SAPFoundation.SAPURLSession.CancellableDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, downloadTask: SAPFoundation.SAPURLSessionTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64, completionHandler: @escaping (SAPFoundation.SAPURLSession.CancellableDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didCreate sessionTask: Foundation.URLSessionTask)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, didCreate task: SAPFoundation.SAPURLSessionTask, for sessionTask: Foundation.URLSessionTask)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, willSend request: Foundation.URLRequest, completionHandler: @escaping (SAPFoundation.SAPURLSession.RequestDisposition) -> Swift.Void)
  public func sapURLSession(_ session: SAPFoundation.SAPURLSession, task: SAPFoundation.SAPURLSessionTask, didCompleteWithError error: Swift.Error?)
  public func copy() -> Any?
}
extension SAPFoundation.SAPURLSession {
  public enum CancellableDisposition {
    case allow
    case cancel(Swift.Error)
  }
  public enum DataDisposition {
    case allow(Foundation.Data)
    case cancel(Swift.Error)
  }
  public enum ResponseDisposition {
    case allow(Foundation.URLResponse)
    case cancel(Swift.Error)
    case becomeDownload
    case resend
  }
  public enum RequestDisposition {
    case allow(Foundation.URLRequest)
    case cancel(Swift.Error)
  }
  public enum DidCompleteDisposition {
    case allow
    case fail(Swift.Error)
    case resend
  }
  public enum AuthChallengeDisposition {
    case use(Foundation.URLCredential)
    case rejectProtectionSpace
    case performDefaultHandling
    case cancel(Swift.Error)
    case resend
  }
  public enum DelayedRequestDisposition {
    case continueLoading
    case use(new: Foundation.URLRequest)
    case cancel(Swift.Error)
  }
  public enum InputStreamDisposition {
    case bypass
    case use(Foundation.InputStream)
    case cancel(Swift.Error)
  }
  public enum HTTPRedirectDisposition {
    case allow(Foundation.URLRequest)
    case cancel(Swift.Error)
  }
  public enum CacheResponseDisposition {
    case use(Foundation.CachedURLResponse?)
    case cancel(Swift.Error)
  }
}
extension SAPFoundation.SAPURLSession {
  public struct HTTPHeader {
    public static let contentType: Swift.String
    public static let contentLength: Swift.String
    public static let accept: Swift.String
    public static let acceptLanguage: Swift.String
    public static let acceptCharset: Swift.String
  }
  public struct HTTPContentType {
    public static let applicationJSON: Swift.String
    public static let applicationData: Swift.String
    public static let applicationOctetStream: Swift.String
    public static let applicationXML: Swift.String
    public static let applicationPDF: Swift.String
    public static let audioMIDI: Swift.String
    public static let audioMPEG: Swift.String
    public static let audioOGG: Swift.String
    public static let audioWAV: Swift.String
    public static let audioWAVE: Swift.String
    public static let imageBMP: Swift.String
    public static let imageGIF: Swift.String
    public static let imageJPEG: Swift.String
    public static let imagePNG: Swift.String
    public static let imageSVGXML: Swift.String
    public static let multipartByteRanges: Swift.String
    public static let multipartFormData: Swift.String
    public static let textHTML: Swift.String
    public static let textPlain: Swift.String
    public static let videoMP4: Swift.String
    public static let videoOGG: Swift.String
  }
  public struct HTTPStatusCode {
    public static let ok: Swift.Int
    public static let created: Swift.Int
    public static let noContent: Swift.Int
    public static let notModified: Swift.Int
    public static let badRequest: Swift.Int
    public static let unauthorized: Swift.Int
    public static let forbidden: Swift.Int
    public static let notFound: Swift.Int
    public static let internalServerError: Swift.Int
  }
  public struct HTTPMethod {
    public static let delete: Swift.String
    public static let get: Swift.String
    public static let head: Swift.String
    public static let options: Swift.String
    public static let patch: Swift.String
    public static let post: Swift.String
    public static let put: Swift.String
  }
}
open class PlistCoder : SAPFoundation.CoderProtocol {
  final public let encoder: Foundation.PropertyListEncoder
  final public let decoder: Foundation.PropertyListDecoder
  public init()
  open func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  open func encode<Value>(_ value: Value) throws -> Foundation.Data where Value : Swift.Encodable
  @objc deinit
}
public protocol AuthenticationHandling : AnyObject {
  func authenticationObserver(_ observer: SAPFoundation.SAPURLSessionObserving, didAuthenticate session: SAPFoundation.SAPURLSession, requestBypassIdentifier: Foundation.UUID, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  func authenticationObserver(_ observer: SAPFoundation.SAPURLSessionObserving, didFailToAuthenticate session: SAPFoundation.SAPURLSession, error: Swift.Error)
}
public protocol CoderProtocol {
  func encode<Value>(_ value: Value) throws -> Foundation.Data where Value : Swift.Encodable
  func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
}
public protocol OAuth2Authentication {
  func authenticate(completionHandler: @escaping (SAPFoundation.OAuth2Token?, Swift.Error?) -> Swift.Void)
  func refresh(token: SAPFoundation.OAuth2Token, completionHandler: @escaping (SAPFoundation.OAuth2Token?, Swift.Error?) -> Swift.Void)
  func cancelAuthentication()
}
public enum SAPURLSessionError : Swift.Error {
  case invalidRequest
  case unexpectedHTTPMethod
  case invalidURLSession
  case failedToRetriveCSRFToken(Swift.String?)
}
extension SAPFoundation.SAPURLSessionError : SAPCommon.SAPError {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
}
public struct OAuth2ServerError {
  public let responseData: Foundation.Data?
  public let code: Swift.String?
  public let message: Swift.String?
  public let uri: Swift.String?
  public let state: Swift.String?
  public init(code: Swift.String, message: Swift.String?, uri: Swift.String?, state: Swift.String?)
  public init(data: Foundation.Data)
}
public protocol CompositeCodableStoring : SAPFoundation.CodableStoring {
  var persistentStore: SAPCommon.DataStoring? { get }
  func setPersistentStore(_ store: SAPCommon.DataStoring) throws
  func releasePersistentStore()
}
extension SAPFoundation.OAuth2TokenError : Swift.Hashable {}
extension SAPFoundation.AuthenticationObserverError : Swift.Equatable {}
extension SAPFoundation.AuthenticationObserverError : Swift.Hashable {}
